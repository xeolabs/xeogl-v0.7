{
    "project": {
        "name": "xeogl",
        "description": "A WebGL-based 3D visualization engine from xeoLabs",
        "version": "0.7.0",
        "url": "http://xeogl.org/",
        "logo": "../assets/images/logo.png"
    },
    "files": {
        "src/_utils/inheritance.js": {
            "name": "src/_utils/inheritance.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/_utils/map.js": {
            "name": "src/_utils/map.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/animation/_module.js": {
            "name": "src/animation/_module.js",
            "modules": {
                "animation": 1
            },
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/animation/cameraFlightAnimation.js": {
            "name": "src/animation/cameraFlightAnimation.js",
            "modules": {},
            "classes": {
                "CameraFlightAnimation": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/camera/_module.js": {
            "name": "src/camera/_module.js",
            "modules": {
                "camera": 1
            },
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/camera/camera.js": {
            "name": "src/camera/camera.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/camera/camera.new.js": {
            "name": "src/camera/camera.new.js",
            "modules": {},
            "classes": {
                "Camera": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/camera/frustum.js": {
            "name": "src/camera/frustum.js",
            "modules": {},
            "classes": {
                "Frustum": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/camera/ortho.js": {
            "name": "src/camera/ortho.js",
            "modules": {},
            "classes": {
                "Ortho": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/camera/perspective.js": {
            "name": "src/camera/perspective.js",
            "modules": {},
            "classes": {
                "Perspective": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/canvas/_module.js": {
            "name": "src/canvas/_module.js",
            "modules": {
                "canvas": 1
            },
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/canvas/canvas.js": {
            "name": "src/canvas/canvas.js",
            "modules": {},
            "classes": {
                "Canvas": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/canvas/spinner.js": {
            "name": "src/canvas/spinner.js",
            "modules": {},
            "classes": {
                "Spinner": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/clipping/_module.js": {
            "name": "src/clipping/_module.js",
            "modules": {
                "clipping": 1
            },
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/clipping/clip.js": {
            "name": "src/clipping/clip.js",
            "modules": {},
            "classes": {
                "Clip": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/clipping/clips.js": {
            "name": "src/clipping/clips.js",
            "modules": {},
            "classes": {
                "Clips": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/controls/_module.js": {
            "name": "src/controls/_module.js",
            "modules": {
                "controls": 1
            },
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/controls/cameraControl.js": {
            "name": "src/controls/cameraControl.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/controls/cameraControl.new.js": {
            "name": "src/controls/cameraControl.new.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/controls/cameraControl.newest.js": {
            "name": "src/controls/cameraControl.newest.js",
            "modules": {},
            "classes": {
                "CameraControl": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/entities/_module.js": {
            "name": "src/entities/_module.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/entities/entity.js": {
            "name": "src/entities/entity.js",
            "modules": {},
            "classes": {
                "Entity": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/geometry/_module.js": {
            "name": "src/geometry/_module.js",
            "modules": {
                "geometry": 1
            },
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/geometry/aabbGeometry.js": {
            "name": "src/geometry/aabbGeometry.js",
            "modules": {},
            "classes": {
                "AABBGeometry": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/geometry/boxGeometry.js": {
            "name": "src/geometry/boxGeometry.js",
            "modules": {},
            "classes": {
                "BoxGeometry": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/geometry/cylinderGeometry.js": {
            "name": "src/geometry/cylinderGeometry.js",
            "modules": {},
            "classes": {
                "CylinderGeometry": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/geometry/geometry.js": {
            "name": "src/geometry/geometry.js",
            "modules": {},
            "classes": {
                "Geometry": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/geometry/obbGeometry.js": {
            "name": "src/geometry/obbGeometry.js",
            "modules": {},
            "classes": {
                "OBBGeometry": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/geometry/pathGeometry.js": {
            "name": "src/geometry/pathGeometry.js",
            "modules": {},
            "classes": {
                "PathGeometry": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/geometry/planeGeometry.js": {
            "name": "src/geometry/planeGeometry.js",
            "modules": {},
            "classes": {
                "PlaneGeometry": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/geometry/sphereGeometry.js": {
            "name": "src/geometry/sphereGeometry.js",
            "modules": {},
            "classes": {
                "SphereGeometry": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/geometry/torusGeometry.js": {
            "name": "src/geometry/torusGeometry.js",
            "modules": {},
            "classes": {
                "TorusGeometry": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/input/_module.js": {
            "name": "src/input/_module.js",
            "modules": {
                "input": 1
            },
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/input/input.js": {
            "name": "src/input/input.js",
            "modules": {},
            "classes": {
                "Input": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/lighting/_module.js": {
            "name": "src/lighting/_module.js",
            "modules": {
                "lighting": 1
            },
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/lighting/ambientLight.js": {
            "name": "src/lighting/ambientLight.js",
            "modules": {},
            "classes": {
                "AmbientLight": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/lighting/cubeTexture.js": {
            "name": "src/lighting/cubeTexture.js",
            "modules": {},
            "classes": {
                "CubeTexture": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/lighting/dirLight.js": {
            "name": "src/lighting/dirLight.js",
            "modules": {},
            "classes": {
                "DirLight": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/lighting/lights.js": {
            "name": "src/lighting/lights.js",
            "modules": {},
            "classes": {
                "Lights": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/lighting/pointLight.js": {
            "name": "src/lighting/pointLight.js",
            "modules": {},
            "classes": {
                "PointLight": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/lighting/shadow.js": {
            "name": "src/lighting/shadow.js",
            "modules": {},
            "classes": {
                "Shadow": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/lighting/spotLight.js": {
            "name": "src/lighting/spotLight.js",
            "modules": {},
            "classes": {
                "SpotLight": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/materials/_module.js": {
            "name": "src/materials/_module.js",
            "modules": {
                "materials": 1
            },
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/materials/emphasisMaterial.js": {
            "name": "src/materials/emphasisMaterial.js",
            "modules": {},
            "classes": {
                "EmphasisMaterial": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/materials/fresnel.js": {
            "name": "src/materials/fresnel.js",
            "modules": {},
            "classes": {
                "Fresnel": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/materials/lambertMaterial.js": {
            "name": "src/materials/lambertMaterial.js",
            "modules": {},
            "classes": {
                "LambertMaterial": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/materials/material.js": {
            "name": "src/materials/material.js",
            "modules": {},
            "classes": {
                "Material": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/materials/metallicMaterial.js": {
            "name": "src/materials/metallicMaterial.js",
            "modules": {},
            "classes": {
                "MetallicMaterial": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/materials/outlineMaterial.js": {
            "name": "src/materials/outlineMaterial.js",
            "modules": {},
            "classes": {
                "OutlineMaterial": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/materials/phongMaterial.js": {
            "name": "src/materials/phongMaterial.js",
            "modules": {},
            "classes": {
                "PhongMaterial": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/materials/specularMaterial.js": {
            "name": "src/materials/specularMaterial.js",
            "modules": {},
            "classes": {
                "SpecularMaterial": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/materials/texture.js": {
            "name": "src/materials/texture.js",
            "modules": {},
            "classes": {
                "Texture": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/math/_module.js": {
            "name": "src/math/_module.js",
            "modules": {
                "math": 1
            },
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/math/math.js": {
            "name": "src/math/math.js",
            "modules": {},
            "classes": {
                "xeogl.math.math": 1
            },
            "fors": {},
            "namespaces": {
                "xeogl.math": 1
            }
        },
        "src/math/mathBoundaries.js": {
            "name": "src/math/mathBoundaries.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/math/mathCurves.js": {
            "name": "src/math/mathCurves.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/math/mathGeometry.js": {
            "name": "src/math/mathGeometry.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/math/mathGeometryBuild.js": {
            "name": "src/math/mathGeometryBuild.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/math/mathKDTree.js": {
            "name": "src/math/mathKDTree.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/math/mathRays.js": {
            "name": "src/math/mathRays.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/models/_module.js": {
            "name": "src/models/_module.js",
            "modules": {
                "models": 1
            },
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/models/model.js": {
            "name": "src/models/model.js",
            "modules": {},
            "classes": {
                "Model": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/transforms/_module.js": {
            "name": "src/transforms/_module.js",
            "modules": {
                "transforms": 1
            },
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/transforms/lookat.js": {
            "name": "src/transforms/lookat.js",
            "modules": {},
            "classes": {
                "Lookat": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/transforms/quaternion.js": {
            "name": "src/transforms/quaternion.js",
            "modules": {},
            "classes": {
                "Quaternion": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/transforms/rotate.js": {
            "name": "src/transforms/rotate.js",
            "modules": {},
            "classes": {
                "Rotate": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/transforms/scale.js": {
            "name": "src/transforms/scale.js",
            "modules": {},
            "classes": {
                "Scale": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/transforms/transform.js": {
            "name": "src/transforms/transform.js",
            "modules": {},
            "classes": {
                "Transform": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/transforms/translate.js": {
            "name": "src/transforms/translate.js",
            "modules": {},
            "classes": {
                "Translate": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/viewport/_module.js": {
            "name": "src/viewport/_module.js",
            "modules": {
                "rendering": 1
            },
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/viewport/viewport.js": {
            "name": "src/viewport/viewport.js",
            "modules": {},
            "classes": {
                "Viewport": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/component.js": {
            "name": "src/component.js",
            "modules": {},
            "classes": {
                "Component": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/scene.js": {
            "name": "src/scene.js",
            "modules": {},
            "classes": {
                "Scene": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/xeogl.js": {
            "name": "src/xeogl.js",
            "modules": {
                "xeogl": 1
            },
            "classes": {
                "xeogl": 1
            },
            "fors": {},
            "namespaces": {
                "xeogl": 1
            }
        },
        "examples/js/animation/_module.js": {
            "name": "examples/js/animation/_module.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "examples/js/animation/cameraFollowAnimation.js": {
            "name": "examples/js/animation/cameraFollowAnimation.js",
            "modules": {},
            "classes": {
                "CameraFollowAnimation": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "examples/js/animation/cameraPath.js": {
            "name": "examples/js/animation/cameraPath.js",
            "modules": {},
            "classes": {
                "CameraPath": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "examples/js/animation/cameraPathAnimation.js": {
            "name": "examples/js/animation/cameraPathAnimation.js",
            "modules": {},
            "classes": {
                "CameraPathAnimation": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "examples/js/annotations/_module.js": {
            "name": "examples/js/annotations/_module.js",
            "modules": {
                "annotations": 1
            },
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "examples/js/annotations/annotation.js": {
            "name": "examples/js/annotations/annotation.js",
            "modules": {},
            "classes": {
                "Annotation": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "examples/js/annotations/pin.js": {
            "name": "examples/js/annotations/pin.js",
            "modules": {},
            "classes": {
                "Pin": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "examples/js/controls/_module.js": {
            "name": "examples/js/controls/_module.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "examples/js/effects/_module.js": {
            "name": "examples/js/effects/_module.js",
            "modules": {
                "effects": 1
            },
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "examples/js/effects/loadingEffect.js": {
            "name": "examples/js/effects/loadingEffect.js",
            "modules": {},
            "classes": {
                "LoadingEffect": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "examples/js/effects/stereoEffect.js": {
            "name": "examples/js/effects/stereoEffect.js",
            "modules": {},
            "classes": {
                "StereoEffect": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "examples/js/curves/_module.js": {
            "name": "examples/js/curves/_module.js",
            "modules": {
                "curves": 1
            },
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "examples/js/curves/cubicBezierCurve.js": {
            "name": "examples/js/curves/cubicBezierCurve.js",
            "modules": {},
            "classes": {
                "CubicBezierCurve": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "examples/js/curves/curve.js": {
            "name": "examples/js/curves/curve.js",
            "modules": {},
            "classes": {
                "Curve": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "examples/js/curves/path.js": {
            "name": "examples/js/curves/path.js",
            "modules": {},
            "classes": {
                "Path": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "examples/js/curves/quadraticBezierCurve.js": {
            "name": "examples/js/curves/quadraticBezierCurve.js",
            "modules": {},
            "classes": {
                "QuadraticBezierCurve": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "examples/js/curves/splineCurve.js": {
            "name": "examples/js/curves/splineCurve.js",
            "modules": {},
            "classes": {
                "SplineCurve": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "examples/js/generation/_module.js": {
            "name": "examples/js/generation/_module.js",
            "modules": {
                "generation": 1
            },
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "examples/js/generation/geometryBuilder.js": {
            "name": "examples/js/generation/geometryBuilder.js",
            "modules": {},
            "classes": {
                "GeometryBuilder": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "examples/js/skyboxes/_module.js": {
            "name": "examples/js/skyboxes/_module.js",
            "modules": {
                "skyboxes": 1
            },
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "examples/js/skyboxes/skybox.js": {
            "name": "examples/js/skyboxes/skybox.js",
            "modules": {},
            "classes": {
                "Skybox": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "examples/js/stories/_module.js": {
            "name": "examples/js/stories/_module.js",
            "modules": {
                "stories": 1
            },
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "examples/js/stories/annotationStory.js": {
            "name": "examples/js/stories/annotationStory.js",
            "modules": {},
            "classes": {
                "AnnotationStory": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "examples/js/stories/story.js": {
            "name": "examples/js/stories/story.js",
            "modules": {},
            "classes": {
                "Story": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "examples/js/geometry/_module.js": {
            "name": "examples/js/geometry/_module.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "examples/js/geometry/heightmapGeometry.js": {
            "name": "examples/js/geometry/heightmapGeometry.js",
            "modules": {},
            "classes": {
                "HeightmapGeometry": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "examples/js/geometry/nintendo3DSGeometry.js": {
            "name": "examples/js/geometry/nintendo3DSGeometry.js",
            "modules": {},
            "classes": {
                "Nintendo3DSGeometry": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "examples/js/geometry/objGeometry.js": {
            "name": "examples/js/geometry/objGeometry.js",
            "modules": {},
            "classes": {
                "OBJGeometry": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "examples/js/geometry/teapotGeometry.js": {
            "name": "examples/js/geometry/teapotGeometry.js",
            "modules": {},
            "classes": {
                "TeapotGeometry": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "examples/js/geometry/vectorTextGeometry.js": {
            "name": "examples/js/geometry/vectorTextGeometry.js",
            "modules": {},
            "classes": {
                "VectorTextGeometry": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "examples/js/models/DRACOLoader.js": {
            "name": "examples/js/models/DRACOLoader.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "examples/js/models/OBJModel.js": {
            "name": "examples/js/models/OBJModel.js",
            "modules": {},
            "classes": {
                "OBJModel": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "examples/js/models/STLModel.js": {
            "name": "examples/js/models/STLModel.js",
            "modules": {},
            "classes": {
                "STLModel": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "examples/js/models/_module.js": {
            "name": "examples/js/models/_module.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "examples/js/models/buildableModel.js": {
            "name": "examples/js/models/buildableModel.js",
            "modules": {},
            "classes": {
                "BuildableModel": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "examples/js/models/glTFModel.js": {
            "name": "examples/js/models/glTFModel.js",
            "modules": {},
            "classes": {
                "GLTFModel": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "examples/js/models/sceneJSModel.js": {
            "name": "examples/js/models/sceneJSModel.js",
            "modules": {},
            "classes": {
                "SceneJSModel": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "examples/js/models/testModel.js": {
            "name": "examples/js/models/testModel.js",
            "modules": {},
            "classes": {
                "TestModel": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "examples/js/helpers/_module.js": {
            "name": "examples/js/helpers/_module.js",
            "modules": {
                "helpers": 1
            },
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "examples/js/helpers/aabbHelper.js": {
            "name": "examples/js/helpers/aabbHelper.js",
            "modules": {},
            "classes": {
                "AABBHelper": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "examples/js/helpers/axisHelper.js": {
            "name": "examples/js/helpers/axisHelper.js",
            "modules": {},
            "classes": {
                "AxisHelper": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "examples/js/helpers/clipHelper.js": {
            "name": "examples/js/helpers/clipHelper.js",
            "modules": {},
            "classes": {
                "ClipHelper": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "examples/js/helpers/labelHelper.js": {
            "name": "examples/js/helpers/labelHelper.js",
            "modules": {},
            "classes": {
                "LabelHelper": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "examples/js/helpers/obbHelper.js": {
            "name": "examples/js/helpers/obbHelper.js",
            "modules": {},
            "classes": {
                "OBBHelper": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "examples/js/helpers/planeHelper.js": {
            "name": "examples/js/helpers/planeHelper.js",
            "modules": {},
            "classes": {
                "PlaneHelper": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "examples/js/helpers/splineCurveHelper.js": {
            "name": "examples/js/helpers/splineCurveHelper.js",
            "modules": {
                "entities": 1
            },
            "classes": {
                "SplineCurveHelper": 1
            },
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {
        "xeogl": {
            "name": "xeogl",
            "submodules": {
                "animation": 1,
                "camera": 1,
                "canvas": 1,
                "clipping": 1,
                "controls": 1,
                "entities": 1,
                "geometry": 1,
                "input": 1,
                "lighting": 1,
                "materials": 1,
                "math": 1,
                "models": 1,
                "transforms": 1,
                "rendering": 1,
                "annotations": 1,
                "effects": 1,
                "curves": 1,
                "generation": 1,
                "skyboxes": 1,
                "stories": 1,
                "helpers": 1
            },
            "classes": {
                "CameraFlightAnimation": 1,
                "Camera": 1,
                "Frustum": 1,
                "Ortho": 1,
                "Perspective": 1,
                "Canvas": 1,
                "Spinner": 1,
                "Clip": 1,
                "Clips": 1,
                "CameraControl": 1,
                "Entity": 1,
                "AABBGeometry": 1,
                "BoxGeometry": 1,
                "CylinderGeometry": 1,
                "Geometry": 1,
                "OBBGeometry": 1,
                "PathGeometry": 1,
                "PlaneGeometry": 1,
                "SphereGeometry": 1,
                "TorusGeometry": 1,
                "Input": 1,
                "AmbientLight": 1,
                "CubeTexture": 1,
                "DirLight": 1,
                "Lights": 1,
                "PointLight": 1,
                "Shadow": 1,
                "SpotLight": 1,
                "EmphasisMaterial": 1,
                "Fresnel": 1,
                "LambertMaterial": 1,
                "Material": 1,
                "MetallicMaterial": 1,
                "OutlineMaterial": 1,
                "PhongMaterial": 1,
                "SpecularMaterial": 1,
                "Texture": 1,
                "xeogl.math.math": 1,
                "Model": 1,
                "Lookat": 1,
                "Quaternion": 1,
                "Rotate": 1,
                "Scale": 1,
                "Transform": 1,
                "Translate": 1,
                "Viewport": 1,
                "Component": 1,
                "Scene": 1,
                "xeogl": 1,
                "CameraFollowAnimation": 1,
                "CameraPath": 1,
                "CameraPathAnimation": 1,
                "Annotation": 1,
                "Pin": 1,
                "LoadingEffect": 1,
                "StereoEffect": 1,
                "CubicBezierCurve": 1,
                "Curve": 1,
                "Path": 1,
                "QuadraticBezierCurve": 1,
                "SplineCurve": 1,
                "GeometryBuilder": 1,
                "Skybox": 1,
                "AnnotationStory": 1,
                "Story": 1,
                "HeightmapGeometry": 1,
                "Nintendo3DSGeometry": 1,
                "OBJGeometry": 1,
                "TeapotGeometry": 1,
                "VectorTextGeometry": 1,
                "OBJModel": 1,
                "STLModel": 1,
                "BuildableModel": 1,
                "GLTFModel": 1,
                "SceneJSModel": 1,
                "TestModel": 1,
                "AABBHelper": 1,
                "AxisHelper": 1,
                "ClipHelper": 1,
                "LabelHelper": 1,
                "OBBHelper": 1,
                "PlaneHelper": 1
            },
            "fors": {},
            "namespaces": {
                "xeogl.math": 1,
                "xeogl": 1
            },
            "tag": "main",
            "file": "examples/js/helpers/planeHelper.js",
            "line": 1,
            "description": "The xeogl namespace.",
            "itemtype": "main"
        },
        "animation": {
            "name": "animation",
            "submodules": {},
            "classes": {
                "CameraFlightAnimation": 1,
                "CameraFollowAnimation": 1,
                "CameraPath": 1,
                "CameraPathAnimation": 1
            },
            "fors": {},
            "is_submodule": 1,
            "namespaces": {},
            "module": "xeogl",
            "namespace": "",
            "file": "examples/js/animation/cameraPathAnimation.js",
            "line": 1,
            "description": "Components for animating state within Scenes."
        },
        "camera": {
            "name": "camera",
            "submodules": {},
            "classes": {
                "Camera": 1,
                "Frustum": 1,
                "Ortho": 1,
                "Perspective": 1
            },
            "fors": {},
            "is_submodule": 1,
            "namespaces": {},
            "module": "xeogl",
            "namespace": "",
            "file": "src/camera/perspective.js",
            "line": 1,
            "description": "Camera components."
        },
        "canvas": {
            "name": "canvas",
            "submodules": {},
            "classes": {
                "Canvas": 1,
                "Spinner": 1
            },
            "fors": {},
            "is_submodule": 1,
            "namespaces": {},
            "module": "xeogl",
            "namespace": "",
            "file": "src/canvas/spinner.js",
            "line": 1,
            "description": "Canvas-related things."
        },
        "clipping": {
            "name": "clipping",
            "submodules": {},
            "classes": {
                "Clip": 1,
                "Clips": 1
            },
            "fors": {},
            "is_submodule": 1,
            "namespaces": {},
            "module": "xeogl",
            "namespace": "",
            "file": "src/clipping/clips.js",
            "line": 1,
            "description": "Components for cross-section views of Entities."
        },
        "controls": {
            "name": "controls",
            "submodules": {},
            "classes": {
                "CameraControl": 1
            },
            "fors": {},
            "is_submodule": 1,
            "namespaces": {},
            "module": "xeogl",
            "namespace": "",
            "file": "src/controls/cameraControl.newest.js",
            "line": 1,
            "description": "Components for controlling things with user input."
        },
        "entities": {
            "name": "entities",
            "submodules": {
                "undefined": 1
            },
            "classes": {
                "SplineCurveHelper": 1,
                "Entity": 1
            },
            "fors": {},
            "is_submodule": 1,
            "namespaces": {},
            "module": "xeogl",
            "namespace": "",
            "file": "examples/js/helpers/splineCurveHelper.js",
            "line": 1,
            "description": "Shows the shape and control points of {{#crossLink \"SplineCurve\"}}{{/crossLink}}",
            "tag": "module"
        },
        "geometry": {
            "name": "geometry",
            "submodules": {},
            "classes": {
                "AABBGeometry": 1,
                "BoxGeometry": 1,
                "CylinderGeometry": 1,
                "Geometry": 1,
                "OBBGeometry": 1,
                "PathGeometry": 1,
                "PlaneGeometry": 1,
                "SphereGeometry": 1,
                "TorusGeometry": 1,
                "HeightmapGeometry": 1,
                "Nintendo3DSGeometry": 1,
                "OBJGeometry": 1,
                "TeapotGeometry": 1,
                "VectorTextGeometry": 1
            },
            "fors": {},
            "is_submodule": 1,
            "namespaces": {},
            "module": "xeogl",
            "namespace": "",
            "file": "examples/js/geometry/vectorTextGeometry.js",
            "line": 1,
            "description": "Components for defining geometry."
        },
        "input": {
            "name": "input",
            "submodules": {},
            "classes": {
                "Input": 1
            },
            "fors": {},
            "is_submodule": 1,
            "namespaces": {},
            "module": "xeogl",
            "namespace": "",
            "file": "src/input/input.js",
            "line": 1,
            "description": "Components for capturing user input."
        },
        "lighting": {
            "name": "lighting",
            "submodules": {},
            "classes": {
                "AmbientLight": 1,
                "CubeTexture": 1,
                "DirLight": 1,
                "Lights": 1,
                "PointLight": 1,
                "Shadow": 1,
                "SpotLight": 1
            },
            "fors": {},
            "is_submodule": 1,
            "namespaces": {},
            "module": "xeogl",
            "namespace": "",
            "file": "src/lighting/spotLight.js",
            "line": 1,
            "description": "Components for defining light sources."
        },
        "materials": {
            "name": "materials",
            "submodules": {},
            "classes": {
                "EmphasisMaterial": 1,
                "Fresnel": 1,
                "LambertMaterial": 1,
                "Material": 1,
                "MetallicMaterial": 1,
                "OutlineMaterial": 1,
                "PhongMaterial": 1,
                "SpecularMaterial": 1,
                "Texture": 1
            },
            "fors": {},
            "is_submodule": 1,
            "namespaces": {},
            "module": "xeogl",
            "namespace": "",
            "file": "src/materials/texture.js",
            "line": 1,
            "description": "Components to define the surface appearance of Entities."
        },
        "math": {
            "name": "math",
            "submodules": {},
            "classes": {
                "xeogl.math.math": 1
            },
            "fors": {},
            "is_submodule": 1,
            "namespaces": {
                "xeogl.math": 1
            },
            "module": "xeogl",
            "namespace": "",
            "file": "src/math/math.js",
            "line": 12,
            "description": "Math utilities.",
            "static": 1
        },
        "models": {
            "name": "models",
            "submodules": {},
            "classes": {
                "Model": 1,
                "OBJModel": 1,
                "STLModel": 1,
                "BuildableModel": 1,
                "GLTFModel": 1,
                "SceneJSModel": 1,
                "TestModel": 1
            },
            "fors": {},
            "is_submodule": 1,
            "namespaces": {},
            "module": "xeogl",
            "namespace": "",
            "file": "examples/js/models/testModel.js",
            "line": 1,
            "description": "Models are units of xeogl content."
        },
        "transforms": {
            "name": "transforms",
            "submodules": {},
            "classes": {
                "Lookat": 1,
                "Quaternion": 1,
                "Rotate": 1,
                "Scale": 1,
                "Transform": 1,
                "Translate": 1
            },
            "fors": {},
            "is_submodule": 1,
            "namespaces": {},
            "module": "xeogl",
            "namespace": "",
            "file": "src/transforms/translate.js",
            "line": 1,
            "description": "Modelling transform components."
        },
        "rendering": {
            "name": "rendering",
            "submodules": {},
            "classes": {
                "Viewport": 1
            },
            "fors": {},
            "is_submodule": 1,
            "namespaces": {},
            "module": "xeogl",
            "namespace": "",
            "file": "src/viewport/viewport.js",
            "line": 1,
            "description": "Components that influence the way entities are rendered with WebGL."
        },
        "annotations": {
            "name": "annotations",
            "submodules": {},
            "classes": {
                "Annotation": 1,
                "Pin": 1
            },
            "fors": {},
            "is_submodule": 1,
            "namespaces": {},
            "module": "xeogl",
            "namespace": "",
            "file": "examples/js/annotations/pin.js",
            "line": 1,
            "description": "Components for annotating entities."
        },
        "effects": {
            "name": "effects",
            "submodules": {},
            "classes": {
                "LoadingEffect": 1,
                "StereoEffect": 1
            },
            "fors": {},
            "is_submodule": 1,
            "namespaces": {},
            "module": "xeogl",
            "namespace": "",
            "file": "examples/js/effects/stereoEffect.js",
            "line": 1,
            "description": "Components for viewing effects."
        },
        "curves": {
            "name": "curves",
            "submodules": {},
            "classes": {
                "CubicBezierCurve": 1,
                "Curve": 1,
                "Path": 1,
                "QuadraticBezierCurve": 1,
                "SplineCurve": 1
            },
            "fors": {},
            "is_submodule": 1,
            "namespaces": {},
            "module": "xeogl",
            "namespace": "",
            "file": "examples/js/curves/splineCurve.js",
            "line": 1,
            "description": "Components for defining 3D curves."
        },
        "generation": {
            "name": "generation",
            "submodules": {},
            "classes": {
                "GeometryBuilder": 1
            },
            "fors": {},
            "is_submodule": 1,
            "namespaces": {},
            "module": "xeogl",
            "namespace": "",
            "file": "examples/js/generation/geometryBuilder.js",
            "line": 1,
            "description": "Components for generating xeogl content."
        },
        "skyboxes": {
            "name": "skyboxes",
            "submodules": {},
            "classes": {
                "Skybox": 1
            },
            "fors": {},
            "is_submodule": 1,
            "namespaces": {},
            "module": "xeogl",
            "namespace": "",
            "file": "examples/js/skyboxes/skybox.js",
            "line": 1,
            "description": "Skybox components."
        },
        "stories": {
            "name": "stories",
            "submodules": {},
            "classes": {
                "AnnotationStory": 1,
                "Story": 1
            },
            "fors": {},
            "is_submodule": 1,
            "namespaces": {},
            "module": "xeogl",
            "namespace": "",
            "file": "examples/js/stories/story.js",
            "line": 5,
            "description": "UI presentation components."
        },
        "helpers": {
            "name": "helpers",
            "submodules": {},
            "classes": {},
            "fors": {},
            "is_submodule": 1,
            "namespaces": {},
            "module": "xeogl",
            "namespace": "",
            "file": "examples/js/helpers/_module.js",
            "line": 1,
            "description": "Components to help visualise other components."
        }
    },
    "classes": {
        "CameraFlightAnimation": {
            "name": "CameraFlightAnimation",
            "shortname": "CameraFlightAnimation",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "xeogl",
            "namespace": "",
            "file": "src/animation/cameraFlightAnimation.js",
            "line": 1,
            "description": "A **CameraFlightAnimation** jumps or flies the {{#crossLink \"Scene\"}}Scene's{{/crossLink}} {{#crossLink \"Camera\"}}{{/crossLink}} to look at a given target.\n\n<a href=\"../../examples/#animation_camera_flight\"><img src=\"http://i.giphy.com/3o7TKP0jN800EQ99EQ.gif\"></img></a>\n\n* TODO: Document behaviour for ortho projection\n* TODO: Update docs for camera refactor, where ortho and perspective components will always be present on camera\n\n## Overview\n\n* Can be made to either fly or jump to its target.\n* While busy flying to a target, it can be stopped, or redirected to fly to a different target.\n\nA CameraFlightAnimation's target can be:\n\n* specific ````eye````, ````look```` and ````up```` positions,\n* an axis-aligned World-space bounding box (AABB), or\n* an instance or ID of any {{#crossLink \"Component\"}}{{/crossLink}} subtype that provides a World-space AABB.\n\nYou can configure its {{#crossLink \"CameraFlightAnimation/fit:property\"}}{{/crossLink}}\nand {{#crossLink \"CameraFlightAnimation/fitFOV:property\"}}{{/crossLink}} properties to make it stop at the point where the target\noccupies a certain amount of the field-of-view.\n\n## Examples\n\n* [Flying to random Entities](../../examples/#animation_camera_flight)\n\n## Flying to an Entity\n\nFlying to an {{#crossLink \"Entity\"}}{{/crossLink}}:\n\n````Javascript\n// Create a CameraFlightAnimation that takes one second to fly\n// the default Scene's Camera to each specified target\nvar cameraFlight = new xeogl.CameraFlightAnimation({\n   fit: true, // Default\n   fitFOV: 45, // Default, degrees\n   duration: 1 // Default, seconds\n}, function() {\n          // Arrived\n      });\n\n// Create a Entity, which gets all the default components\nvar entity = new Entity();\n\n// Fly to the Entity's World-space AABB\ncameraFlight.flyTo(entity);\n````\n## Flying to a position\n\nFlying the CameraFlightAnimation from the previous example to specified eye, look and up positions:\n\n````Javascript\ncameraFlight.flyTo({\n   eye: [-5,-5,-5],\n   look: [0,0,0]\n   up: [0,1,0],\n   duration: 1 // Default, seconds\n}, function() {\n         // Arrived\n     });\n````\n\n## Flying to an AABB\n\nFlying the CameraFlightAnimation from the previous two examples explicitly to the {{#crossLink \"Boundary3D\"}}Boundary3D's{{/crossLink}}\naxis-aligned bounding box:\n\n````Javascript\ncameraFlight.flyTo(entity.aabb);\n````",
            "submodule": "animation",
            "is_constructor": 1,
            "params": [
                {
                    "name": "scene",
                    "description": "Parent {{#crossLink \"Scene\"}}Scene{{/crossLink}}.",
                    "type": "Scene",
                    "optional": true
                },
                {
                    "name": "cfg.id",
                    "description": "Optional ID, unique among all components in the parent {{#crossLink \"Scene\"}}Scene{{/crossLink}}, generated automatically when omitted.",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "cfg.meta",
                    "description": "Optional map of user-defined metadata to attach to this CameraFlightAnimation.",
                    "type": "String:Object",
                    "optional": true
                },
                {
                    "name": "cfg.fit",
                    "description": "When true, will ensure that when this CameraFlightAnimation has flown or jumped to a boundary\nit will adjust the distance between the {{#crossLink \"Camera\"}}{{/crossLink}}'s {{#crossLink \"Lookat/eye:property\"}}eye{{/crossLink}}\nand {{#crossLink \"Lookat/look:property\"}}{{/crossLink}} position so as to ensure that the target boundary is filling the view volume.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "true"
                },
                {
                    "name": "cfg.fitFOV",
                    "description": "How much field-of-view, in degrees, that a target boundary should\nfill the canvas when fitting the {{#crossLink \"Camera\"}}Camera{{/crossLink}} to the target boundary. Only applies when the {{#crossLink \"Camera\"}}Camera{{/crossLink}}'s active projection is a{{#crossLink \"Perspective\"}}{{/crossLink}}.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "45"
                },
                {
                    "name": "cfg.trail",
                    "description": "When true, will cause this CameraFlightAnimation to point the {{#crossLink \"Camera\"}}{{/crossLink}} in the direction that it is travelling.",
                    "type": "Boolean",
                    "optional": true
                },
                {
                    "name": "cfg.duration",
                    "description": "Flight duration, in seconds, when calling {{#crossLink \"CameraFlightAnimation/flyTo:method\"}}{{/crossLink}}.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "1"
                }
            ],
            "extends": "Component"
        },
        "Camera": {
            "name": "Camera",
            "shortname": "Camera",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "xeogl",
            "namespace": "",
            "file": "src/camera/camera.new.js",
            "line": 4,
            "description": "A **Camera** defines viewing and projection transforms for its {{#crossLink \"Scene\"}}{{/crossLink}}.\n\n## Overview\n\n* One Camera per Scene\n* Controls viewing and projection transforms\n* Has methods to pan, zoom and orbit (or first-person rotation)\n* Dynamically configurable World-space \"up\" direction\n* Switchable between perspective, frustum and orthographic projections\n* Switchable gimbal lock\n* Can be \"flown\" to look at targets using a {{#crossLink \"CameraFlightAnimation\"}}{{/crossLink}}\n* Can be animated along a path using a {{#crossLink \"CameraPathAnimation\"}}{{/crossLink}}\n* Can follow a target using a {{#crossLink \"CameraFollowAnimation\"}}{{/crossLink}}\n\n## Examples\n\n* [Perspective projection](../../examples/#camera_perspective)\n* [Orthographic projection](../../examples/#camera_orthographic)\n* [Frustum projection](../../examples/#camera_frustum)\n* [Camera with world Z-axis as \"up\"](../../examples/#camera_zAxisUp)\n* [Camera with world Y-axis as \"up\"](../../examples/#camera_yAxisUp)\n* [Automatically following an Entity with a Camera](../../examples/#camera_follow)\n* [Animating a Camera along a path](../../examples/#camera_path_interpolation)\n* [Architectural fly-through](../../examples/#importing_gltf_ModernOffice)\n\n## Usage\n\n* [Getting the Camera](#getting)\n* [Moving around](#moving-around)\n* [Projection](#projection)\n* [Configuring World up direction](#configuring-world-up-direction)\n* [Gimbal locking](#gimbal-locking)\n\n### Getting the Camera\n\nThere is exactly one Camera per Scene:\n\n````javascript\nvar camera = myScene.camera;\n````\n\n### Moving around\n\nGet and set the Camera's absolute position at any time via its {{#crossLink \"Camera/eye:property\"}}{{/crossLink}},\n{{#crossLink \"Camera/look:property\"}}{{/crossLink}} and {{#crossLink \"Camera/up:property\"}}{{/crossLink}} properties:\n\n````javascript\ncamera.eye = [-10,0,0];\ncamera.look = [-10,0,0];\ncamera.up = [0,1,0];\n````\n\nGet the view matrix:\n\n````javascript\nvar viewMatrix = camera.viewMatrix;\nvar viewNormalMatrix = camera.normalMatrix;\n````\n\nListen for view matrix updates:\n\n````javascript\ncamera.on(\"matrix\", function(matrix) { ... });\n````\n\nOrbiting the {{#crossLink \"Camera/look:property\"}}{{/crossLink}} position:\n\n````javascript\ncamera.orbitYaw(20.0);\ncamera.orbitPitch(10.0);\n````\n\nFirst-person rotation, rotates {{#crossLink \"Camera/look:property\"}}{{/crossLink}}\nand {{#crossLink \"Camera/up:property\"}}{{/crossLink}} about {{#crossLink \"Camera/eye:property\"}}{{/crossLink}}:\n\n````javascript\ncamera.yaw(5.0);\ncamera.pitch(-10.0);\n````\n\nPanning along the Camera's local axis (ie. left/right, up/down, forward/backward):\n\n````javascript\ncamera.pan([-20, 0, 10]);\n````\n\nZoom to vary distance between {{#crossLink \"Camera/eye:property\"}}{{/crossLink}} and {{#crossLink \"Camera/look:property\"}}{{/crossLink}}:\n\n````javascript\ncamera.zoom(-5); // Move five units closer\n````\n\nGet the current distance between {{#crossLink \"Camera/eye:property\"}}{{/crossLink}} and {{#crossLink \"Camera/look:property\"}}{{/crossLink}}:\n\n````javascript\nvar distance = camera.eyeLookDist;\n````\n\n### Projection\n\nFor each projection type, the Camera has a Component to manage that projection's configuration. You can hot-switch the Camera\nbetween those projection types, while updating the properties of each projection component at any time.\n\n````javascript\ncamera.perspective.near = 0.4;\ncamera.perspective.fov = 45;\n//...\n\ncamera.ortho.near = 0.8;\ncamera.ortho.far = 1000;\n//...\n\ncamera.frustum.left = -1.0;\ncamera.frustum.right = 1.0;\ncamera.frustum.far = 1000.0;\n//...\n\ncamera.projection = \"perspective\"; // Switch to perspective\ncamera.projection = \"frustum\"; // Switch to frustum\ncamera.projection = \"ortho\"; // Switch to ortho\n````\n\nGet the projection matrix:\n\n````javascript\nvar projMatrix = camera.projMatrix;\n````\n\nListen for projection matrix updates:\n\n````javascript\ncamera.on(\"projMatrix\", function(matrix) { ... });\n````\n\n### Configuring World up direction\n\nWe can dynamically configure the direction that we consider to be \"up\" in the World-space coordinate system.\n\nSet the +Y axis as World \"up\" (convention in some modeling software):\n\n````javascript\ncamera.worldAxis = [\n1, 0, 0,    // Right\n0, 1, 0,    // Up\n0, 0,-1     // Forward\n];\n````\n\nSet the +Z axis as World \"up\" (convention in most CAD and BIM viewers):\n\n````javascript\ncamera.worldAxis = [\n1, 0, 0, // Right\n0, 0, 1, // Up\n0,-1, 0  // Forward\n];\n````\n\nThe Camera has read-only convenience properties that provide each axis individually:\n\n````javascript\nvar worldRight = camera.worldRight;\nvar worldForward = camera.worldForward;\nvar worldUp = camera.worldUp;\n````\n\n### Gimbal locking\n\nBy default, the Camera locks yaw rotation to pivot about the World-space \"up\" axis. We can dynamically lock and unlock that\nat any time:\n\n````javascript\ncamera.gimbalLock = false; // Yaw rotation now happens about Camera's local Y-axis\ncamera.gimbalLock = true; // Yaw rotation now happens about World's \"up\" axis\n````\n\nSee: <a href=\"https://en.wikipedia.org/wiki/Gimbal_lock\">https://en.wikipedia.org/wiki/Gimbal_lock</a>",
            "submodule": "camera",
            "is_constructor": 1,
            "params": [
                {
                    "name": "scene",
                    "description": "Parent {{#crossLink \"Scene\"}}Scene{{/crossLink}}, creates this Camera within the\ndefault {{#crossLink \"Scene\"}}Scene{{/crossLink}} when omitted.",
                    "type": "Scene",
                    "optional": true
                },
                {
                    "name": "cfg",
                    "description": "Configs",
                    "type": "*",
                    "optional": true,
                    "props": [
                        {
                            "name": "id",
                            "description": "Optional ID, unique among all components in the parent {{#crossLink \"Scene\"}}Scene{{/crossLink}}, generated automatically when omitted.\nYou only need to supply an ID if you need to be able to find the Camera by ID within its parent {{#crossLink \"Scene\"}}Scene{{/crossLink}} later.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "meta",
                            "description": "Optional map of user-defined metadata to attach to this Camera.",
                            "type": "String:Object",
                            "optional": true
                        }
                    ]
                }
            ],
            "extends": "Component"
        },
        "Frustum": {
            "name": "Frustum",
            "shortname": "Frustum",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "xeogl",
            "namespace": "",
            "file": "src/camera/frustum.js",
            "line": 1,
            "description": "A **Frustum** defines a perspective projection as a frustum-shaped view volume for a {{#crossLink \"Camera\"}}Camera{{/crossLink}}.\n\n## Overview\n\n* A {{#crossLink \"Camera\"}}Camera{{/crossLink}} has a Frustum to configure its frustum-based perspective projection mode.\n* A Frustum lets us explicitly set the positions of the left, right, top, bottom, near and far planes, which is useful\nfor asymmetrical view volumes, such as those used for stereo viewing.\n* A Frustum's {{#crossLink \"Frustum/near:property\"}}{{/crossLink}} and {{#crossLink \"Frustum/far:property\"}}{{/crossLink}} properties\nspecify the distances to the WebGL clipping planes.\n\n## Examples\n\n* [Camera with frustum projection](../../examples/#camera_frustum)\n* [Stereo viewing with frustum projection](../../examples/#effects_stereo)\n\n## Usage\n\n* See {{#crossLink \"Camera\"}}{{/crossLink}}",
            "submodule": "camera",
            "is_constructor": 1,
            "params": [
                {
                    "name": "scene",
                    "description": "Parent {{#crossLink \"Scene\"}}Scene{{/crossLink}}, creates this Frustum within the\ndefault {{#crossLink \"Scene\"}}Scene{{/crossLink}} when omitted.",
                    "type": "Scene",
                    "optional": true
                },
                {
                    "name": "cfg",
                    "description": "Configs",
                    "type": "*",
                    "optional": true,
                    "props": [
                        {
                            "name": "id",
                            "description": "Optional ID, unique among all components in the parent scene, generated automatically when omitted.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "meta",
                            "description": "Optional map of user-defined metadata to attach to this Frustum.",
                            "type": "String:Object",
                            "optional": true
                        },
                        {
                            "name": "left",
                            "description": "Position of the Frustum's left plane on the View-space X-axis.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "-1"
                        },
                        {
                            "name": "right",
                            "description": "Position of the Frustum's right plane on the View-space X-axis.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "1"
                        },
                        {
                            "name": "bottom",
                            "description": "Position of the Frustum's bottom plane on the View-space Y-axis.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "-1"
                        },
                        {
                            "name": "top",
                            "description": "Position of the Frustum's top plane on the View-space Y-axis.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "1"
                        },
                        {
                            "name": "near",
                            "description": "Position of the Frustum's near plane on the View-space Z-axis.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "0.1"
                        },
                        {
                            "name": "far",
                            "description": "Position of the Frustum's far plane on the positive View-space Z-axis.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "1000"
                        }
                    ]
                }
            ],
            "extends": "Component"
        },
        "Ortho": {
            "name": "Ortho",
            "shortname": "Ortho",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "xeogl",
            "namespace": "",
            "file": "src/camera/ortho.js",
            "line": 1,
            "description": "An **Ortho** defines an orthographic projection transform for a {{#crossLink \"Camera\"}}Camera{{/crossLink}}.\n\n## Overview\n\n* A {{#crossLink \"Camera\"}}Camera{{/crossLink}} has an Ortho to configure its orthographic projection mode.\n* An Ortho works like Blender's orthographic projection, where the positions of the left, right, top and bottom planes are\nimplicitly specified with a single {{#crossLink \"Ortho/scale:property\"}}{{/crossLink}} property, which causes the frustum to be symmetrical on X and Y axis, large enough to\ncontain the number of units given by {{#crossLink \"Ortho/scale:property\"}}{{/crossLink}}.\n* An Ortho's {{#crossLink \"Ortho/near:property\"}}{{/crossLink}} and {{#crossLink \"Ortho/far:property\"}}{{/crossLink}} properties\nspecify the distances to the WebGL clipping planes.\n\n\n## Examples\n\n* [Camera with orthographic projection](../../examples/#camera_orthographic)\n\n## Usage\n\n* See {{#crossLink \"Camera\"}}{{/crossLink}}",
            "submodule": "camera",
            "is_constructor": 1,
            "params": [
                {
                    "name": "scene",
                    "description": "Parent {{#crossLink \"Scene\"}}Scene{{/crossLink}}, creates this Ortho within the\ndefault {{#crossLink \"Scene\"}}Scene{{/crossLink}} when omitted.",
                    "type": "Scene",
                    "optional": true
                },
                {
                    "name": "cfg",
                    "description": "Configs",
                    "type": "*",
                    "optional": true,
                    "props": [
                        {
                            "name": "id",
                            "description": "Optional ID, unique among all components in the parent scene, generated automatically when omitted.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "meta",
                            "description": "Optional map of user-defined metadata to attach to this Ortho.",
                            "type": "String:Object",
                            "optional": true
                        },
                        {
                            "name": "parent",
                            "description": "ID or instance of a parent {{#crossLink \"Transform\"}}{{/crossLink}} within the same {{#crossLink \"Scene\"}}Scene{{/crossLink}}.",
                            "type": "String|Transform",
                            "optional": true
                        },
                        {
                            "name": "scale",
                            "description": "Scale factor for this Ortho's extents on X and Y axis.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "1.0"
                        },
                        {
                            "name": "near",
                            "description": "Position of the near plane on the View-space Z-axis.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "0.1"
                        },
                        {
                            "name": "far",
                            "description": "Position of the far plane on the positive View-space Z-axis.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "10000"
                        }
                    ]
                }
            ],
            "extends": "Component"
        },
        "Perspective": {
            "name": "Perspective",
            "shortname": "Perspective",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "xeogl",
            "namespace": "",
            "file": "src/camera/perspective.js",
            "line": 1,
            "description": "A **Perspective** defines a perspective projection transform for a {{#crossLink \"Camera\"}}Camera{{/crossLink}}.\n\n## Overview\n\n* A {{#crossLink \"Camera\"}}Camera{{/crossLink}} has a Perspective to configure its perspective projection mode.\n\n## Examples\n\n* [Camera with perspective projection](../../examples/#camera_perspective)\n\n## Usage\n\n* See {{#crossLink \"Camera\"}}{{/crossLink}}",
            "submodule": "camera",
            "is_constructor": 1,
            "params": [
                {
                    "name": "scene",
                    "description": "Parent {{#crossLink \"Scene\"}}Scene{{/crossLink}}, creates this Perspective within the\ndefault {{#crossLink \"Scene\"}}Scene{{/crossLink}} when omitted.",
                    "type": "Scene",
                    "optional": true
                },
                {
                    "name": "cfg",
                    "description": "Configs",
                    "type": "*",
                    "optional": true,
                    "props": [
                        {
                            "name": "id",
                            "description": "Optional ID, unique among all components in the parent scene, generated automatically when omitted.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "meta",
                            "description": "Optional map of user-defined metadata to attach to this Perspective.",
                            "type": "String:Object",
                            "optional": true
                        },
                        {
                            "name": "parent",
                            "description": "ID or instance of a parent {{#crossLink \"Transform\"}}{{/crossLink}} within the same {{#crossLink \"Scene\"}}Scene{{/crossLink}}.",
                            "type": "String|Transform",
                            "optional": true
                        },
                        {
                            "name": "fov",
                            "description": "Field-of-view angle, in degrees.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "60.0"
                        },
                        {
                            "name": "fovAxis",
                            "description": "The field-of-view axis: \"x\", \"y\", or \"min\" to use whichever is currently the minimum.",
                            "type": "String",
                            "optional": true,
                            "optdefault": "\"min\""
                        },
                        {
                            "name": "near",
                            "description": "Position of the near plane on the View-space Z-axis.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "0.1"
                        },
                        {
                            "name": "far",
                            "description": "Position of the far plane on the View-space Z-axis.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "10000"
                        }
                    ]
                }
            ],
            "extends": "Component"
        },
        "Canvas": {
            "name": "Canvas",
            "shortname": "Canvas",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "xeogl",
            "namespace": "",
            "file": "src/canvas/canvas.js",
            "line": 1,
            "description": "A **Canvas** manages a {{#crossLink \"Scene\"}}Scene{{/crossLink}}'s HTML canvas and its WebGL context.\n\n## Overview\n\n* Each {{#crossLink \"Scene\"}}Scene{{/crossLink}} provides a Canvas as a read-only property on itself.\n* When a {{#crossLink \"Scene\"}}Scene{{/crossLink}} is configured with the ID of\nan existing <a href=\"http://www.w3.org/TR/html5/scripting-1.html#the-canvas-element\">HTMLCanvasElement</a>, then\nthe Canvas will bind to that, otherwise the Canvas will automatically create its own.\n* A Canvas will fire a {{#crossLink \"Canvas/boundary:event\"}}{{/crossLink}} event whenever\nthe <a href=\"http://www.w3.org/TR/html5/scripting-1.html#the-canvas-element\">HTMLCanvasElement</a> resizes.\n* A Canvas is responsible for obtaining a WebGL context from\nthe <a href=\"http://www.w3.org/TR/html5/scripting-1.html#the-canvas-element\">HTMLCanvasElement</a>.\n* A Canvas also fires a {{#crossLink \"Canvas/webglContextLost:event\"}}{{/crossLink}} event when the WebGL context is\nlost, and a {{#crossLink \"Canvas/webglContextRestored:event\"}}{{/crossLink}} when it is restored again.\n* The various components within the parent {{#crossLink \"Scene\"}}Scene{{/crossLink}} will transparently recover on\nthe {{#crossLink \"Canvas/webglContextRestored:event\"}}{{/crossLink}} event.\n\n<img src=\"../../../assets/images/Canvas.png\"></img>\n\nA Canvas also has\n\n* a {{#crossLink \"Progress\"}}{{/crossLink}}, which shows a busy progress when a {{#crossLink \"Model\"}}{{/crossLink}}\nis loading, or when directed by application logic, and\n\n## Examples\n\n* [Multiple canvases/scenes in a page](../../examples/#scenes_multipleScenes)\n* [Taking canvas snapshots](../../examples/#canvas_snapshot)\n* [Transparent canvas with background image](../../examples/#canvas_transparent)\n* [Canvas with multiple viewports](../../examples/#canvas_multipleViewports)\n\n## Usage\n\nIn the example below, we're creating a {{#crossLink \"Scene\"}}Scene{{/crossLink}} without specifying an HTML canvas element\nfor it. This causes the {{#crossLink \"Scene\"}}Scene{{/crossLink}}'s Canvas component to create its own default element\nwithin the page. Then we subscribe to various events fired by that Canvas component.\n\n```` javascript\nvar scene = new xeogl.Scene();\n\n// Get the Canvas off the Scene\n// Since we did not configure the Scene with the ID of a DOM canvas element,\n// the Canvas will create its own canvas element in the DOM\nvar canvas = scene.canvas;\n\n// Get the WebGL context off the Canvas\nvar gl = canvas.gl;\n\n// Subscribe to Canvas size updates\ncanvas.on(\"boundary\", function(boundary) {\n   //...\n});\n\n// Subscribe to WebGL context loss events on the Canvas\ncanvas.on(\"webglContextLost\", function() {\n       //...\n    });\n\n// Subscribe to WebGL context restored events on the Canvas\ncanvas.on(\"webglContextRestored\", function(gl) {\n       var newContext = gl;\n       //...\n    });\n````\n\nWhen we want to bind the Canvas to an existing HTML canvas element, configure the\n{{#crossLink \"Scene\"}}{{/crossLink}} with the ID of the element, like this:\n\n```` javascript\n// Create a Scene, this time configuring it with the\n// ID of an existing DOM canvas element\nvar scene = new xeogl.Scene({\n         canvasId: \"myCanvas\"\n    });\n\n// ..and the rest of this example can be the same as the previous example.\n\n````\n\nThe {{#crossLink \"Scene\"}}{{/crossLink}} will attempt to get use WebGL 2, or fall back on WebGL 1\nif that's absent. If you just want WebGL 1, disable WebGL 2 like so:\n\n```` javascript\nvar scene = new xeogl.Scene({\n         canvasId: \"myCanvas\",\n         webgl2 : true\n    });\n\n// ..and the rest of this example can be the same as the previous examples.\n\n````",
            "submodule": "canvas",
            "static": 1,
            "params": [
                {
                    "name": "scene",
                    "description": "Parent scene",
                    "type": "Scene"
                }
            ],
            "extends": "Component"
        },
        "Spinner": {
            "name": "Spinner",
            "shortname": "Spinner",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "xeogl",
            "namespace": "",
            "file": "src/canvas/spinner.js",
            "line": 1,
            "description": "A Progress displays a progress animation at the center of its {{#crossLink \"Canvas\"}}{{/crossLink}} while things are loading or otherwise busy.\n\n## Overview\n\n* Spinners are normally shown by {{#crossLink \"Model\"}}Models{{/crossLink}} while they are loading, however they may also\nbe shown by any application code that wants to indicate busyness.\n* By default, they are also shown by components that load assets, such as {{#crossLink \"Texture\"}}{{/crossLink}}. You\ncan disable that by flipping the Spinner's {{#crossLink \"Spinner/textures:property\"}}{{/crossLink}} property.\n* A Spinner component has a {{#crossLink \"Spinner/processes:property\"}}{{/crossLink}} count that indicates how many\nactive processes it currently represents. As a process starts, a process would increment {{#crossLink \"Spinner/processes:property\"}}{{/crossLink}}, then as it\ncompletes (or fails), would decrement it again.\n* A Spinner is only visible while {{#crossLink \"Spinner/processes:property\"}}{{/crossLink}} is greater than zero.\n\n## Examples\n\n* [Loading glTF model with spinner](../../examples/#importing_gltf_GearboxAssy)\n\n## Usage\n\n````javascript\nvar spinner = myScene.canvas.spinner;\n\n// Increment count of busy processes represented by the spinner;\n// assuming the count was zero, this now shows the spinner\nspinner.processes++;\n\n// Increment the count again, by some other process;\n// spinner already visible, now requires two decrements\n// before it becomes invisible again\nspinner.processes++;\n\n// Decrement the count; count still greater\n// than zero, so spinner remains visible\nspinner.process--;\n\n// Decrement the count; count now zero,\n// so spinner becomes invisible\nspinner.process--;\n````\n\nBy default, a Spinner shows while resources are loading for components like\n{{#crossLink \"Texture\"}}{{/crossLink}}. We can disable that like this:\n\n````javascript\n// Don't show while resources are loading for Textures etc.\nspinner.textures = false;\n````",
            "submodule": "canvas",
            "extends": "Component"
        },
        "Clip": {
            "name": "Clip",
            "shortname": "Clip",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "xeogl",
            "namespace": "",
            "file": "src/clipping/clip.js",
            "line": 1,
            "description": "A **Clip** is an arbitrarily-aligned World-space clipping plane.\n\n<a href=\"../../examples/#effects_clipping\"><img src=\"../../../assets/images/screenshots/Clips.png\"></img></a>\n\n## Overview\n\n* Used to slice portions off objects, to create cross-section views or reveal interiors.\n* Is contained within a {{#crossLink \"Clips\"}}{{/crossLink}} belonging to its {{#crossLink \"Scene\"}}{{/crossLink}}.\n* Has a World-space position in {{#crossLink \"Clip/pos:property\"}}{{/crossLink}} and orientation in {{#crossLink \"Clip/dir:property\"}}{{/crossLink}}.\n* Discards elements from the half-space in the direction of {{#crossLink \"Clip/dir:property\"}}{{/crossLink}}.\n* Can be be enabled or disabled via its {{#crossLink \"Clip/active:property\"}}{{/crossLink}} property.\n\n## Usage\n\nIn the example below, we have an {{#crossLink \"Entity\"}}{{/crossLink}} that's attached by a {{#crossLink \"Clips\"}}{{/crossLink}}\nthat contains two {{#crossLink \"Clip\"}}{{/crossLink}} components.  The first {{#crossLink \"Clip\"}}{{/crossLink}} is on the\npositive diagonal, while the second is on the negative diagonal. The {{#crossLink \"Entity\"}}Entity's{{/crossLink}} {{#crossLink \"Geometry\"}}{{/crossLink}}\nis a box, which will get two of its corners clipped off.\n\n````javascript\n// Create a set of Clip planes in the default Scene\nscene.clips.clips = [\n\n    // Clip plane on negative diagonal\n    new xeogl.Clip({\n        pos: [1.0, 1.0, 1.0],\n        dir: [-1.0, -1.0, -1.0],\n        active: true\n    }),\n\n    // Clip plane on positive diagonal\n    new xeogl.Clip({\n        pos: [-1.0, -1.0, -1.0],\n        dir: [1.0, 1.0, 1.0],\n        active: true\n    })\n];\n\n// Create an Entity in the default Scene, that will be clipped by our Clip planes\nvar entity = new xeogl.Entity({\n    geometry: new xeogl.SphereGeometry(),\n    clippable: true // Enable clipping (default)\n});\n````\n\n### Switching clipping on and off for an Entity\n\nAn {{#crossLink \"Entity\"}}{{/crossLink}}'s {{#crossLink \"Entity/clippable:property\"}}{{/crossLink}} property indicates\nwhether or not it is affected by Clip components.\n\nYou can switch it at any time, like this:\n\n```` javascript\n// Disable clipping for the Entity\nentity.clippable = false;\n\n// Enable clipping for the Entity\nentity.clippable = true;\n````",
            "submodule": "clipping",
            "is_constructor": 1,
            "params": [
                {
                    "name": "scene",
                    "description": "Parent {{#crossLink \"Scene\"}}Scene{{/crossLink}} - creates this Clip in the\ndefault {{#crossLink \"Scene\"}}Scene{{/crossLink}} when omitted.",
                    "type": "Scene",
                    "optional": true
                },
                {
                    "name": "cfg",
                    "description": "Clip configuration",
                    "type": "*",
                    "optional": true,
                    "props": [
                        {
                            "name": "id",
                            "description": "Optional ID, unique among all components in the parent {{#crossLink \"Scene\"}}Scene{{/crossLink}}, generated automatically when omitted.\nYou only need to supply an ID if you need to be able to find the Clip by ID within the {{#crossLink \"Scene\"}}Scene{{/crossLink}}.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "meta",
                            "description": "Optional map of user-defined metadata to attach to this Clip.",
                            "type": "String:Object",
                            "optional": true
                        },
                        {
                            "name": "active",
                            "description": "Indicates whether or not this Clip is active.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        },
                        {
                            "name": "pos",
                            "description": "World-space position of the clipping plane.",
                            "type": "Array of Number",
                            "optional": true,
                            "optdefault": "[0,0,0]"
                        },
                        {
                            "name": "dir",
                            "description": "Vector perpendicular to the plane surface, indicating its orientation.",
                            "type": "Array of Number",
                            "optional": true,
                            "optdefault": "[0,0 -1]"
                        }
                    ]
                }
            ],
            "extends": "Component"
        },
        "Clips": {
            "name": "Clips",
            "shortname": "Clips",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "xeogl",
            "namespace": "",
            "file": "src/clipping/clips.js",
            "line": 1,
            "description": "A **Clips** applies a set of {{#crossLink \"Clip\"}}{{/crossLink}} planes to the\nclippable {{#crossLink \"Entity\"}}Entities{{/crossLink}} within its {{#crossLink \"Scene\"}}{{/crossLink}}.\n\nSee {{#crossLink \"Clip\"}}{{/crossLink}} for more info.",
            "submodule": "clipping",
            "is_constructor": 1,
            "params": [
                {
                    "name": "scene",
                    "description": "Parent {{#crossLink \"Scene\"}}Scene{{/crossLink}} - creates this Clips in the default\n{{#crossLink \"Scene\"}}Scene{{/crossLink}} when omitted.",
                    "type": "Scene",
                    "optional": true
                },
                {
                    "name": "cfg",
                    "description": "Configs",
                    "type": "*",
                    "optional": true,
                    "props": [
                        {
                            "name": "id",
                            "description": "Optional ID, unique among all components in the parent {{#crossLink \"Scene\"}}Scene{{/crossLink}},\ngenerated automatically when omitted.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "meta",
                            "description": "Optional map of user-defined metadata to attach to this Clips.",
                            "type": "String:Object",
                            "optional": true
                        },
                        {
                            "name": "clips",
                            "description": "Array containing either IDs or instances of\n{{#crossLink \"Clip\"}}Clip{{/crossLink}} components within the parent {{#crossLink \"Scene\"}}Scene{{/crossLink}}.",
                            "type": "Array(String)|Array(xeogl.Clip)",
                            "optional": true
                        }
                    ]
                }
            ],
            "extends": "Component"
        },
        "CameraControl": {
            "name": "CameraControl",
            "shortname": "CameraControl",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "xeogl",
            "namespace": "",
            "file": "src/controls/cameraControl.newest.js",
            "line": 1,
            "description": "Rotates, pans and zooms the {{#crossLink \"Scene\"}}{{/crossLink}}'s {{#crossLink \"Camera\"}}{{/crossLink}} with keyboard, mouse and touch input.\n\nCameraControl fires these events:\n\n\"hover\" - Hover enters a new object\n\"hoverSurface\" - Hover continues over an object surface - fired continuously as mouse moves over an object\n\"hoverLeave\"  - Hover has left the last object we were hovering over\n\"hoverOff\" - Hover continues over empty space - fired continuously as mouse moves over nothing\n\"picked\" - Clicked or tapped object\n\"pickedSurface\" -  Clicked or tapped object, with event containing surface intersection details\n\"doublePicked\" - Double-clicked or double-tapped object\n\"doublePickedSurface\" - Double-clicked or double-tapped object, with event containing surface intersection details\n\"pickedNothing\" - Clicked or tapped, but not on any objects\n\"doublePickedNothing\" - Double-clicked or double-tapped, but not on any objects\n\nCameraControl only fires \"hover\" events when the mouse is up.\n\nFor efficiency, CameraControl only does surface intersection picking when you subscribe to \"doublePicked\" and\n\"doublePickedSurface\" events. Therefore, only subscribe to those when you're OK with the overhead incurred by the\nsurface intersection tests.\n\n## Panning\n\n## Rotating\n\n## Zooming\n\n## Events\n\n## Activating and deactivating\n\n## Inertia\n\n## First person\n\n## Keyboard layout\n\n# Fly-to",
            "submodule": "controls",
            "is_constructor": 1,
            "params": [
                {
                    "name": "scene",
                    "description": "Parent {{#crossLink \"Scene\"}}{{/crossLink}}.",
                    "type": "Scene",
                    "optional": true
                },
                {
                    "name": "cfg",
                    "description": "Configs",
                    "type": "*",
                    "optional": true,
                    "props": [
                        {
                            "name": "id",
                            "description": "Optional ID, unique among all components in the parent scene, generated automatically when omitted.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "meta",
                            "description": "Optional map of user-defined metadata to attach to this CameraControl.",
                            "type": "String:Object",
                            "optional": true
                        },
                        {
                            "name": "firstPerson",
                            "description": "Whether or not this CameraControl is in \"first person\" mode.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "walking",
                            "description": "Whether or not this CameraControl is in \"walking\" mode.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "keyboardLayout",
                            "description": "Keyboard layout.",
                            "type": "String",
                            "optional": true,
                            "optdefault": "\"qwerty\""
                        },
                        {
                            "name": "doublePickFlyTo",
                            "description": "Whether to fly the camera to each {{#crossLink \"Entity\"}}{{/crossLink}} that's double-clicked.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        },
                        {
                            "name": "active",
                            "description": "Indicates whether or not this CameraControl is active.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        },
                        {
                            "name": "inertia",
                            "description": "indicating how much the camera keeps moving after you finish panning or rotating it.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "0.5]  A factor in range [0..1"
                        }
                    ]
                }
            ],
            "extends": "Component"
        },
        "Entity": {
            "name": "Entity",
            "shortname": "Entity",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "xeogl",
            "namespace": "",
            "file": "src/entities/entity.js",
            "line": 1,
            "description": "An **Entity** is a 3D object within a {{#crossLink \"Scene\"}}Scene{{/crossLink}}.\n\n## Overview\n\n* An Entity represents a WebGL draw call.\n* Each Entity has six components: {{#crossLink \"Geometry\"}}{{/crossLink}}, {{#crossLink \"Material\"}}{{/crossLink}},\n{{#crossLink \"Transform\"}}{{/crossLink}}, an {{#crossLink \"EmphasisMaterial\"}}{{/crossLink}} for ghosting, an {{#crossLink \"EmphasisMaterial\"}}{{/crossLink}} for highlighting,\nand an {{#crossLink \"OutlineMaterial\"}}{{/crossLink}} for outlining.\n* By default, Entities in the same Scene share the same \"global\" flyweight instances of those components amongst themselves. The default\ncomponent instances are provided by the {{#crossLink \"Scene\"}}{{/crossLink}}'s {{#crossLink \"Scene/geometry:property\"}}{{/crossLink}},\n{{#crossLink \"Scene/material:property\"}}{{/crossLink}}, {{#crossLink \"Scene/transform:property\"}}{{/crossLink}},\n{{#crossLink \"Scene/ghostMaterial:property\"}}{{/crossLink}}, {{#crossLink \"Scene/outlineMaterial:property\"}}{{/crossLink}},\n{{#crossLink \"Scene/highlightMaterial:property\"}}{{/crossLink}} properties, respectively.\n* An Entity with all defaults is a white unit-sized box centered at the World-space origin.\n* Customize your Entities by attaching your own instances of those component types, to override the defaults as needed.\n* For best performance, reuse as many of the same component instances among your Entities as possible.\n\n## Usage\n\n* [Creating an Entity](#creating-an-entity)\n* [Controlling visibility](#controlling-visibility)\n* [Controlling clipping](#controlling-clipping)\n* [Controlling rendering order](#controlling-rendering-order)\n* [Geometry](#geometry)\n* [Material](#material)\n* [Transforming](#transforming)\n* [Ghosting](#ghosting)\n* [Highlighting](#highlighting)\n* [Outlining](#outlining)\n* [Local-space boundary](#local-space-boundary)\n* [World-space boundary](#world-space-boundary)\n* [Skyboxing](#skyboxing)\n* [Billboarding](#billboarding)\n* [Shadows](#shadows) TODO\n\n### Creating an Entity\n\nCreating a minimal Entity that has all the default components:\n\n<img src=\"../../assets/images/screenshots/Scene/defaultEntity.png\"></img>\n\n````javascript\nvar entity = new xeogl.Entity(); // A white unit-sized box centered at the World-space origin\n````\n\nSince our Entity has all the default components, we can get those off either the Entity or its Scene:\n\n````javascript\nentity.material.diffuse = [1.0, 0.0, 0.0];  // This is the same Material component...\n\nvar scene = entity.scene;\nscene.material.diffuse  = [1.0, 0.0, 0.0];  // ...as this one.\n````\n\nIn practice, we would provide (at least) our own Geometry and Material for the Entity:\n\n<a href=\"../../examples/#geometry_primitives_teapot\"><img src=\"../../assets/images/screenshots/Scene/teapot.png\"></img></a>\n\n````javascript\nvar entity = new xeogl.Entity({\n    geometry: new xeogl.TeapotGeometry(),\n    material: new xeogl.MetallicMaterial({\n        baseColor: [1.0, 1.0, 1.0]\n    })\n});\n````\n\n### Controlling visibility\n\nShow or hide an Entity by setting its {{#crossLink \"Entity/visible:property\"}}{{/crossLink}} property:\n\n````javascript\nentity.visible = false; // Hide\nentity.visible = true; // Show (default)\n````\n\n### Controlling clipping\n\nBy default, an Entity will be clipped by the\nScene's {{#crossLink \"Scene/clips:property\"}}clipping planes{{/crossLink}} (if you've created some).\n\nMake an Entity unclippable by setting its {{#crossLink \"Entity/clippable:property\"}}{{/crossLink}} property false:\n\n````javascript\nentity.clippable = false; // Default is true\n````\n\n### Controlling rendering order\n\nControl the order in which an Entity is rendered relative to others by setting its {{#crossLink \"Entity/layer:property\"}}{{/crossLink}}\nproperty. You would normally do this when you need to ensure that transparent Entities are rendered in back-to-front order for correct alpha blending.\n\nAssign entity to layer 0 (all Entities are in layer 0 by default):\n\n````javascript\nentity.layer = 0;\n````\n\nCreate another Entity in a higher layer, that will get rendered after layer 0:\n\n````javascript\nvar entity2 = new xeogl.Entity({\n    geometry: new xeogl.Sphere(),\n    layer: 1\n});\n````\n\n### Geometry\n\nAn Entity has a {{#crossLink \"Geometry\"}}{{/crossLink}} which describes its shape. When we don't provide it with a\nGeometry, it will have the Scene's {{#crossLink \"Scene/geometry:property\"}}{{/crossLink}} by default.\n\nCreating an Entity with its own Geometry:\n\n````javascript\nvar entity = new xeogl.Entity({\n    geometry: new xeogl.TeapotGeometry()\n});\n````\n\nDynamically replacing the Geometry:\n\n````javascript\nentity.geometry = new xeogl.CylinderGeometry();\n````\n\nGetting geometry arrays:\n\n````javascript\nver geometry = entity.geometry;\n\nvar primitive = geometry,primitive;        // Default is \"triangles\"\nvar positions = geometry.positions;        // Local-space vertex positions\nvar normals = geometry.normals;            // Local-space vertex Normals\nvar uv = geometry.uv;                      // UV coordinates\nvar indices = entity.geometry.indices;     // Vertex indices for pimitives\n````\n\nThe Entity also has a convenience property which provides the vertex positions in World-space, ie. after they have been\ntransformed by the Entity's Transform:\n\n````javascript\n// These are internally generated on-demand and cached. To free the cached\n// vertex World positions when you're done with them, set this property to null or undefined\nvar worldPositions = entity.worldPositions;\n````\n\n### Material\n\nAn Entity has a {{#crossLink \"Material\"}}{{/crossLink}}, which describes its appearance. When we don't provide it with\na Material, it will have the Scene's {{#crossLink \"Scene/material:property\"}}{{/crossLink}} by default.\n\nCreating an Entity with its own custom Geometry and Material:\n\n````javascript\nvar entity = new xeogl.Entity({\n    geometry: new xeogl.TeapotGeometry(),\n    material: new xeogl.MetallicMaterial({\n        baseColor: [0.0, 0.0, 1.0],\n        metallic: 1.0,\n        roughness: 1.0,\n        emissive: [0.0, 0.0, 0.0],\n        alpha: 1.0\n    })\n});\n````\n\nDynamically replacing the Material:\n\n````javascript\nentity.material = new xeogl.SpecularMaterial({\n    diffuse: [1.0, 1.0, 1.0],\n    specular: [1.0, 1.0, 1.0],\n    glossiness: 1.0,\n    emissive: [0.0, 0.0, 0.0]\n    alpha: 1.0\n})\n````\n\nAnimating the Material's diffuse color - making the Entity rapidly pulse red:\n\n````javascript\nentity.scene.on(\"tick\", function(e) {\n   var t = e.time - e.startTime; // Millisecs\n   entity.material.diffuse = [0.5 + Math.sin(t * 0.01), 0.0, 0.0]; // RGB\n});\n````\n\n### Transforming\n\nAn Entity has a {{#crossLink \"Transform\"}}{{/crossLink}}, which positions, sizes and orients it within the World-space\ncoordinate system. When we don't provide it with a Transform, it will have the Scene's {{#crossLink \"Scene/transform:property\"}}{{/crossLink}}\nby default (which is the identity transform unless modified).\n\nTransforms can also be connected into hierarchies.\n\nCreating an Entity with its own Geometry and Transform hierarchy:\n\n````javascript\nvar entity = new xeogl.Entity({\n\n    geometry: new xeogl.TeapotGeometry(),\n\n    transform: new xeogl.Translate({eapot\n       xyz: [-5, 0, 0],\n       parent: new xeogl.Rotate({\n           xyz: [0,1,0],\n           angle: 45\n       })\n    })\n});\n````\n\nDynamically replacing the Entity's Transform hierarchy:\n\n````javascript\nentity.transform = new xeogl.Rotate({\n    xyz: [0,1,0],\n    angle: 45\n    parent: new xeogl.Rotate({\n        xyz: [1,0,0],\n        angle: 180\n    })\n});\n````\n\nAnimating the Transform hierarchy:\n\n````javascript\nentity.scene.on(\"tick\", function() {\n   entity.transform.angle += 0.5;\n   entity.transform.parent.angle += 0.5;\n});\n````\n\n### Ghosting\n\nGhost an Entity by setting its {{#crossLink \"Entity/ghosted:property\"}}{{/crossLink}} property true. The Entity's\n{{#crossLink \"EmphasisMaterial\"}}{{/crossLink}} then controls its appearance while ghosted.\n\nWhen we don't provide it with a EmphasisMaterial, it will have the Scene's {{#crossLink \"Scene/ghostMaterial:property\"}}{{/crossLink}}\nby default.\n\nIn the example below, we'll create a ghosted Entity with its own EmphasisMaterial.\n\n<a href=\"../../examples/#effects_ghost\"><img src=\"../../assets/images/screenshots/EmphasisMaterial/teapot.png\"></img></a>\n\n````javascript\nvar entity = new xeogl.Entity({\n   geometry: new xeogl.TeapotGeometry(),\n   material: new xeogl.PhongMaterial({\n       diffuse: [0.2, 0.2, 1.0]\n   }),\n   ghostMaterial: new xeogl.EmphasisMaterial({\n       edges: true,\n       edgeColor: [0.2, 1.0, 0.2],\n       edgeAlpha: 1.0,\n       edgeWidth: 2,\n       vertices: true,\n       vertexColor: [0.6, 1.0, 0.6],\n       vertexAlpha: 1.0,\n       vertexSize: 8,\n       fill: true,\n       fillColor: [0, 0, 0],\n       fillAlpha: 0.7\n   }),\n   ghosted: true\n});\n````\n\n#### Examples\n\n* [Ghosted teapot](../../examples/#effects_ghost)\n\n### Highlighting\n\nHighlight an Entity by setting its {{#crossLink \"Entity/highlighted:property\"}}{{/crossLink}} property true. The Entity's\nhighlighting {{#crossLink \"EmphasisMaterial\"}}{{/crossLink}} then controls its appearance while highlighted.\n\nWhen we don't provide it with a EmphasisMaterial for highlighting, it will have the Scene's {{#crossLink \"Scene/highlightMaterial:property\"}}{{/crossLink}}\nby default.\n\nIn the example below, we'll create a highlighted Entity with its own EmphasisMaterial.\n\n<a href=\"../../examples/#effects_highlight\"><img src=\"../../assets/images/screenshots/EmphasisMaterial/teapotHighlighted.png\"></img></a>\n\n````javascript\nvar entity = new xeogl.Entity({\n   geometry: new xeogl.TeapotGeometry(),\n   material: new xeogl.PhongMaterial({\n       diffuse: [0.2, 0.2, 1.0]\n   }),\n   highlightMaterial: new xeogl.EmphasisMaterial({\n       color: [1.0, 1.0, 0.0],\n       alpha: 0.6\n   }),\n   highlighted: true\n});\n````\n\n#### Examples\n\n* [Ghost and highlight effects](../../examples/#effects_demo_gearbox)\n\n### Outlining\n\nOutline an Entity by setting its {{#crossLink \"Entity/outlined:property\"}}{{/crossLink}} property true. The Entity's\n{{#crossLink \"OutlineMaterial\"}}{{/crossLink}} then controls its appearance while outlined.\n\nWhen we don't provide it with an OutlineMaterial, it will have the Scene's {{#crossLink \"Scene/outlineMaterial:property\"}}{{/crossLink}}\nby default.\n\nIn the example below, we'll create a outlined Entity with its own OutlineMaterial.\n\n<a href=\"../../examples/#effects_outline\"><img src=\"../../assets/images/screenshots/OutlineMaterial/teapot.png\"></img></a>\n\n````javascript\nvar entity = new xeogl.Entity({\n   geometry: new xeogl.TeapotGeometry(),\n   material: new xeogl.PhongMaterial({\n       diffuse: [0.2, 0.2, 1.0]\n   }),\n   outlineMaterial: new xeogl.OutlineMaterial({\n       color: [1.0, 1.0, 0.0],\n       alpha: 0.6,\n       width: 5\n   }),\n   outlined: true\n});\n````\n\n### Local-space boundary\n\nWe can get an Entity's Local-space boundary at any time, as both an axis-aligned bounding box (AABB) and\nan object-aligned bounding box (OBB).\n\nThe Local-space boundary is the boundary of the Entity's Geometry, without any transforms applied.\n\nGetting the Local-space boundary as an AABB:\n\n````\nvar aabb = entity.geometry.aabb; // [xmin, ymin, zmin, xmax, ymax, zmax]\n````\n\nGetting the Local-space boundary as an OBB:\n\n```` javascript\nvar obb = entity.geometry.obb; // Flat array containing eight 3D corner vertices of a box\n````\n\n#### Examples\n\n* [Local-space Geometry AABB](../../examples/#boundaries_geometry_aabb)\n* [Local-space Geometry OBB](../../examples/#boundaries_geometry_obb)\n\n### World-space boundary\n\nWe can get an Entity's World-space boundary at any time, as both an axis-aligned bounding box (AABB) and\nan object-aligned bounding box (OBB).\n\nThe World-space boundary is the boundary of the Entity's Geometry after the Entity's Transform has been applied to it.\n\nGetting the World-space boundary as an AABB:\n\n````javascript\nvar aabb = entity.aabb; // [xmin, ymin, zmin, xmax, ymax, zmax]\n````\n\nGetting the World-space boundary as an OBB:\n\n```` javascript\nvar obb = entity.obb; // Flat array containing eight 3D corner vertices of a box\n````\n\nSubscribing to updates of the World-space boundary, which occur whenever the Entity's Transform or Geometry have been updated.\n\n````javascript\nentity.on(\"boundary\", function() {\n    var aabb = entity.aabb;\n    var obb = entity.obb;\n});\n````\n\nAn Entity's {{#crossLink \"Scene\"}}{{/crossLink}} also has an {{#crossLink \"Scene/getAABB:method\"}}{{/crossLink}}, which returns\nthe collective World-space axis-aligned boundary of the {{#crossLink \"Entity\"}}Entities{{/crossLink}}\nand/or {{#crossLink \"Model\"}}Models{{/crossLink}} with the given IDs:\n\n````JavaScript\nvar scene = entity.scene;\n\nscene.getAABB(); // Gets collective boundary of all entities in the viewer\nscene.getAABB(\"saw\"); // Gets collective boundary of all entities in a model\nscene.getAABB([\"saw\", \"gearbox\"]); // Gets collective boundary of all entities in two models\nscene.getAABB(\"saw#0.1\"); // Get boundary of an entity\nscene.getAABB([\"saw#0.1\", \"saw#0.2\"]); // Get collective boundary of two entities\n````\n\n#### Excluding from boundary calculations\n\nThe {{#crossLink \"Scene/aabb:property\"}}Scene aabb{{/crossLink}}\nand {{#crossLink \"Model/aabb:property\"}}Model aabb{{/crossLink}} properties provide AABBs that include the boundaries of all\ncontained Entities, except those Entities that have their {{#crossLink \"Entity/collidable:property\"}}collidable{{/crossLink}} properties set ````false````.\n\nToggle that inclusion like so:\n\n````javascript\nentity.collidable = false; // Exclude entity from calculation of its Scene/Model boundary\nentity.collidable = true; // Include entity in calculation of its Scene/Model boundary\n````\nSetting this false is useful when an Entity represents some object, such as a control gizmo, that you don't want to consider as\nbeing a contributor to a Scene or Model boundary. It also helps performance, since boundaries will not need dynamically re-calculated\nwhenever the Entity's boundary changes after a Transform or Geometry update.\n\n#### Examples\n\n* [World-space Entity AABB](../../examples/#boundaries_entity_aabb)\n* [World-space Entity OBB](../../examples/#boundaries_entity_obb)\n\n### Skyboxing\n\nAn Entity has a {{#crossLink \"Entity/stationary:property\"}}{{/crossLink}} property\nthat will cause it to never translate with respect to the viewpoint, while still rotationg, as if always far away.\n\nThis is useful for using Entities as skyboxes, like this:\n\n````javascript\nnew xeogl.Entity({\n\n    geometry: new xeogl.BoxGeometry({\n        xSize: 1000,\n        ySize: 1000,\n        zSize: 1000\n    }),\n\n    material: new xeogl.PhongMaterial({\n        diffuseMap: new xeogl.Texture({\n           src: \"textures/diffuse/uvGrid2.jpg\"\n        })\n    }),\n\n    stationary: true // Locks position with respect to viewpoint\n});\n````\n\n#### Examples\n\n* [Skybox component](../../examples/#skyboxes_skybox)\n* [Custom skybox](../../examples/#skyboxes_skybox_custom)\n\n### Billboarding\n\nAn Entity has a {{#crossLink \"Entity/billboard:property\"}}{{/crossLink}} property\nthat can make it behave as a billboard.\n\nTwo billboard types are supported:\n\n* **Spherical** billboards are free to rotate their Entities in any direction and always face the {{#crossLink \"Camera\"}}{{/crossLink}} perfectly.\n* **Cylindrical** billboards rotate their Entities towards the {{#crossLink \"Camera\"}}{{/crossLink}}, but only about the Y-axis.\n\nNote that {{#crossLink \"Scale\"}}{{/crossLink}} transformations to have no effect on billboarded Entities.\n\nThe example below shows a box that remains rotated directly towards the viewpoint, using spherical billboarding:\n\n````javascript\nnew xeogl.Entity({\n\n    geometry: new xeogl.BoxGeometry(),\n\n    material: new xeogl.PhongMaterial({\n        diffuseMap: new xeogl.Texture({\n           src: \"textures/diffuse/uvGrid2.jpg\"\n        })\n    }),\n\n    billboard: \"spherical\" // Or \"cylindrical\"\n});\n````\n\n#### Examples\n\n* [Spherical billboards](../../examples/#billboards_spherical)\n* [Cylindrical billboards](../../examples/#billboards_cylindrical)\n* [Clouds using billboards](../../examples/#billboards_spherical_clouds)\n\n\n### Shadows\n\n[Work-in-progress]",
            "submodule": "entities",
            "is_constructor": 1,
            "params": [
                {
                    "name": "scene",
                    "description": "Parent {{#crossLink \"Scene\"}}Scene{{/crossLink}} - creates this Entity within xeogl's default {{#crossLink \"xeogl/scene:property\"}}scene{{/crossLink}} by default.",
                    "type": "Scene",
                    "optional": true
                },
                {
                    "name": "cfg",
                    "description": "Configs",
                    "type": "*",
                    "optional": true,
                    "props": [
                        {
                            "name": "id",
                            "description": "Optional ID, unique among all components in the parent {{#crossLink \"Scene\"}}Scene{{/crossLink}}, generated automatically when omitted.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "meta",
                            "description": "Optional map of user-defined metadata to attach to this Entity.",
                            "type": "String:Object",
                            "optional": true
                        },
                        {
                            "name": "geometry",
                            "description": "ID or instance of a {{#crossLink \"Geometry\"}}Geometry{{/crossLink}} to attach to this Entity. Must be within the same {{#crossLink \"Scene\"}}Scene{{/crossLink}} as this Entity. Defaults to the\nparent {{#crossLink \"Scene\"}}Scene{{/crossLink}}'s default instance, {{#crossLink \"Scene/geometry:property\"}}geometry{{/crossLink}}, which is a 2x2x2 box.",
                            "type": "String|Geometry",
                            "optional": true
                        },
                        {
                            "name": "material",
                            "description": "ID or instance of a {{#crossLink \"Material\"}}Material{{/crossLink}} to attach to this Entity. Must be within the same {{#crossLink \"Scene\"}}Scene{{/crossLink}} as this Entity. Defaults to the\nparent {{#crossLink \"Scene\"}}Scene{{/crossLink}}'s default instance, {{#crossLink \"Scene/material:property\"}}material{{/crossLink}}.",
                            "type": "String|Material",
                            "optional": true
                        },
                        {
                            "name": "transform",
                            "description": "ID or instance of a modelling transform to attach to this Entity. Must be within the same {{#crossLink \"Scene\"}}Scene{{/crossLink}} as this Entity. Defaults to the parent {{#crossLink \"Scene\"}}Scene{{/crossLink}}'s default instance,\n{{#crossLink \"Scene/transform:property\"}}transform{{/crossLink}} (which is an identity matrix which performs no transformation).",
                            "type": "String|Transform",
                            "optional": true
                        },
                        {
                            "name": "visible",
                            "description": "Indicates if this Entity is visible.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        },
                        {
                            "name": "culled",
                            "description": "Indicates if this Entity is culled from view.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        },
                        {
                            "name": "pickable",
                            "description": "Indicates if this Entity is pickable.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        },
                        {
                            "name": "clippable",
                            "description": "Indicates if this Entity is clippable by {{#crossLink \"Clips\"}}{{/crossLink}}.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        },
                        {
                            "name": "collidable",
                            "description": "Whether this Entity is included in boundary calculations.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        },
                        {
                            "name": "castShadow",
                            "description": "Whether this Entity casts shadows.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        },
                        {
                            "name": "receiveShadow",
                            "description": "Whether this Entity receives shadows.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        },
                        {
                            "name": "outlined",
                            "description": "Whether an outline is rendered around this entity, as configured by the Entity's {{#crossLink \"OutlineMaterial\"}}{{/crossLink}} component.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "outlineMaterial",
                            "description": "ID or instance of an {{#crossLink \"OutlineMaterial\"}}{{/crossLink}} to attach to this Entity. Must be within the same {{#crossLink \"Scene\"}}Scene{{/crossLink}} as this Entity. Defaults to the\nparent {{#crossLink \"Scene\"}}Scene{{/crossLink}}'s default instance, {{#crossLink \"Scene/outlineMaterial:property\"}}outlineMaterial{{/crossLink}}.",
                            "type": "String|OutlineMaterial",
                            "optional": true
                        },
                        {
                            "name": "ghosted",
                            "description": "Whether this entity is rendered ghosted, as configured by {{#crossLink \"Entity/ghostMaterial:property\"}}ghostMaterial{{/crossLink}}.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "ghostMaterial",
                            "description": "ID or instance of an {{#crossLink \"EmphasisMaterial\"}}{{/crossLink}} to attach to this Entity. Must be within the same {{#crossLink \"Scene\"}}Scene{{/crossLink}} as this Entity. Defaults to the\nparent {{#crossLink \"Scene\"}}Scene{{/crossLink}}'s default instance, {{#crossLink \"Scene/ghostMaterial:property\"}}ghostMaterial{{/crossLink}}.",
                            "type": "String|EmphasisMaterial",
                            "optional": true
                        },
                        {
                            "name": "highlight",
                            "description": "Whether this entity is rendered highlighted, as configured by {{#crossLink \"Entity/highlightMaterial:property\"}}highlightMaterial{{/crossLink}}.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "highlightMaterial",
                            "description": "ID or instance of an {{#crossLink \"EmphasisMaterial\"}}{{/crossLink}} to attach to this Entity to define highlighted appearance. Must be within the same {{#crossLink \"Scene\"}}Scene{{/crossLink}} as this Entity. Defaults to the\nparent {{#crossLink \"Scene\"}}Scene{{/crossLink}}'s default instance, {{#crossLink \"Scene/highlightMaterial:property\"}}highlightMaterial{{/crossLink}}.",
                            "type": "String|EmphasisMaterial",
                            "optional": true
                        },
                        {
                            "name": "selected",
                            "description": "Whether this entity is rendered selected, as configured by {{#crossLink \"Entity/selectedMaterial:property\"}}selectedMaterial{{/crossLink}}.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "selectedMaterial",
                            "description": "ID or instance of an {{#crossLink \"EmphasisMaterial\"}}{{/crossLink}} to attach to this Entity to define selected appearance. Must be within the same {{#crossLink \"Scene\"}}Scene{{/crossLink}} as this Entity. Defaults to the\nparent {{#crossLink \"Scene\"}}Scene{{/crossLink}}'s default instance, {{#crossLink \"Scene/selectedMaterial:property\"}}selectedMaterial{{/crossLink}}.",
                            "type": "String|EmphasisMaterial",
                            "optional": true
                        },
                        {
                            "name": "layer",
                            "description": "Indicates this Entity's rendering priority, typically used for transparency sorting,",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "0"
                        },
                        {
                            "name": "stationary",
                            "description": "Disables the effect of {{#crossLink \"Lookat\"}}view transform{{/crossLink}} translations for this Entity. This is useful for skybox Entities.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "billboard",
                            "description": "Specifies the billboarding behaviour for this Entity. Options are \"none\", \"spherical\" and \"cylindrical\".",
                            "type": "String",
                            "optional": true,
                            "optdefault": "\"none\""
                        },
                        {
                            "name": "loading",
                            "description": "Flag which indicates that this Entity is freshly loaded.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        }
                    ]
                }
            ],
            "extends": "Component"
        },
        "AABBGeometry": {
            "name": "AABBGeometry",
            "shortname": "AABBGeometry",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "xeogl",
            "namespace": "",
            "file": "src/geometry/aabbGeometry.js",
            "line": 1,
            "description": "An **AABBGeometry** is a {{#crossLink \"Geometry\"}}{{/crossLink}} that shows the extents of a World-space axis-aligned bounding box (AABB).\n\n<a href=\"../../examples/#geometry_primitives_AABBGeometry\"><img src=\"http://i.giphy.com/3o6ZsSVy0NKXZ1vDSo.gif\"></img></a>\n\n## Overview\n\n* A World-space AABB is an axis-aligned box given as a six-element array containing the min/max extents of an axis-aligned volume, ie. ````[xmin,ymin,zmin,xmax,ymax,zmax]````.\n* Set a AABBGeometry's {{#crossLink \"AABBGeometry/targetAABB:property\"}}{{/crossLink}} property to an AABB to fix the AABBGeometry to those extents, or\n* set a AABBGeometry's {{#crossLink \"AABBGeometry/target:property\"}}{{/crossLink}} property to any target {{#crossLink \"Component\"}}{{/crossLink}}\nsubtype that has an AABB, to make it dynamically fit itself to changes in the target AABB.\n\n## Examples\n\n* [Rendering an AABBGeometry](../../examples/#geometry_primitives_AABBGeometry)\n\n## Usage\n\n````javascript\n// First Entity with a TorusGeometry\nvar entity = new xeogl.Entity({\n    geometry: new xeogl.TorusGeometry()\n});\n\n// Second Entity with an AABBGeometry that shows a wireframe box\n// for the World-space axis-aligned boundary of the first Entity\nvar boundaryHelper = new xeogl.Entity({\n\n    geometry: new xeogl.AABBGeometry({\n        targetAABB: entity.aabb\n    }),\n\n    material: new xeogl.PhongMaterial({\n        diffuse: [0.5, 1.0, 0.5],\n        emissive: [0.5, 1.0, 0.5],\n        lineWidth:2\n    })\n});\n````\n\nNow whenever our entity {{#crossLink \"Entity\"}}{{/crossLink}} changes shape or position, our AABBGeometry will automatically\nupdate to stay fitted to it.\n\nWe could also directly configure the AABBGeometry with the {{#crossLink \"Entity\"}}{{/crossLink}}'s {{#crossLink \"Entity/aabb:property\"}}AABB{{/crossLink}}:\n\n````javascript\nvar boundaryHelper2 = new xeogl.Entity({\n\n    geometry: new xeogl.AABBGeometry({\n        targetAABB: entity.aabb\n    }),\n\n    material: new xeogl.PhongMaterial({\n        diffuse: [0.5, 1.0, 0.5],\n        emissive: [0.5, 1.0, 0.5],\n        lineWidth:2\n    })\n});\n````",
            "submodule": "geometry",
            "is_constructor": 1,
            "params": [
                {
                    "name": "scene",
                    "description": "Parent {{#crossLink \"Scene\"}}Scene{{/crossLink}} - creates this AABBGeometry in the default\n{{#crossLink \"Scene\"}}Scene{{/crossLink}} when omitted.",
                    "type": "Scene",
                    "optional": true
                },
                {
                    "name": "cfg",
                    "description": "Configs",
                    "type": "*",
                    "optional": true,
                    "props": [
                        {
                            "name": "id",
                            "description": "Optional ID, unique among all components in the parent {{#crossLink \"Scene\"}}Scene{{/crossLink}},\ngenerated automatically when omitted.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "meta",
                            "description": "Optional map of user-defined metadata to attach to this AABBGeometry.",
                            "type": "String:Object",
                            "optional": true
                        },
                        {
                            "name": "target",
                            "description": "ID or instance of a {{#crossLink \"Component\"}}{{/crossLink}} subtype whose AABB we'll show.",
                            "type": "Component",
                            "optional": true
                        },
                        {
                            "name": "targetAABB",
                            "description": "An axis-aligned box (AABB) in a six-element Float32Array\ncontaining the min/max extents of the axis-aligned volume, ie. ````(xmin,ymin,zmin,xmax,ymax,zmax)````.",
                            "type": "Float32Array",
                            "optional": true
                        }
                    ]
                }
            ],
            "extends": "Component"
        },
        "BoxGeometry": {
            "name": "BoxGeometry",
            "shortname": "BoxGeometry",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "xeogl",
            "namespace": "",
            "file": "src/geometry/boxGeometry.js",
            "line": 1,
            "description": "A **BoxGeometry** is a parameterized {{#crossLink \"Geometry\"}}{{/crossLink}} that defines a box-shaped mesh for attached {{#crossLink \"Entity\"}}Entities{{/crossLink}}.\n\n<a href=\"../../examples/#geometry_primitives_box\"><img src=\"../../assets/images/screenshots/BoxGeometry.png\"></img></a>\n\n## Overview\n\n* Dynamically modify a BoxGeometry's dimensions at any time by updating its {{#crossLink \"BoxGeometry/center:property\"}}{{/crossLink}}, {{#crossLink \"BoxGeometry/xSize:property\"}}{{/crossLink}}, {{#crossLink \"BoxGeometry/ySize:property\"}}{{/crossLink}} and {{#crossLink \"BoxGeometry/zSize:property\"}}{{/crossLink}} properties.\n* Dynamically switch its primitive type between ````\"points\"````, ````\"lines\"```` and ````\"triangles\"```` at any time by\nupdating its {{#crossLink \"Geometry/primitive:property\"}}{{/crossLink}} property.\n\n## Examples\n\n* [Textured BoxGeometry](../../examples/#geometry_primitives_box)\n\n## Usage\n\nAn {{#crossLink \"Entity\"}}{{/crossLink}} with a BoxGeometry and a {{#crossLink \"PhongMaterial\"}}{{/crossLink}} with\ndiffuse {{#crossLink \"Texture\"}}{{/crossLink}}:\n\n````javascript\nnew xeogl.Entity({\n\n    geometry: new xeogl.BoxGeometry({\n       center: [0,0,0],\n       xSize: 1,  // Half-size on each axis; BoxGeometry is actually two units big on each side.\n       ySize: 1,\n       zSize: 1\n    }),\n\n    material: new xeogl.PhongMaterial({\n       diffuseMap: new xeogl.Texture({\n           src: \"textures/diffuse/uvGrid2.jpg\"\n       })\n    })\n});\n````",
            "submodule": "geometry",
            "is_constructor": 1,
            "params": [
                {
                    "name": "scene",
                    "description": "Parent {{#crossLink \"Scene\"}}Scene{{/crossLink}} - creates this BoxGeometry in the default\n{{#crossLink \"Scene\"}}Scene{{/crossLink}} when omitted.",
                    "type": "Scene",
                    "optional": true
                },
                {
                    "name": "cfg",
                    "description": "Configs",
                    "type": "*",
                    "optional": true,
                    "props": [
                        {
                            "name": "id",
                            "description": "Optional ID, unique among all components in the parent {{#crossLink \"Scene\"}}Scene{{/crossLink}},\ngenerated automatically when omitted.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "meta",
                            "description": "Optional map of user-defined metadata to attach to this BoxGeometry.",
                            "type": "String:Object",
                            "optional": true
                        },
                        {
                            "name": "primitive",
                            "description": "The primitive type. Accepted values for a BoxGeometry are 'points', 'lines' and 'triangles'.",
                            "type": "String",
                            "optional": true,
                            "optdefault": "\"triangles\""
                        },
                        {
                            "name": "center",
                            "description": "3D point indicating the center position.",
                            "type": "Float32Array",
                            "optional": true
                        },
                        {
                            "name": "xSize",
                            "description": "Half-size on the X-axis.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "1.0"
                        },
                        {
                            "name": "ySize",
                            "description": "Half-size on the Y-axis.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "1.0"
                        },
                        {
                            "name": "zSize",
                            "description": "Half-size on the Z-axis.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "1.0"
                        }
                    ]
                }
            ],
            "extends": "Geometry"
        },
        "CylinderGeometry": {
            "name": "CylinderGeometry",
            "shortname": "CylinderGeometry",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "xeogl",
            "namespace": "",
            "file": "src/geometry/cylinderGeometry.js",
            "line": 1,
            "description": "A **CylinderGeometry** is a parameterized {{#crossLink \"Geometry\"}}{{/crossLink}} that defines a cylinder-shaped mesh for attached {{#crossLink \"Entity\"}}Entities{{/crossLink}}.\n\n<a href=\"../../examples/#geometry_primitives_cylinder\"><img src=\"../../assets/images/screenshots/CylinderGeometry.png\"></img></a>\n\n## Examples\n\n* [Textured CylinderGeometry](../../examples/#geometry_primitives_cylinder)\n\n## Usage\n\nAn {{#crossLink \"Entity\"}}{{/crossLink}} with a CylinderGeometry and a {{#crossLink \"PhongMaterial\"}}{{/crossLink}} with\ndiffuse {{#crossLink \"Texture\"}}{{/crossLink}}:\n\n````javascript\nnew xeogl.Entity({\n\n    geometry: new xeogl.CylinderGeometry({\n        center: [0,0,0],\n        radiusTop: 2.0,\n        radiusBottom: 2.0,\n        height: 5.0,\n        radialSegments: 20,\n        heightSegments: 1,\n        openEnded: false\n    }),\n\n    material: new xeogl.PhongMaterial({\n       diffuseMap: new xeogl.Texture({\n           src: \"textures/diffuse/uvGrid2.jpg\"\n       })\n    })\n});\n````",
            "submodule": "geometry",
            "is_constructor": 1,
            "params": [
                {
                    "name": "scene",
                    "description": "Parent {{#crossLink \"Scene\"}}Scene{{/crossLink}} - creates this CylinderGeometry in the default\n{{#crossLink \"Scene\"}}Scene{{/crossLink}} when omitted.",
                    "type": "Scene",
                    "optional": true
                },
                {
                    "name": "cfg",
                    "description": "Configs",
                    "type": "*",
                    "optional": true,
                    "props": [
                        {
                            "name": "id",
                            "description": "Optional ID, unique among all components in the parent {{#crossLink \"Scene\"}}Scene{{/crossLink}},\ngenerated automatically when omitted.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "meta",
                            "description": "Optional map of user-defined metadata to attach to this CylinderGeometry.",
                            "type": "String:Object",
                            "optional": true
                        },
                        {
                            "name": "primitive",
                            "description": "The primitive type. Accepted values for a CylinderGeometry are 'points', 'lines' and 'triangles'.",
                            "type": "String",
                            "optional": true,
                            "optdefault": "\"triangles\""
                        },
                        {
                            "name": "center",
                            "description": "3D point indicating the center position of the CylinderGeometry.",
                            "type": "Float32Array",
                            "optional": true
                        },
                        {
                            "name": "radiusTop",
                            "description": "Radius of top.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "1"
                        },
                        {
                            "name": "radiusBottom",
                            "description": "Radius of bottom.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "1"
                        },
                        {
                            "name": "height",
                            "description": "Height.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "1"
                        },
                        {
                            "name": "radialSegments",
                            "description": "Number of segments around the CylinderGeometry.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "60"
                        },
                        {
                            "name": "heightSegments",
                            "description": "Number of vertical segments.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "1"
                        },
                        {
                            "name": "openEnded",
                            "description": "Whether or not the CylinderGeometry has solid caps on the ends.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "lod",
                            "description": ".",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "1]  Level-of-detail, in range [0..1"
                        }
                    ]
                }
            ],
            "extends": "Geometry"
        },
        "Geometry": {
            "name": "Geometry",
            "shortname": "Geometry",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "xeogl",
            "namespace": "",
            "file": "src/geometry/geometry.js",
            "line": 1,
            "description": "A **Geometry** defines a mesh for attached {{#crossLink \"Entity\"}}Entities{{/crossLink}}.\n\n## Usage\n\n* [Geometry compression](#geometry-compression)\n* [Geometry batching](#geometry-batching)\n\n### Geometry compression\n\nGeometries are automatically quantized to reduce memory and GPU bus usage. Usually, geometry attributes such as positions\nand normals are stored as 32-bit floating-point numbers. Quantization compresses those attributes to 16-bit integers\nrepresented on a scale between the minimum and maximum values. Decompression is then done on the GPU, via a simple\nmatrix multiplication in the vertex shader.\n\n#### Disabling\n\nSince each normal vector is oct-encoded into two 8-bit unsigned integers, this can cause them to lose precision, which\nmay affect the accuracy of any operations that rely on them being perfectly perpendicular to their surfaces. In such\ncases, you may need to disable compression for your geometries and models:\n\n````javascript\n// Disable geometry compression when loading a Model\nvar model = new xeogl.GLTFModel({\n   src: \"models/gltf/modern_office/scene.gltf\",\n   quantizeGeometry: false // Default is true\n});\n\n// Disable compression when creating a Geometry\nvar entity = new xeogl.Entity({\n   geometry: new xeogl.TeapotGeometry({\n       quantized: false // Default is true\n   }),\n   material: new xeogl.PhongMaterial({\n       diffuse: [0.2, 0.2, 1.0]\n   })\n});\n````\n\n### Geometry batching\n\nGeometries are automatically combined into the same vertex buffer objects (VBOs) so that we reduce the number of VBO\nbinds done by WebGL on each frame. VBO binds are expensive, so this really makes a difference when we have large numbers\nof Entities that share similar Materials (as is often the case in CAD rendering).\n\n#### Disabling\n\nSince combined VBOs need to be rebuilt whenever we destroy a Geometry, we can disable this optimization for individual\nModels and Geometries when we know that we'll be continually creating and destroying them.\n\n````javascript\n// Disable VBO combination for a GLTFModel\nvar model = new xeogl.GLTFModel({\n   src: \"models/gltf/modern_office/scene.gltf\",\n   combinedGeometry: false // Default is true\n});\n\n// Disable VBO combination for an individual Geometry\nvar entity = new xeogl.Entity({\n   geometry: new xeogl.TeapotGeometry({\n       combined: false // Default is true\n   }),\n   material: new xeogl.PhongMaterial({\n       diffuse: [0.2, 0.2, 1.0]\n   })\n});\n````",
            "submodule": "geometry",
            "is_constructor": 1,
            "params": [
                {
                    "name": "scene",
                    "description": "Parent {{#crossLink \"Scene\"}}Scene{{/crossLink}} - creates this Geometry in the default\n{{#crossLink \"Scene\"}}Scene{{/crossLink}} when omitted.",
                    "type": "Scene",
                    "optional": true
                },
                {
                    "name": "cfg",
                    "description": "Configs",
                    "type": "*",
                    "optional": true,
                    "props": [
                        {
                            "name": "id",
                            "description": "Optional ID, unique among all components in the parent {{#crossLink \"Scene\"}}Scene{{/crossLink}},\ngenerated automatically when omitted.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "meta",
                            "description": "Optional map of user-defined metadata to attach to this Geometry.",
                            "type": "String:Object",
                            "optional": true
                        },
                        {
                            "name": "primitive",
                            "description": "The primitive type. Accepted values are 'points', 'lines', 'line-loop', 'line-strip', 'triangles', 'triangle-strip' and 'triangle-fan'.",
                            "type": "String",
                            "optional": true,
                            "optdefault": "\"triangles\""
                        },
                        {
                            "name": "positions",
                            "description": "Positions array.",
                            "type": "Array of Number",
                            "optional": true
                        },
                        {
                            "name": "normals",
                            "description": "Vertex normal vectors array.",
                            "type": "Array of Number",
                            "optional": true
                        },
                        {
                            "name": "uv",
                            "description": "UVs array.",
                            "type": "Array of Number",
                            "optional": true
                        },
                        {
                            "name": "colors",
                            "description": "Vertex colors.",
                            "type": "Array of Number",
                            "optional": true
                        },
                        {
                            "name": "indices",
                            "description": "Indices array.",
                            "type": "Array of Number",
                            "optional": true
                        },
                        {
                            "name": "autoVertexNormals",
                            "description": "Set true to automatically generate normal vectors from the positions and\nindices, if those are supplied.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "quantized",
                            "description": "Stores positions, colors, normals and UVs in quantized and oct-encoded formats\nfor reduced memory footprint and GPU bus usage.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        },
                        {
                            "name": "combined",
                            "description": "Combines positions, colors, normals and UVs into the same WebGL vertex buffers\nwith other Geometries, in order to reduce the number of buffer binds performed per frame.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "ghostEdgeThreshold",
                            "description": "When a {{#crossLink \"Entity\"}}{{/crossLink}} renders this Geometry as wireframe,\nthis indicates the threshold angle (in degrees) between the face normals of adjacent triangles below which the edge is discarded.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "2"
                        }
                    ]
                }
            ],
            "extends": "Component"
        },
        "OBBGeometry": {
            "name": "OBBGeometry",
            "shortname": "OBBGeometry",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "xeogl",
            "namespace": "",
            "file": "src/geometry/obbGeometry.js",
            "line": 1,
            "description": "An **OBBGeometry** is a {{#crossLink \"Geometry\"}}{{/crossLink}} that shows the extents of an oriented bounding box (OBB).\n\n<a href=\"../../examples/#geometry_primitives_OBBGeometry\"><img src=\"http://i.giphy.com/3o6ZsSVy0NKXZ1vDSo.gif\"></img></a>\n\n## Overview\n\n* A World-space OBB a bounding box that's oriented to its contents, given as a 32-element array containing the homogeneous coordinates for the eight corner vertices, ie. each having elements [x,y,z,w].\n* Set an OBBGeometry's {{#crossLink \"OBBGeometry/targetOBB:property\"}}{{/crossLink}} property to an OBB to fix it to those extents, or\n* Set an OBBGeometry's {{#crossLink \"OBBGeometry/target:property\"}}{{/crossLink}} property to any {{#crossLink \"Component\"}}{{/crossLink}} subtype that has an OBB.\n\n## Examples\n\n* [Rendering an OBBGeometry](../../examples/#geometry_primitives_OBBGeometry)\n\n## Usage\n\n````javascript\n// First Entity with a TorusGeometry\nvar entity = new xeogl.Entity({\n    geometry: new xeogl.TorusGeometry()\n});\n\n// Second Entity with an OBBGeometry that shows a wireframe box\n// for the World-space boundary of the first Entity\n\nvar boundaryHelper = new xeogl.Entity({\n\n    geometry: new xeogl.OBBGeometry({\n        target: entity\n    }),\n\n    material: new xeogl.PhongMaterial({\n        diffuse: [0.5, 1.0, 0.5],\n        emissive: [0.5, 1.0, 0.5],\n        lineWidth:2\n    })\n});\n````\n\nNow whenever our entity {{#crossLink \"Entity\"}}{{/crossLink}} changes shape or position, our OBBGeometry will automatically\nupdate to stay fitted to it.\n\nWe could also directly configure the OBBGeometry with the {{#crossLink \"Entity\"}}{{/crossLink}}'s {{#crossLink \"Entity/obb:property\"}}OBB{{/crossLink}}:\n\n````javascript\nvar boundaryHelper2 = new xeogl.Entity({\n\n    geometry: new xeogl.OBBGeometry({\n        targetOBB: entity.obb\n    }),\n\n    material: new xeogl.PhongMaterial({\n        diffuse: [0.5, 1.0, 0.5],\n        emissive: [0.5, 1.0, 0.5],\n        lineWidth:2\n    })\n});\n````",
            "submodule": "geometry",
            "is_constructor": 1,
            "params": [
                {
                    "name": "scene",
                    "description": "Parent {{#crossLink \"Scene\"}}Scene{{/crossLink}} - creates this OBBGeometry in the default\n{{#crossLink \"Scene\"}}Scene{{/crossLink}} when omitted.",
                    "type": "Scene",
                    "optional": true
                },
                {
                    "name": "cfg",
                    "description": "Configs",
                    "type": "*",
                    "optional": true,
                    "props": [
                        {
                            "name": "id",
                            "description": "Optional ID, unique among all components in the parent {{#crossLink \"Scene\"}}Scene{{/crossLink}},\ngenerated automatically when omitted.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "meta",
                            "description": "Optional map of user-defined metadata to attach to this OBBGeometry.",
                            "type": "String:Object",
                            "optional": true
                        },
                        {
                            "name": "target",
                            "description": "ID or instance of a {{#crossLink \"Component\"}}{{/crossLink}} whose OBB we'll show.",
                            "type": "Component",
                            "optional": true
                        },
                        {
                            "name": "targetOBB",
                            "description": "An entity-oriented box (OBB) in a 32-element Float32Array\ncontaining homogeneous coordinates for the eight corner vertices, ie. each having elements (x,y,z,w).",
                            "type": "Float32Array",
                            "optional": true
                        }
                    ]
                }
            ],
            "extends": "Component"
        },
        "PathGeometry": {
            "name": "PathGeometry",
            "shortname": "PathGeometry",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "xeogl",
            "namespace": "",
            "file": "src/geometry/pathGeometry.js",
            "line": 1,
            "description": "A **PathGeometry** is a {{#crossLink \"Geometry\"}}{{/crossLink}} that is defined by a {{#crossLink \"Curve\"}}{{/crossLink}}.\n## Usage\nAn {{#crossLink \"Entity\"}}{{/crossLink}} with a PathGeometry, a {{#crossLink \"Path\"}}{{/crossLink}} and\n a {{#crossLink \"PhongMaterial\"}}{{/crossLink}}:\n````javascript\n new xeogl.Entity({\n    geometry: new xeogl.PathGeometry({\n       divisions: 10,\n       path: new xeogl.Path({\n           // Subpaths\n           curves: [\n                new xeogl.CubicBezierCurve({\n                    v0: [-10, 0, 0],\n                    v1: [-5, 15, 0],\n                    v2: [20, 15, 0],\n                    v3: [10, 0, 0]\n                }),\n                new xeogl.QuadraticBezierCurve({\n                    v0: [10, 0, 0],\n                    v1: [30, 15, 0],\n                    v2: [20, 0, 0]\n                }),\n                new xeogl.SplineCurve({\n                    points: [\n                        [20, 0, 0],\n                        [-5, 15, 0],\n                        [20, 15, 0],\n                        [10, 0, 0]\n                    ]\n                })\n            ]\n        })\n     }),\n    material: new xeogl.PhongMaterial(\n        diffuse: [1,0,0]\n     })\n });\n ````",
            "submodule": "geometry",
            "extends": "Geometry"
        },
        "PlaneGeometry": {
            "name": "PlaneGeometry",
            "shortname": "PlaneGeometry",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "xeogl",
            "namespace": "",
            "file": "src/geometry/planeGeometry.js",
            "line": 1,
            "description": "A **PlaneGeometry** is a parameterized {{#crossLink \"Geometry\"}}{{/crossLink}} that defines a plane-shaped mesh for attached {{#crossLink \"Entity\"}}Entities{{/crossLink}}.\n\n<a href=\"../../examples/#geometry_primitives_plane\"><img src=\"../../assets/images/screenshots/PlaneGeometry.png\"></img></a>\n\n## Overview\n\n* A PlaneGeometry lies in the X-Z plane.\n* Dynamically modify it's shape at any time by updating its {{#crossLink \"PlaneGeometry/center:property\"}}{{/crossLink}}, {{#crossLink \"PlaneGeometry/xSize:property\"}}{{/crossLink}}, {{#crossLink \"PlaneGeometry/zSize:property\"}}{{/crossLink}}, {{#crossLink \"PlaneGeometry/xSegments:property\"}}{{/crossLink}} and\n{{#crossLink \"PlaneGeometry/zSegments:property\"}}{{/crossLink}} properties.\n* Dynamically switch its primitive type between ````\"points\"````, ````\"lines\"```` and ````\"triangles\"```` at any time by\nupdating its {{#crossLink \"Geometry/primitive:property\"}}{{/crossLink}} property.\n\n## Examples\n\n* [Textured PlaneGeometry](../../examples/#geometry_primitives_plane)\n\n## Usage\n\nAn {{#crossLink \"Entity\"}}{{/crossLink}} with a PlaneGeometry and a {{#crossLink \"PhongMaterial\"}}{{/crossLink}} with\ndiffuse {{#crossLink \"Texture\"}}{{/crossLink}}:\n\n````javascript\nnew xeogl.Entity({\n\n    geometry: new xeogl.PlaneGeometry({\n        primitive: \"triangles\",\n        center: [0,0,0],\n        xSize: 2,\n        zSize: 2,\n        xSegments: 10,\n        zSegments: 10\n    }),\n\n    material: new xeogl.PhongMaterial({\n       diffuseMap: new xeogl.Texture({\n           src: \"textures/diffuse/uvGrid2.jpg\"\n       })\n    })\n});\n````",
            "submodule": "geometry",
            "is_constructor": 1,
            "params": [
                {
                    "name": "scene",
                    "description": "Parent {{#crossLink \"Scene\"}}Scene{{/crossLink}} - creates this PlaneGeometry in the default\n{{#crossLink \"Scene\"}}Scene{{/crossLink}} when omitted.",
                    "type": "Scene",
                    "optional": true
                },
                {
                    "name": "cfg",
                    "description": "Configs",
                    "type": "*",
                    "optional": true,
                    "props": [
                        {
                            "name": "id",
                            "description": "Optional ID, unique among all components in the parent {{#crossLink \"Scene\"}}Scene{{/crossLink}},\ngenerated automatically when omitted.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "meta",
                            "description": "Optional map of user-defined metadata to attach to this PlaneGeometry.",
                            "type": "String:Object",
                            "optional": true
                        },
                        {
                            "name": "primitive",
                            "description": "The primitive type. Accepted values for a PlaneGeometry are 'points', 'lines' and 'triangles'.",
                            "type": "String",
                            "optional": true,
                            "optdefault": "\"triangles\""
                        },
                        {
                            "name": "center",
                            "description": "3D point indicating the center position of the PlaneGeometry.",
                            "type": "Float32Array",
                            "optional": true
                        },
                        {
                            "name": "xSize",
                            "description": "Dimension on the X-axis.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "1"
                        },
                        {
                            "name": "zSize",
                            "description": "Dimension on the Z-axis.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "1"
                        },
                        {
                            "name": "xSegments",
                            "description": "Number of segments on the X-axis.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "1"
                        },
                        {
                            "name": "zSegments",
                            "description": "Number of segments on the Z-axis.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "1"
                        }
                    ]
                }
            ],
            "extends": "Geometry"
        },
        "SphereGeometry": {
            "name": "SphereGeometry",
            "shortname": "SphereGeometry",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "xeogl",
            "namespace": "",
            "file": "src/geometry/sphereGeometry.js",
            "line": 1,
            "description": "A **SphereGeometry** is a parameterized {{#crossLink \"Geometry\"}}{{/crossLink}} that defines a sphere-shaped mesh for attached {{#crossLink \"Entity\"}}Entities{{/crossLink}}.\n\n<a href=\"../../examples/#geometry_primitives_sphere\"><img src=\"../../assets/images/screenshots/SphereGeometry.png\"></img></a>\n\n## Examples\n\n* [Textured SphereGeometry](../../examples/#geometry_primitives_sphere)\n\n## Usage\n\nAn {{#crossLink \"Entity\"}}{{/crossLink}} with a SphereGeometry and a {{#crossLink \"PhongMaterial\"}}{{/crossLink}} with\ndiffuse {{#crossLink \"Texture\"}}{{/crossLink}}:\n\n````javascript\nnew xeogl.Entity({\n\n    geometry: new xeogl.SphereGeometry({\n        center: [0,0,0],\n        radius: 1.5,\n        heightSegments: 60,\n        widthSegments: 60\n    }),\n\n    material: new xeogl.PhongMaterial({\n       diffuseMap: new xeogl.Texture({\n           src: \"textures/diffuse/uvGrid2.jpg\"\n       })\n    })\n});\n````",
            "submodule": "geometry",
            "is_constructor": 1,
            "params": [
                {
                    "name": "scene",
                    "description": "Parent {{#crossLink \"Scene\"}}Scene{{/crossLink}} - creates this SphereGeometry in the default\n{{#crossLink \"Scene\"}}Scene{{/crossLink}} when omitted.",
                    "type": "Scene",
                    "optional": true
                },
                {
                    "name": "cfg",
                    "description": "Configs",
                    "type": "*",
                    "optional": true,
                    "props": [
                        {
                            "name": "id",
                            "description": "Optional ID, unique among all components in the parent {{#crossLink \"Scene\"}}Scene{{/crossLink}},\ngenerated automatically when omitted.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "meta",
                            "description": "Optional map of user-defined metadata to attach to this SphereGeometry.",
                            "type": "String:Object",
                            "optional": true
                        },
                        {
                            "name": "primitive",
                            "description": "The primitive type. Accepted values for a SphereGeometry are 'points', 'lines' and 'triangles'.",
                            "type": "String",
                            "optional": true,
                            "optdefault": "\"triangles\""
                        },
                        {
                            "name": "center",
                            "description": "3D point indicating the center position of the SphereGeometry.",
                            "type": "Float32Array",
                            "optional": true
                        },
                        {
                            "name": "radius",
                            "description": "",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "1"
                        },
                        {
                            "name": "heightSegments",
                            "description": "The SphereGeometry's number of latitudinal bands.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "24"
                        },
                        {
                            "name": "widthSegments",
                            "description": "The SphereGeometry's number of longitudinal bands.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "18"
                        },
                        {
                            "name": "lod",
                            "description": ".",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "1]  Level-of-detail, in range [0..1"
                        }
                    ]
                }
            ],
            "extends": "Geometry"
        },
        "TorusGeometry": {
            "name": "TorusGeometry",
            "shortname": "TorusGeometry",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "xeogl",
            "namespace": "",
            "file": "src/geometry/torusGeometry.js",
            "line": 1,
            "description": "A **TorusGeometry** is a parameterized {{#crossLink \"Geometry\"}}{{/crossLink}} that defines a torus-shaped mesh for attached {{#crossLink \"Entity\"}}Entities{{/crossLink}}.\n\n<a href=\"../../examples/#geometry_primitives_torus\"><img src=\"../../assets/images/screenshots/TorusGeometry.png\"></img></a>\n\n## Overview\n\n* Dynamically modify a TorusGeometry's shape at any time by updating its {{#crossLink \"TorusGeometry/center:property\"}}{{/crossLink}}, {{#crossLink \"TorusGeometry/radius:property\"}}{{/crossLink}}, {{#crossLink \"TorusGeometry/tube:property\"}}{{/crossLink}},\n{{#crossLink \"TorusGeometry/radialSegments:property\"}}{{/crossLink}}, {{#crossLink \"TorusGeometry/tubeSegments:property\"}}{{/crossLink}},  and\n{{#crossLink \"TorusGeometry/arc:property\"}}{{/crossLink}} properties.\n* Dynamically switch its primitive type between ````\"points\"````, ````\"lines\"```` and ````\"triangles\"```` at any time by\nupdating its {{#crossLink \"Geometry/primitive:property\"}}{{/crossLink}} property.\n\n## Examples\n\n\n* [Textured TorusGeometry](../../examples/#geometry_primitives_torus)\n\n\n## Usage\n\nAn {{#crossLink \"Entity\"}}{{/crossLink}} with a TorusGeometry and a {{#crossLink \"PhongMaterial\"}}{{/crossLink}} with\ndiffuse {{#crossLink \"Texture\"}}{{/crossLink}}:\n\n````javascript\nnew xeogl.Entity({\n\n    geometry: new xeogl.TorusGeometry({\n        center: [0,0,0],\n        radius: 1.0,\n        tube: 0.5,\n        radialSegments: 32,\n        tubeSegments: 24,\n        arc: Math.PI * 2.0\n    }),\n\n    material: new xeogl.PhongMaterial({\n       diffuseMap: new xeogl.Texture({\n           src: \"textures/diffuse/uvGrid2.jpg\"\n       })\n    })\n});\n````",
            "submodule": "geometry",
            "is_constructor": 1,
            "params": [
                {
                    "name": "scene",
                    "description": "Parent {{#crossLink \"Scene\"}}Scene{{/crossLink}} - creates this TorusGeometry in the default\n{{#crossLink \"Scene\"}}Scene{{/crossLink}} when omitted.",
                    "type": "Scene",
                    "optional": true
                },
                {
                    "name": "cfg",
                    "description": "Configs",
                    "type": "*",
                    "optional": true,
                    "props": [
                        {
                            "name": "id",
                            "description": "Optional ID, unique among all components in the parent {{#crossLink \"Scene\"}}Scene{{/crossLink}},\ngenerated automatically when omitted.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "meta",
                            "description": "Optional map of user-defined metadata to attach to this TorusGeometry.",
                            "type": "String:Object",
                            "optional": true
                        },
                        {
                            "name": "primitive",
                            "description": "The primitive type. Accepted values for a TorusGeometry are 'points', 'lines' and 'triangles'.",
                            "type": "String",
                            "optional": true,
                            "optdefault": "\"triangles\""
                        },
                        {
                            "name": "center",
                            "description": "3D point indicating the center position of the TorusGeometry.",
                            "type": "Float32Array",
                            "optional": true
                        },
                        {
                            "name": "radius",
                            "description": "The overall radius of the TorusGeometry.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "1"
                        },
                        {
                            "name": "tube",
                            "description": "The tube radius of the TorusGeometry.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "0.3"
                        },
                        {
                            "name": "radialSegments",
                            "description": "The number of radial segments that make up the TorusGeometry.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "32"
                        },
                        {
                            "name": "tubeSegments",
                            "description": "The number of tubular segments that make up the TorusGeometry.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "24"
                        },
                        {
                            "name": "arc",
                            "description": "The length of the TorusGeometry's arc in radians, where Math.PI*2 is a closed torus.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "Math.PI / 2.0"
                        }
                    ]
                }
            ],
            "extends": "Geometry"
        },
        "Input": {
            "name": "Input",
            "shortname": "Input",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "xeogl",
            "namespace": "",
            "file": "src/input/input.js",
            "line": 1,
            "description": "Publishes keyboard and mouse events that occur on the parent {{#crossLink \"Scene\"}}{{/crossLink}}'s {{#crossLink \"Canvas\"}}{{/crossLink}}.\n\n* Each {{#crossLink \"Scene\"}}{{/crossLink}} provides an Input on itself as a read-only property.\n\n<img src=\"../../../assets/images/Input.png\"></img>\n\n## Usage\n\nIn this example, we're subscribing to some mouse and key events that will occur on\na {{#crossLink \"Scene\"}}Scene's{{/crossLink}} {{#crossLink \"Canvas\"}}Canvas{{/crossLink}}.\n\n````javascript\nvar myScene = new xeogl.Scene();\n\nvar input = myScene.input;\n\n// We'll save a handle to this subscription\n// to show how to unsubscribe, further down\nvar handle = input.on(\"mousedown\", function(coords) {\n      console.log(\"Mouse down at: x=\" + coords[0] + \", y=\" + coords[1]);\n});\n\ninput.on(\"mouseup\", function(coords) {\n      console.log(\"Mouse up at: x=\" + coords[0] + \", y=\" + coords[1]);\n});\n\ninput.on(\"mouseclicked\", function(coords) {\n     console.log(\"Mouse clicked at: x=\" + coords[0] + \", y=\" + coords[1]);\n});\n\ninput.on(\"dblclick\", function(coords) {\n      console.log(\"Double-click at: x=\" + coords[0] + \", y=\" + coords[1]);\n});\n\ninput.on(\"keydown\", function(keyCode) {\n       switch (keyCode) {\n\n           case this.KEY_A:\n              console.log(\"The 'A' key is down\");\n              break;\n\n           case this.KEY_B:\n              console.log(\"The 'B' key is down\");\n              break;\n\n           case this.KEY_C:\n              console.log(\"The 'C' key is down\");\n              break;\n\n           default:\n              console.log(\"Some other key is down\");\n      }\n    });\n\ninput.on(\"keyup\", function(keyCode) {\n       switch (keyCode) {\n\n           case this.KEY_A:\n              console.log(\"The 'A' key is up\");\n              break;\n\n           case this.KEY_B:\n              console.log(\"The 'B' key is up\");\n              break;\n\n           case this.KEY_C:\n              console.log(\"The 'C' key is up\");\n              break;\n\n           default:\n              console.log(\"Some other key is up\");\n       }\n    });\n\n// TODO: ALT and CTRL keys etc\n````\n\n### Unsubscribing from Events\n\nIn the snippet above, we saved a handle to one of our event subscriptions.\n\nWe can then use that handle to unsubscribe again, like this:\n\n````javascript\ninput.off(handle);\n````",
            "submodule": "input",
            "extends": "Component"
        },
        "AmbientLight": {
            "name": "AmbientLight",
            "shortname": "AmbientLight",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "xeogl",
            "namespace": "",
            "file": "src/lighting/ambientLight.js",
            "line": 1,
            "description": "An **AmbientLight** defines an ambient light source of fixed intensity and color that affects all {{#crossLink \"Entity\"}}Entities{{/crossLink}}\nequally.\n\n<a href=\"../../examples/#lights_ambient\"><img src=\"http://i.giphy.com/l0HlGTxXQWMRVOPwk.gif\"></img></a>\n\n## Overview\n\n* AmbientLights are grouped, along with other light source types, within a {{#crossLink \"Lights\"}}Lights{{/crossLink}} component,\nwhich belongs to a {{#crossLink \"Scene\"}}{{/crossLink}}.\n* When the {{#crossLink \"Entity\"}}Entities{{/crossLink}} have {{#crossLink \"PhongMaterial\"}}PhongMaterials{{/crossLink}},\nAmbientLight {{#crossLink \"AmbientLight/color:property\"}}color{{/crossLink}} is multiplied by\nPhongMaterial {{#crossLink \"PhongMaterial/ambient:property\"}}{{/crossLink}} at each rendered fragment of the {{#crossLink \"Geometry\"}}{{/crossLink}} surface.\n* When the Entities have {{#crossLink \"LambertMaterial\"}}LambertMaterials{{/crossLink}},\nAmbientLight {{#crossLink \"AmbientLight/color:property\"}}color{{/crossLink}} is multiplied by\nLambertMaterial {{#crossLink \"LambertMaterial/ambient:property\"}}{{/crossLink}} for each rendered triangle of the Geometry surface (ie. flat shaded).\n\n## Examples\n\n* [Ambient light source](../../examples/#lights_ambient)\n\n## Usage\n\nIn the example below we'll customize the default Scene's light sources, defining an AmbientLight and a couple of\nDirLights, then create a Phong-shaded box entity.\n\n````javascript\n\n// We're using the default xeogl Scene\n// Get Scene's Lights\nvar lights = xeogl.scene.lights;\n\n// Customize the light sources\nlights.lights = [\n   new xeogl.AmbientLight({\n       color: [0.8, 0.8, 0.8],\n       intensity: 0.5\n   }),\n   new xeogl.DirLight({\n       dir: [-0.8, -0.4, -0.4],\n       color: [0.4, 0.4, 0.5],\n       intensity: 0.5,\n       space: \"view\"\n   }),\n   new xeogl.DirLight({\n       dir: [0.2, -0.8, 0.8],\n       color: [0.8, 0.8, 0.8],\n       intensity: 0.5,\n       space: \"view\"\n   })\n];\n\n// Create box entity\nnew xeogl.Entity({\n   material: new xeogl.PhongMaterial({\n       ambient: [0.5, 0.5, 0.5],\n       diffuse: [1,0.3,0.3]\n   }),\n   geometry: new xeogl.BoxGeometry()\n});\n````",
            "submodule": "lighting",
            "is_constructor": 1,
            "params": [
                {
                    "name": "scene",
                    "description": "Parent {{#crossLink \"Scene\"}}Scene{{/crossLink}}, creates this AmbientLight within the\ndefault {{#crossLink \"Scene\"}}Scene{{/crossLink}} when omitted",
                    "type": "Scene",
                    "optional": true
                },
                {
                    "name": "cfg",
                    "description": "AmbientLight configuration",
                    "type": "*",
                    "optional": true,
                    "props": [
                        {
                            "name": "id",
                            "description": "Optional ID, unique among all components in the parent {{#crossLink \"Scene\"}}Scene{{/crossLink}}, generated automatically when omitted.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "meta",
                            "description": "Optional map of user-defined metadata to attach to this AmbientLight.",
                            "type": "String:Object",
                            "optional": true
                        },
                        {
                            "name": "color",
                            "description": "The color of this AmbientLight.",
                            "type": "Array(Number)",
                            "optional": true,
                            "optdefault": "[0.7, 0.7, 0.8]"
                        },
                        {
                            "name": "intensity",
                            "description": "````.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "[1.0]]  The intensity of this AmbientLight, as a factor in range ````[0..1"
                        }
                    ]
                }
            ],
            "extends": "Component"
        },
        "CubeTexture": {
            "name": "CubeTexture",
            "shortname": "CubeTexture",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "xeogl",
            "namespace": "",
            "file": "src/lighting/cubeTexture.js",
            "line": 1,
            "description": "A **CubeTexture** specifies a cube texture map.\n\n## Overview\n\nSee {{#crossLink \"Lights\"}}{{/crossLink}} for an example of how to use CubeTextures for light and reflection mapping.",
            "submodule": "lighting",
            "is_constructor": 1,
            "params": [
                {
                    "name": "scene",
                    "description": "Parent {{#crossLink \"Scene\"}}Scene{{/crossLink}} - creates this CubeTexture in the default\n{{#crossLink \"Scene\"}}Scene{{/crossLink}} when omitted.",
                    "type": "Scene",
                    "optional": true
                },
                {
                    "name": "cfg",
                    "description": "Configs",
                    "type": "*",
                    "optional": true,
                    "props": [
                        {
                            "name": "id",
                            "description": "Optional ID for this CubeTexture, unique among all components in the parent scene, generated automatically when omitted.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "meta",
                            "description": "Optional map of user-defined metadata to attach to this CubeTexture.",
                            "type": "String:Object",
                            "optional": true
                        },
                        {
                            "name": "src",
                            "description": "Paths to six image files to load into this CubeTexture.",
                            "type": "Array of String",
                            "optional": true,
                            "optdefault": "null"
                        },
                        {
                            "name": "flipY",
                            "description": "Flips this CubeTexture's source data along its vertical axis when true.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "encoding",
                            "description": "Encoding format.  See the {{#crossLink \"CubeTexture/encoding:property\"}}{{/crossLink}} property for more info.",
                            "type": "String",
                            "optional": true,
                            "optdefault": "\"linear\""
                        }
                    ]
                }
            ],
            "extends": "Component"
        },
        "DirLight": {
            "name": "DirLight",
            "shortname": "DirLight",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "xeogl",
            "namespace": "",
            "file": "src/lighting/dirLight.js",
            "line": 1,
            "description": "A **DirLight** is a directional light source that illuminates all {{#crossLink \"Entity\"}}Entities{{/crossLink}} equally\nfrom a given direction.\n\n## Overview\n\n* DirLights are grouped, along with other light source types, within a {{#crossLink \"Lights\"}}Lights{{/crossLink}} component,\nwhich belongs to a {{#crossLink \"Scene\"}}{{/crossLink}}.\n* DirLights have a direction, but no position.\n* The direction is the **direction that the light is emitted in**.\n* DirLights may be defined in either **World** or **View** coordinate space. When in World-space, their direction\nis relative to the World coordinate system, and will appear to move as the {{#crossLink \"Camera\"}}{{/crossLink}} moves.\nWhen in View-space, their direction is relative to the View coordinate system, and will behave as if fixed to the viewer's\nhead as the {{#crossLink \"Camera\"}}{{/crossLink}} moves.\n* A DirLight can also have a {{#crossLink \"Shadow\"}}{{/crossLink}} component, to configure it to cast a shadow.\n\n## Examples\n\n* [View-space directional three-point lighting](../../examples/#lights_directional_view_threePoint)\n* [World-space directional three-point lighting](../../examples/#lights_directional_world_threePoint)\n\n## Usage\n\nIn the example below we'll customize the default Scene's light sources, defining an AmbientLight and a couple of\nDirLights, then create a Phong-shaded box entity.\n\n````javascript\n\n// We're using the default xeogl Scene\n// Get Scene's Lights\nvar lights = xeogl.scene.lights;\n\n// Customize the light sources\nlights.lights = [\nnew xeogl.AmbientLight({\n       color: [0.8, 0.8, 0.8],\n       intensity: 0.5\n    }),\nnew xeogl.DirLight({\n       dir: [1, 1, 1],     // Direction the light is shining in\n       color: [0.5, 0.7, 0.5],\n       intensity: 1.0,\n       space: \"view\",      // Other option is \"world\", for World-space\n       shadow: false       // Default\n    }),\nnew xeogl.DirLight({\n       dir: [0.2, -0.8, 0.8],\n       color: [0.8, 0.8, 0.8],\n       intensity: 0.5,\n       space: \"view\",\n       shadow: false\n    })\n];\n\n// Create box entity\nnew xeogl.Entity({\n   material: new xeogl.PhongMaterial({\n       ambient: [0.5, 0.5, 0.5],\n       diffuse: [1,0.3,0.3]\n   }),\n   geometry: new xeogl.BoxGeometry()\n});\n````",
            "submodule": "lighting",
            "is_constructor": 1,
            "params": [
                {
                    "name": "scene",
                    "description": "Parent {{#crossLink \"Scene\"}}Scene{{/crossLink}}, creates this DirLight within the\ndefault {{#crossLink \"Scene\"}}Scene{{/crossLink}} when omitted",
                    "type": "Scene",
                    "optional": true
                },
                {
                    "name": "cfg",
                    "description": "The DirLight configuration",
                    "type": "*",
                    "optional": true,
                    "props": [
                        {
                            "name": "id",
                            "description": "Optional ID, unique among all components in the parent {{#crossLink \"Scene\"}}Scene{{/crossLink}}, generated automatically when omitted.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "meta",
                            "description": "Optional map of user-defined metadata to attach to this DirLight.",
                            "type": "String:Object",
                            "optional": true
                        },
                        {
                            "name": "dir",
                            "description": "A unit vector indicating the direction that the light is shining,\ngiven in either World or View space, depending on the value of the **space** parameter.",
                            "type": "Float32Array",
                            "optional": true,
                            "optdefault": "[1.0, 1.0, 1.0]"
                        },
                        {
                            "name": "color",
                            "description": "The color of this DirLight.",
                            "type": "Float32Array",
                            "optional": true,
                            "optdefault": "[0.7, 0.7, 0.8 ]"
                        },
                        {
                            "name": "intensity",
                            "description": "````.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "1.0 ]  The intensity of this DirLight, as a factor in range ````[0..1"
                        },
                        {
                            "name": "space",
                            "description": "The coordinate system the DirLight is defined in - \"view\" or \"space\".",
                            "type": "String",
                            "optional": true,
                            "optdefault": "\"view\""
                        },
                        {
                            "name": "shadow",
                            "description": "Flag which indicates if this DirLight casts a shadow.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        }
                    ]
                }
            ],
            "extends": "Component"
        },
        "Lights": {
            "name": "Lights",
            "shortname": "Lights",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "xeogl",
            "namespace": "",
            "file": "src/lighting/lights.js",
            "line": 1,
            "description": "A **Lights** defines a group of light sources within a {{#crossLink \"Scene\"}}{{/crossLink}}.\n\n## Overview\n\nA Lights may contain a virtually unlimited number of three types of light source:\n\n* {{#crossLink \"AmbientLight\"}}AmbientLight{{/crossLink}}s, which are fixed-intensity and fixed-color, and\naffect all the Scene's {{#crossLink \"Entity\"}}Entities{{/crossLink}} equally,\n* {{#crossLink \"PointLight\"}}PointLight{{/crossLink}}s, which emit light that\noriginates from a single point and spreads outward in all directions,\n* {{#crossLink \"DirLight\"}}DirLight{{/crossLink}}s, which illuminate all the\nEntities equally from a given direction and may cast shadows, and\n* {{#crossLink \"SpotLight\"}}SpotLight{{/crossLink}}s, which eminate from a position in a given direction and may also cast shadows.\n\nA Lights can also have two other components that define environmental reflection and irradiance:\n\n* {{#crossLink \"Lights/lightMap:property\"}}{{/crossLink}} set to a {{#crossLink \"CubeTexture\"}}{{/crossLink}}, and\n* {{#crossLink \"Lights/reflectionMap:property\"}}{{/crossLink}} set to a {{#crossLink \"CubeTexture\"}}{{/crossLink}}.\n\n## Examples\n\n* [Light and reflection maps](../../examples/#materials_metallic_fireHydrant)\n* [World-space point lighting with normal map](../../examples/#lights_point_world_normalMap)\n* [View-space directional three-point lighting](../../examples/#lights_directional_view_threePoint)\n* [View-space positional three-point lighting](../../examples/#lights_point_world_threePoint)\n* [World-space directional three-point lighting](../../examples/#lights_directional_world_threePoint)\n* [World-space positional three-point lighting](../../examples/#lights_point_world_threePoint)\n\n## Usage\n\nIn the example below we'll customize the default Scene's light sources, then create a metallic sphere entity.\n\n````javascript\n\n// We're using the default xeogl Scene\n// Get Scene's Lights\nvar lights = xeogl.scene.lights;\n\n// Customize the light sources\nlights.lights = [\n   new xeogl.DirLight({\n       dir: [0.8, -0.6, -0.8],\n       color: [0.8, 0.8, 0.8],\n       space: \"view\"\n   }),\n   new xeogl.DirLight({\n       dir: [-0.8, -0.4, -0.4],\n       color: [0.4, 0.4, 0.5],\n       space: \"view\"\n   }),\n   new xeogl.DirLight({\n       dir: [0.2, -0.8, 0.8],\n       color: [0.8, 0.8, 0.8],\n       space: \"view\"\n   })\n];\n\n// Add a light cube map\nlights.lightMap = new xeogl.CubeTexture({\n   src: [\n       \"textures/light/Uffizi_Gallery/Uffizi_Gallery_Irradiance_PX.png\",\n       \"textures/light/Uffizi_Gallery/Uffizi_Gallery_Irradiance_NX.png\",\n       \"textures/light/Uffizi_Gallery/Uffizi_Gallery_Irradiance_PY.png\",\n       \"textures/light/Uffizi_Gallery/Uffizi_Gallery_Irradiance_NY.png\",\n       \"textures/light/Uffizi_Gallery/Uffizi_Gallery_Irradiance_PZ.png\",\n       \"textures/light/Uffizi_Gallery/Uffizi_Gallery_Irradiance_NZ.png\"\n   ]\n});\n\n// Add a reflection cube map\nlights.reflectionMap = new xeogl.CubeTexture({\n   src: [\n       \"textures/reflect/Uffizi_Gallery/Uffizi_Gallery_Radiance_PX.png\",\n       \"textures/reflect/Uffizi_Gallery/Uffizi_Gallery_Radiance_NX.png\",\n       \"textures/reflect/Uffizi_Gallery/Uffizi_Gallery_Radiance_PY.png\",\n       \"textures/reflect/Uffizi_Gallery/Uffizi_Gallery_Radiance_NY.png\",\n       \"textures/reflect/Uffizi_Gallery/Uffizi_Gallery_Radiance_PZ.png\",\n       \"textures/reflect/Uffizi_Gallery/Uffizi_Gallery_Radiance_NZ.png\"\n   ]\n});\n\n// Create a metallic sphere entity\nnew xeogl.Entity({\n   material: new xeogl.MetallicMaterial({\n       roughness: 1.0,\n       metallic: 1.0,\n       baseColorMap: new xeogl.Texture({\n           src: \"textures/materials/poligon/RustMixedOnPaint012_1k/RustMixedOnPaint012_COL_VAR1_1K.jpg\"\n       }),\n       roughnessMap: new xeogl.Texture({\n           src: \"textures/materials/poligon/RustMixedOnPaint012_1k/RustMixedOnPaint012_REFL_1K.jpg\"\n       })\n   }),\n   geometry: new xeogl.SphereGeometry()\n});\n````",
            "submodule": "lighting",
            "is_constructor": 1,
            "params": [
                {
                    "name": "scene",
                    "description": "Parent {{#crossLink \"Scene\"}}Scene{{/crossLink}} - creates this Lights in the default\n{{#crossLink \"Scene\"}}Scene{{/crossLink}} when omitted.",
                    "type": "Scene",
                    "optional": true
                },
                {
                    "name": "cfg",
                    "description": "Configs",
                    "type": "*",
                    "optional": true,
                    "props": [
                        {
                            "name": "id",
                            "description": "Optional ID, unique among all components in the parent scene, generated automatically when omitted.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "meta",
                            "description": "Optional map of user-defined metadata to attach to this Lights.",
                            "type": "String:Object",
                            "optional": true
                        },
                        {
                            "name": "lights",
                            "description": "Array of light source IDs or instances.",
                            "type": "Array of String|Entity",
                            "optional": true
                        },
                        {
                            "name": "lightMap",
                            "description": "A light map {{#crossLink \"CubeTexture\"}}{{/crossLink}}. Must be within the same {{#crossLink \"Scene\"}}Scene{{/crossLink}} as this Lights.",
                            "type": "CubeTexture",
                            "optional": true,
                            "optdefault": "undefined"
                        },
                        {
                            "name": "reflectionMap",
                            "description": "A reflection map {{#crossLink \"CubeTexture\"}}{{/crossLink}}. Must be within the same {{#crossLink \"Scene\"}}Scene{{/crossLink}} as this Lights.",
                            "type": "CubeTexture",
                            "optional": true,
                            "optdefault": "undefined"
                        }
                    ]
                }
            ],
            "extends": "Component"
        },
        "PointLight": {
            "name": "PointLight",
            "shortname": "PointLight",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "xeogl",
            "namespace": "",
            "file": "src/lighting/pointLight.js",
            "line": 1,
            "description": "A **PointLight** defines a positional light source that originates from a single point and spreads outward in all directions,\nto illuminate {{#crossLink \"Entity\"}}Entities{{/crossLink}}.\n\n<a href=\"../../examples/#lights_point_world_normalMap\"><img src=\"http://i.giphy.com/3o6ZsZoFGIOJ2nlmN2.gif\"></img></a>\n\n## Overview\n\n* PointLights are grouped, along with other light source types, within a {{#crossLink \"Lights\"}}Lights{{/crossLink}} component,\nwhich belongs to a {{#crossLink \"Scene\"}}{{/crossLink}}.\n* PointLights have a position, but no direction.\n* PointLights may be defined in either **World** or **View** coordinate space. When in World-space, their positions\nare relative to the World coordinate system, and will appear to move as the {{#crossLink \"Camera\"}}{{/crossLink}} moves.\nWhen in View-space, their positions are relative to the View coordinate system, and will behave as if fixed to the viewer's\nhead as the {{#crossLink \"Camera\"}}{{/crossLink}} moves.\n* PointLights have {{#crossLink \"PointLight/constantAttenuation:property\"}}{{/crossLink}}, {{#crossLink \"PointLight/linearAttenuation:property\"}}{{/crossLink}} and\n{{#crossLink \"PointLight/quadraticAttenuation:property\"}}{{/crossLink}} factors, which indicate how their intensity attenuates over distance.\n\n## Examples\n\n* [View-space positional three-point lighting](../../examples/#lights_point_view_threePoint)\n* [World-space positional three-point lighting](../../examples/#lights_point_world_threePoint)\n* [World-space point light and normal map](../../examples/#lights_point_world_normalMap)\n\n## Usage\n\nIn the example below we'll customize the default Scene's light sources, defining an AmbientLight and a couple of\nPointLights, then create a Phong-shaded box entity.\n\n````javascript\n\n// We're using the default xeogl Scene\n// Get Scene's Lights\nvar lights = xeogl.scene.lights;\n\n// Customize the light sources\nlights.lights = [\n   new xeogl.AmbientLight({\n       color: [0.8, 0.8, 0.8],\n       intensity: 0.5\n   }),\n   new xeogl.PointLight({\n       pos: [-100, 0, 100],\n       color: [0.3, 0.3, 0.5],\n       intensity: .7\n       constantAttenuation: 0,\n       linearAttenuation: 0,\n       quadraticAttenuation: 0,\n       space: \"view\"\n   }),\n   new xeogl.PointLight({\n       pos: [0, 100, 100],\n       color: [0.5, 0.7, 0.5],\n       intensity: 1\n       constantAttenuation: 0,\n       linearAttenuation: 0,\n       quadraticAttenuation: 0,\n       space: \"view\"\n   })\n];\n\n// Create box entity\nnew xeogl.Entity({\n   material: new xeogl.PhongMaterial({\n       ambient: [0.5, 0.5, 0.5],\n       diffuse: [1,0.3,0.3]\n   }),\n   geometry: new xeogl.BoxGeometry()\n});\n````",
            "submodule": "lighting",
            "is_constructor": 1,
            "extends": "Component",
            "params": [
                {
                    "name": "scene",
                    "description": "Parent {{#crossLink \"Scene\"}}Scene{{/crossLink}}, creates this PointLight within the\ndefault {{#crossLink \"Scene\"}}Scene{{/crossLink}} when omitted",
                    "type": "Scene",
                    "optional": true
                },
                {
                    "name": "cfg",
                    "description": "The PointLight configuration",
                    "type": "*",
                    "optional": true,
                    "props": [
                        {
                            "name": "id",
                            "description": "Optional ID, unique among all components in the parent {{#crossLink \"Scene\"}}Scene{{/crossLink}}, generated automatically when omitted.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "meta",
                            "description": "Optional map of user-defined metadata to attach to this PointLight.",
                            "type": "String:Object",
                            "optional": true
                        },
                        {
                            "name": "pos",
                            "description": "Position, in either World or View space, depending on the value of the **space** parameter.",
                            "type": "Float32Array",
                            "optional": true,
                            "optdefault": "[ 1.0, 1.0, 1.0 ]"
                        },
                        {
                            "name": "color",
                            "description": "Color of this PointLight.",
                            "type": "Float32Array",
                            "optional": true,
                            "optdefault": "[0.7, 0.7, 0.8 ]"
                        },
                        {
                            "name": "intensity",
                            "description": "````.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "1.0]  Intensity of this PointLight, as a factor in range ````[0..1"
                        },
                        {
                            "name": "constantAttenuation",
                            "description": "Constant attenuation factor.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "0"
                        },
                        {
                            "name": "linearAttenuation",
                            "description": "Linear attenuation factor.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "0"
                        },
                        {
                            "name": "quadraticAttenuation",
                            "description": "Quadratic attenuation factor.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "0"
                        },
                        {
                            "name": "space",
                            "description": "The coordinate system this PointLight is defined in - \"view\" or \"world\".",
                            "type": "String",
                            "optional": true,
                            "optdefault": "\"view\""
                        },
                        {
                            "name": "shadow",
                            "description": "Flag which indicates if this PointLight casts a shadow.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        }
                    ]
                }
            ]
        },
        "Shadow": {
            "name": "Shadow",
            "shortname": "Shadow",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "xeogl",
            "namespace": "",
            "file": "src/lighting/shadow.js",
            "line": 1,
            "description": "A **Shadow** defines a shadow cast by a {{#crossLink \"DirLight\"}}{{/crossLink}} or a {{#crossLink \"SpotLight\"}}{{/crossLink}}.\n\nWork in progress!\n\n## Overview\n\n* Shadows are attached to {{#crossLink \"DirLight\"}}{{/crossLink}} and {{#crossLink \"SpotLight\"}}{{/crossLink}} components.\n\nTODO\n\n## Examples\n\nTODO\n\n## Usage\n\n```` javascript\nvar entity = new xeogl.Entity(scene, {\n\n       lights: new xeogl.Lights({\n           lights: [\n\n               new xeogl.SpotLight({\n                   pos: [0, 100, 100],\n                   dir: [0, -1, 0],\n                   color: [0.5, 0.7, 0.5],\n                   intensity: 1\n                   constantAttenuation: 0,\n                   linearAttenuation: 0,\n                   quadraticAttenuation: 0,\n                   space: \"view\",\n\n                   shadow: new xeogl.Shadow({\n                       resolution: [1000, 1000],\n                       intensity: 0.7,\n                       sampling: \"stratified\" // \"stratified\" | \"poisson\" | \"basic\"\n                   });\n               })\n           ]\n       }),\n,\n       material: new xeogl.PhongMaterial({\n           diffuse: [0.5, 0.5, 0.0]\n       }),\n\n       geometry: new xeogl.BoxGeometry()\n });\n````",
            "submodule": "lighting",
            "is_constructor": 1,
            "extends": "Component",
            "params": [
                {
                    "name": "scene",
                    "description": "Parent {{#crossLink \"Scene\"}}Scene{{/crossLink}}, creates this Shadow within the\ndefault {{#crossLink \"Scene\"}}Scene{{/crossLink}} when omitted",
                    "type": "Scene",
                    "optional": true
                },
                {
                    "name": "cfg",
                    "description": "The Shadow configuration",
                    "type": "*",
                    "optional": true,
                    "props": [
                        {
                            "name": "id",
                            "description": "Optional ID, unique among all components in the parent {{#crossLink \"Scene\"}}Scene{{/crossLink}}, generated automatically when omitted.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "meta",
                            "description": "Optional map of user-defined metadata to attach to this Shadow.",
                            "type": "String:Object",
                            "optional": true
                        },
                        {
                            "name": "resolution",
                            "description": "Resolution of the texture map for this Shadow.",
                            "type": "Uint16Array",
                            "optional": true,
                            "optdefault": "[1000,1000]"
                        },
                        {
                            "name": "intensity",
                            "description": "Intensity of this Shadow.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "1.0"
                        }
                    ]
                }
            ]
        },
        "SpotLight": {
            "name": "SpotLight",
            "shortname": "SpotLight",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "xeogl",
            "namespace": "",
            "file": "src/lighting/spotLight.js",
            "line": 1,
            "description": "A **SpotLight** defines a positional light source that originates from a single point and eminates in a given direction,\nto illuminate {{#crossLink \"Entity\"}}Entities{{/crossLink}}.\n\n## Overview\n\n* SpotLights are grouped, along with other light source types, within a {{#crossLink \"Lights\"}}Lights{{/crossLink}} component,\nwhich belongs to a {{#crossLink \"Scene\"}}{{/crossLink}}.\n* SpotLights have a position and direction.\n* SpotLights may be defined in either **World** or **View** coordinate space. When in World-space, their positions\nare relative to the World coordinate system, and will appear to move as the {{#crossLink \"Camera\"}}{{/crossLink}} moves.\nWhen in View-space, their positions are relative to the View coordinate system, and will behave as if fixed to the viewer's\nhead as the {{#crossLink \"Camera\"}}{{/crossLink}} moves.\n* SpotLights have {{#crossLink \"SpotLight/constantAttenuation:property\"}}{{/crossLink}}, {{#crossLink \"SpotLight/linearAttenuation:property\"}}{{/crossLink}} and\n{{#crossLink \"SpotLight/quadraticAttenuation:property\"}}{{/crossLink}} factors, which indicate how their intensity attenuates over distance.\n* A SpotLight can also have a {{#crossLink \"Shadow\"}}{{/crossLink}} component, to configure it to cast a shadow.\n\n## Examples\n\n   TODO\n\n## Usage\n\nIn the example below we'll customize the default Scene's light sources, defining an AmbientLight and a couple of\nSpotLights, then create a Phong-shaded box entity.\n\n````javascript\n\n// We're using the default xeogl Scene\n// Get Scene's Lights\nvar lights = xeogl.scene.lights;\n\n// Customize the light sources\nlights.lights = [\n    new xeogl.AmbientLight({\n        color: [0.8, 0.8, 0.8],\n        intensity: 0.5\n    }),\n    new xeogl.SpotLight({\n        pos: [0, 100, 100],\n        dir: [0, -1, 0],\n        color: [0.5, 0.7, 0.5],\n        intensity: 1\n        constantAttenuation: 0,\n        linearAttenuation: 0,\n        quadraticAttenuation: 0,\n        space: \"view\"\n    }),\n    new xeogl.PointLight({\n        pos: [0, 100, 100],\n        dir: [0, -1, 0],\n        color: [0.5, 0.7, 0.5],\n        intensity: 1\n        constantAttenuation: 0,\n        linearAttenuation: 0,\n        quadraticAttenuation: 0,\n        space: \"view\"\n    })\n];\n\n// Create box entity\nnew xeogl.Entity({\n   material: new xeogl.PhongMaterial({\n       ambient: [0.5, 0.5, 0.5],\n       diffuse: [1,0.3,0.3]\n   }),\n   geometry: new xeogl.BoxGeometry()\n});\n````",
            "submodule": "lighting",
            "is_constructor": 1,
            "extends": "Component",
            "params": [
                {
                    "name": "scene",
                    "description": "Parent {{#crossLink \"Scene\"}}Scene{{/crossLink}}, creates this SpotLight within the\ndefault {{#crossLink \"Scene\"}}Scene{{/crossLink}} when omitted",
                    "type": "Scene",
                    "optional": true
                },
                {
                    "name": "cfg",
                    "description": "The SpotLight configuration",
                    "type": "*",
                    "optional": true,
                    "props": [
                        {
                            "name": "id",
                            "description": "Optional ID, unique among all components in the parent {{#crossLink \"Scene\"}}Scene{{/crossLink}}, generated automatically when omitted.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "meta",
                            "description": "Optional map of user-defined metadata to attach to this SpotLight.",
                            "type": "String:Object",
                            "optional": true
                        },
                        {
                            "name": "pos",
                            "description": "Position, in either World or View space, depending on the value of the **space** parameter.",
                            "type": "Float32Array",
                            "optional": true,
                            "optdefault": "[ 1.0, 1.0, 1.0 ]"
                        },
                        {
                            "name": "dir",
                            "description": "Direction in which this Spotlight is shining, in either World or View space, depending on the value of the **space** parameter.",
                            "type": "Float32Array",
                            "optional": true,
                            "optdefault": "[ 0.0, -1.0, 0.0 ]"
                        },
                        {
                            "name": "color",
                            "description": "Color of this SpotLight.",
                            "type": "Float32Array",
                            "optional": true,
                            "optdefault": "[0.7, 0.7, 0.8 ]"
                        },
                        {
                            "name": "intensity",
                            "description": "Intensity of this SpotLight.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "1.0"
                        },
                        {
                            "name": "constantAttenuation",
                            "description": "Constant attenuation factor.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "0"
                        },
                        {
                            "name": "linearAttenuation",
                            "description": "Linear attenuation factor.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "0"
                        },
                        {
                            "name": "quadraticAttenuation",
                            "description": "Quadratic attenuation factor.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "0"
                        },
                        {
                            "name": "space",
                            "description": "The coordinate system this SpotLight is defined in - \"view\" or \"world\".",
                            "type": "String",
                            "optional": true,
                            "optdefault": "\"view\""
                        },
                        {
                            "name": "shadow",
                            "description": "Flag which indicates if this SpotLight casts a shadow.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        }
                    ]
                }
            ]
        },
        "EmphasisMaterial": {
            "name": "EmphasisMaterial",
            "shortname": "EmphasisMaterial",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "xeogl",
            "namespace": "",
            "file": "src/materials/emphasisMaterial.js",
            "line": 1,
            "description": "An **EmphasisMaterial** is a {{#crossLink \"Material\"}}{{/crossLink}} that defines the appearance of attached\n{{#crossLink \"Entity\"}}Entities{{/crossLink}} when they are highlighted, selected or ghosted.\n\n## Examples\n\n| <a href=\"../../examples/#effects_ghost\"><img src=\"../../assets/images/screenshots/HighlightMaterial/teapot.png\"></img></a> | <a href=\"../../examples/#effects_demo_housePlan\"><img src=\"../../assets/images/screenshots/HighlightMaterial/house.png\"></img></a> | <a href=\"../../examples/#effects_demo_gearbox\"><img src=\"../../assets/images/screenshots/HighlightMaterial/gearbox.png\"></img></a> | <a href=\"../../examples/#effects_demo_adam\"><img src=\"../../assets/images/screenshots/HighlightMaterial/adam.png\"></img></a>|\n|:------:|:------:|:----:|:-----:|:-----:|\n|[Example 1: Ghost effect](../../examples/#effects_ghost)|[Example 2: Ghost and highlight effects for architecture](../../examples/#effects_demo_housePlan)|[Example 3: Ghost and highlight effects for CAD](../../examples/#effects_demo_gearbox)| [Example 4: Ghost effect for CAD ](../../examples//#effects_demo_adam)|\n\n## Overview\n\n* Ghost an {{#crossLink \"Entity\"}}{{/crossLink}} by setting its {{#crossLink \"Entity/ghost:property\"}}{{/crossLink}} property ````true````.\n* When ghosted, an Entity's appearance is controlled by its EmphasisMaterial.\n* An EmphasisMaterial provides several preset configurations that you can set it to. Select a preset by setting {{#crossLink \"EmphasisMaterial/preset:property\"}}{{/crossLink}} to the preset's ID. A map of available presets is provided in {{#crossLink \"EmphasisMaterial/presets:property\"}}xeogl.EmphasisMaterial.presets{{/crossLink}}.\n* By default, an Entity uses the {{#crossLink \"Scene\"}}{{/crossLink}}'s global EmphasisMaterials, but you can give each Entity its own EmphasisMaterial when you want to customize the effect per-Entity.\n* Ghost all Entities in a {{#crossLink \"Model\"}}{{/crossLink}} by setting the Model's {{#crossLink \"Model/ghost:property\"}}{{/crossLink}} property ````true````. Note that all Entities in a Model have the Scene's global EmphasisMaterial by default.\n* Modify the Scene's global EmphasisMaterial to customize it.\n\n## Usage\n\n* [Ghosting](#ghosting)\n* [Highlighting](#highlighting)\n\n### Ghosting\n\nIn the usage example below, we'll create an Entity with a ghost effect applied to it. The Entity gets its own EmphasisMaterial for ghosting, and\nhas its {{#crossLink \"Entity/ghost:property\"}}{{/crossLink}} property set ````true```` to activate the effect.\n\n<a href=\"../../examples/#effects_ghost\"><img src=\"../../assets/images/screenshots/HighlightMaterial/teapot.png\"></img></a>\n\n````javascript\nvar entity = new xeogl.Entity({\n   geometry: new xeogl.TeapotGeometry({\n       ghostEdgeThreshold: 1\n   }),\n   material: new xeogl.PhongMaterial({\n       diffuse: [0.2, 0.2, 1.0]\n   }),\n   ghostMaterial: new xeogl.EmphasisMaterial({\n       edges: true,\n       edgeColor: [0.2, 1.0, 0.2],\n       edgeAlpha: 1.0,\n       edgeWidth: 2,\n       vertices: true,\n       vertexColor: [0.6, 1.0, 0.6],\n       vertexAlpha: 1.0,\n       vertexSize: 8,\n       fill: true,\n       fillColor: [0, 0, 0],\n       fillAlpha: 0.7\n   }),\n   ghost: true\n});\n````\n\nNote the **ghostEdgeThreshold** configuration on the {{#crossLink \"Geometry\"}}{{/crossLink}} we've created for our\nEntity. Our EmphasisMaterial is configured to draw a wireframe representation of the Geometry, which will have inner edges (ie. edges between\nadjacent co-planar triangles) removed for visual clarity. The ````ghostEdgeThreshold```` configuration indicates\nthat, for this particular Geometry, an inner edge is one where the angle between the surface normals of adjacent triangles is not\ngreater than ````5```` degrees. That's set to ````2```` by default, but we can override it to tweak the effect as needed for particular Geometries.\n\nHere's the example again, this time using the Scene's global EmphasisMaterial by default. We'll also modify that EmphasisMaterial\nto customize the effect.\n\n````javascript\nvar entity = new xeogl.Entity({\n   geometry: new xeogl.TeapotGeometry({\n       ghostEdgeThreshold: 5\n   }),\n   material: new xeogl.PhongMaterial({\n       diffuse: [0.2, 0.2, 1.0]\n   }),\n   ghost: true\n});\n\nvar ghostMaterial = entity.scene.ghostMaterial;\n\nghostMaterial.edges = true;\nghostMaterial.edgeColor = [0.2, 1.0, 0.2];\nghostMaterial.edgeAlpha = 1.0;\nghostMaterial.edgeWidth = 2;\nghostMaterial.vertices = true;\nghostMaterial.vertexColor = [0.6, 1.0, 0.6];\nghostMaterial.vertexAlpha = 1.0;\nghostMaterial.vertexSize = 8;\nghostMaterial.fill = true;\nghostMaterial.fillColor = [0, 0, 0];\nghostMaterial.fillAlpha = 0.7;\n````\n\n### Highlighting\n\nIn the next example, we'll use a ghosting in conjunction with highlighting, to emphasise a couple of objects within\na gearbox {{#crossLink \"Model\"}}{{/crossLink}}. We'll load the Model from glTF, then ghost all of its Entities except for two gears, which we'll highlight instead. The ghosted\nEntities have the Scene's global ghosting EmphasisMaterial, which we'll modify. The  highlighted Entities also have the Scene's global highlighting EmphasisMaterial, which we'll modify as well.\n\n<a href=\"../../examples/#effects_demo_gearbox\"><img src=\"../../assets/images/screenshots/HighlightMaterial/gearbox.png\"></img></a>\n\n````javascript\nvar model = new xeogl.GLTFModel({\n    src: \"models/gltf/gearbox_conical/scene.gltf\",\n    ghostEdgeThreshold: 10\n});\n\nmodel.on(\"loaded\", function() {\n\n   model.ghost = true;\n\n   model.entities[\"gearbox#77.0\"].ghost = false;\n   model.entities[\"gearbox#79.0\"].ghost = false;\n\n   model.entities[\"gearbox#77.0\"].highlight = true;\n   model.entities[\"gearbox#79.0\"].highlight = true;\n\n   var ghostMaterial = model.scene.ghostMaterial;\n\n   ghostMaterial.edges = true;\n   ghostMaterial.edgeColor = [0.4, 0.4, 1.6];\n   ghostMaterial.edgeAlpha = 0.8;\n   ghostMaterial.edgeWidth = 3;\n   ghostMaterial.vertices = false;\n   ghostMaterial.vertexColor = [0.7, 1.0, 0.7];\n   ghostMaterial.vertexAlpha = 0.9;\n   ghostMaterial.vertexSize = 4.0;\n   ghostMaterial.fill = true;\n   ghostMaterial.fillColor = [0.2, 0.2, 0.7];\n   ghostMaterial.fillAlpha = 0.9;\n\n   var highlightMaterial = model.scene.highlightMaterial;\n\n   highlightMaterial.color = [1.0, 1.0, 1.0];\n   highlightMaterial.alpha = 1.0;\n});\n````\n\n## Presets\n\nFor convenience, an EmphasisMaterial provides several preset configurations that you can set it to, which are provided in\n{{#crossLink \"EmphasisMaterial/presets:property\"}}xeogl.EmphasisMaterial.presets{{/crossLink}}:\n\n````javascript\nvar presets = xeogl.EmphasisMaterial.presets;\n````\n\nThe presets look something like this:\n\n````json\n{\n       \"default\": {\n           edges: true,\n           edgeColor: [0.2, 0.2, 0.2],\n           edgeAlpha: 0.5,\n           edgeWidth: 1,\n           vertices: false,\n           vertexColor: [0.4, 0.4, 0.4],\n           vertexAlpha: 0.7,\n           vertexSize: 4.0,\n           fill: true,\n           fillColor: [0.4, 0.4, 0.4],\n           fillAlpha: 0.2\n       },\n\n        \"sepia\": {\n           edges: true,\n           edgeColor: [0.52, 0.45, 0.41],\n           edgeAlpha: 1.0,\n           edgeWidth: 1,\n           vertices: false,\n           vertexColor: [0.7, 1.0, 0.7],\n           vertexAlpha: 0.9,\n           vertexSize: 4.0,\n           fill: true,\n           fillColor: [0.97, 0.79, 0.66],\n           fillAlpha: 0.4\n       },\n\n       //...\n}\n````\n\nLet's switch the Scene's global default  EmphasisMaterial over to the \"sepia\" preset used in <a href=\"/examples/#effects_demo_adam\">Example 4: Ghost effect for CAD</a>.\n\n````javascript\nscene.ghostMaterial.preset = \"sepia\";\n````\n\nYou can also just create an EmphasisMaterial from a preset:\n\n````javascript\nvar entity = new xeogl.Entity({\n   geometry: new xeogl.TeapotGeometry({\n       ghostEdgeThreshold: 5\n   }),\n   material: new xeogl.PhongMaterial({\n       diffuse: [0.2, 0.2, 1.0]\n   }),\n   ghostMaterial: new xeogl.EmphasisMaterial({\n       preset: \"sepia\"\n   });\n   ghost: true\n});\n````\n\nNote that applying a preset just sets the EmphasisMaterial's property values, which you are then free to modify afterwards.",
            "submodule": "materials",
            "is_constructor": 1,
            "extends": "Material",
            "params": [
                {
                    "name": "scene",
                    "description": "Parent {{#crossLink \"Scene\"}}Scene{{/crossLink}}, creates this EmphasisMaterial within the\ndefault {{#crossLink \"Scene\"}}Scene{{/crossLink}} when omitted",
                    "type": "Scene",
                    "optional": true
                },
                {
                    "name": "cfg",
                    "description": "The EmphasisMaterial configuration",
                    "type": "*",
                    "optional": true,
                    "props": [
                        {
                            "name": "id",
                            "description": "Optional ID, unique among all components in the parent {{#crossLink \"Scene\"}}Scene{{/crossLink}}, generated automatically when omitted.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "meta",
                            "description": "Metadata to attach to this EmphasisMaterial.",
                            "type": "String:Object",
                            "optional": true,
                            "optdefault": "null"
                        },
                        {
                            "name": "edges",
                            "description": "Indicates whether or not ghost edges are visible.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        },
                        {
                            "name": "edgeColor",
                            "description": "RGB color of ghost edges.",
                            "type": "Array of Number",
                            "optional": true,
                            "optdefault": "[0.2,0.2,0.2]"
                        },
                        {
                            "name": "edgeAlpha",
                            "description": "Transparency of ghost edges. A value of 0.0 indicates fully transparent, 1.0 is fully opaque.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "0.5"
                        },
                        {
                            "name": "edgeWidth",
                            "description": "Width of ghost edges, in pixels.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "1"
                        },
                        {
                            "name": "vertices",
                            "description": "Indicates whether or not ghost vertices are visible.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "vertexColor",
                            "description": "Color of ghost vertices.",
                            "type": "Array of Number",
                            "optional": true,
                            "optdefault": "[0.4,0.4,0.4]"
                        },
                        {
                            "name": "vertexAlpha",
                            "description": "Transparency of ghost vertices. A value of 0.0 indicates fully transparent, 1.0 is fully opaque.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "0.7"
                        },
                        {
                            "name": "vertexSize",
                            "description": "Pixel size of ghost vertices.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "4.0"
                        },
                        {
                            "name": "fill",
                            "description": "Indicates whether or not ghost surfaces are filled with color.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        },
                        {
                            "name": "fillColor",
                            "description": "EmphasisMaterial fill color.",
                            "type": "Array of Number",
                            "optional": true,
                            "optdefault": "[0.4,0.4,0.4]"
                        },
                        {
                            "name": "fillAlpha",
                            "description": "Transparency of filled ghost faces. A value of 0.0 indicates fully transparent, 1.0 is fully opaque.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "0.2"
                        },
                        {
                            "name": "preset",
                            "description": "Selects a preset EmphasisMaterial configuration - see {{#crossLink \"EmphasisMaterial/preset:method\"}}preset(){{/crossLink}}.",
                            "type": "String",
                            "optional": true
                        }
                    ]
                }
            ]
        },
        "Fresnel": {
            "name": "Fresnel",
            "shortname": "Fresnel",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "xeogl",
            "namespace": "",
            "file": "src/materials/fresnel.js",
            "line": 1,
            "description": "A **Fresnel** specifies a Fresnel effect for attached {{#crossLink \"PhongMaterial\"}}PhongMaterials{{/crossLink}}.\n\n<a href=\"../../examples/#materials_phong_fresnel\"><img src=\"../../assets/images/screenshots/PhongMaterial/fresnelWide.png\"></img></a>\n\n## Overview\n\n* Fresnels are grouped within {{#crossLink \"PhongMaterial\"}}{{/crossLink}}s, which are attached to\n{{#crossLink \"Entity\"}}Entities{{/crossLink}}.\n\n## Examples\n\n* [PhongMaterials with Fresnels](../../examples/#materials_phong_fresnel)\n\n<img src=\"../../../assets/images/Fresnel.png\"></img>\n\n## Usage\n\n````javascript\nvar entity = new xeogl.Entity({\n\n    material: new xeogl.PhongMaterial({\n        ambient: [0.3, 0.3, 0.3],\n        shininess: 30,\n\n        diffuseFresnel: new xeogl.Fresnel({\n            edgeColor: [1.0, 1.0, 1.0],\n            centerColor: [0.0, 0.0, 0.0],\n            power: 4,\n            bias: 0.6\n        }),\n\n        specularFresnel: new xeogl.Fresnel({\n            edgeColor: [1.0, 1.0, 1.0],\n            centerColor: [0.0, 0.0, 0.0],\n            power: 4,\n            bias: 0.2\n        })\n    }),\n\n    new xeogl.TorusGeometry()\n});\n````",
            "submodule": "materials",
            "is_constructor": 1,
            "params": [
                {
                    "name": "scene",
                    "description": "Parent {{#crossLink \"Scene\"}}Scene{{/crossLink}} - creates this Geometry in the default\n{{#crossLink \"Scene\"}}Scene{{/crossLink}} when omitted.",
                    "type": "Scene",
                    "optional": true
                },
                {
                    "name": "cfg",
                    "description": "Configs",
                    "type": "*",
                    "optional": true,
                    "props": [
                        {
                            "name": "id",
                            "description": "Optional ID, unique among all components in the parent scene, generated automatically when omitted.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "meta",
                            "description": "Optional map of user-defined metadata to attach to this Fresnel.",
                            "type": "String:Object",
                            "optional": true
                        },
                        {
                            "name": "edgeColor",
                            "description": "Color used on edges.",
                            "type": "Array of Number",
                            "optional": true,
                            "optdefault": "[ 0.0, 0.0, 0.0 ]"
                        },
                        {
                            "name": "centerColor",
                            "description": "Color used on center.",
                            "type": "Array of Number",
                            "optional": true,
                            "optdefault": "[ 1.0, 1.0, 1.0 ]"
                        },
                        {
                            "name": "edgeBias",
                            "description": "Bias at the edge.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "0"
                        },
                        {
                            "name": "centerBias",
                            "description": "Bias at the center.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "1"
                        },
                        {
                            "name": "power",
                            "description": "The power.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "0"
                        }
                    ]
                }
            ],
            "extends": "Component"
        },
        "LambertMaterial": {
            "name": "LambertMaterial",
            "shortname": "LambertMaterial",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "xeogl",
            "namespace": "",
            "file": "src/materials/lambertMaterial.js",
            "line": 1,
            "description": "A **LambertMaterial** is a {{#crossLink \"Material\"}}{{/crossLink}} that defines the surface appearance of\nattached {{#crossLink \"Entity\"}}Entities{{/crossLink}} using\nthe non-physically based <a href=\"https://en.wikipedia.org/wiki/Lambertian_reflectance\">Lambertian</a> model for calculating reflectance.\n\n## Examples\n\nTODO\n\n## Overview\n\n* Used for rendering non-realistic objects such as \"helpers\", wireframe objects, labels etc.\n* Use  {{#crossLink \"PhongMaterial\"}}{{/crossLink}} when you need specular highlights.\n* Use the physically based {{#crossLink \"MetallicMaterial\"}}{{/crossLink}} or {{#crossLink \"SpecularMaterial\"}}{{/crossLink}} when you need more realism.\n\nFor LambertMaterial, the illumination calculation is performed at each triangle vertex, and the resulting color is\ninterpolated across the face of the triangle. For {{#crossLink \"PhongMaterial\"}}{{/crossLink}}, {{#crossLink \"MetallicMaterial\"}}{{/crossLink}} and\n{{#crossLink \"SpecularMaterial\"}}{{/crossLink}}, vertex normals are interpolated across the surface of the triangle, and\nthe illumination calculation is performed at each texel.\n\nThe following table summarizes LambertMaterial properties:\n\n| Property | Type | Range | Default Value | Space | Description |\n|:--------:|:----:|:-----:|:-------------:|:-----:|:-----------:|\n|  {{#crossLink \"LambertMaterial/ambient:property\"}}{{/crossLink}} | Array | [0, 1] for all components | [1,1,1,1] | linear | The RGB components of the ambient light reflected by the material. |\n|  {{#crossLink \"LambertMaterial/color:property\"}}{{/crossLink}} | Array | [0, 1] for all components | [1,1,1,1] | linear | The RGB components of the diffuse light reflected by the material. |\n|  {{#crossLink \"LambertMaterial/emissive:property\"}}{{/crossLink}} | Array | [0, 1] for all components | [0,0,0] | linear | The RGB components of the light emitted by the material. |\n| {{#crossLink \"LambertMaterial/alpha:property\"}}{{/crossLink}} | Number | [0, 1] | 1 | linear | The transparency of the material surface (0 fully transparent, 1 fully opaque). |\n| {{#crossLink \"LambertMaterial/lineWidth:property\"}}{{/crossLink}} | Number | [0..100] | 1 |  | Line width in pixels. |\n| {{#crossLink \"LambertMaterial/pointSize:property\"}}{{/crossLink}} | Number | [0..100] | 1 |  | Point size in pixels. |\n| {{#crossLink \"LambertMaterial/backfaces:property\"}}{{/crossLink}} | Boolean |  | false |  | Whether to render {{#crossLink \"Geometry\"}}Geometry{{/crossLink}} backfaces. |\n| {{#crossLink \"LambertMaterial/backfaces:property\"}}{{/crossLink}} | String | \"ccw\", \"cw\" | \"ccw\" |  | The winding order for {{#crossLink \"Geometry\"}}Geometry{{/crossLink}} frontfaces - \"cw\" for clockwise, or \"ccw\" for counter-clockwise. |\n\n## Usage\n\n```` javascript\nvar torus = new xeogl.Entity({\n   material: new xeogl.LambertMaterial({\n       ambient: [0.3, 0.3, 0.3],\n       color: [0.5, 0.5, 0.0],\n       alpha: 1.0 // Default\n   }),\n\n   geometry: new xeogl.TorusGeometry()\n});\n````",
            "submodule": "materials",
            "is_constructor": 1,
            "extends": "Material",
            "params": [
                {
                    "name": "scene",
                    "description": "Parent {{#crossLink \"Scene\"}}Scene{{/crossLink}}, creates this LambertMaterial within the\ndefault {{#crossLink \"Scene\"}}Scene{{/crossLink}} when omitted",
                    "type": "Scene",
                    "optional": true
                },
                {
                    "name": "cfg",
                    "description": "The LambertMaterial configuration",
                    "type": "*",
                    "optional": true,
                    "props": [
                        {
                            "name": "id",
                            "description": "Optional ID, unique among all components in the parent {{#crossLink \"Scene\"}}Scene{{/crossLink}}, generated automatically when omitted.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "meta",
                            "description": "Metadata to attach to this LambertMaterial.",
                            "type": "String:Object",
                            "optional": true,
                            "optdefault": "null"
                        },
                        {
                            "name": "ambient",
                            "description": "LambertMaterial ambient color.",
                            "type": "Array of Number",
                            "optional": true,
                            "optdefault": "[1.0, 1.0, 1.0 ]"
                        },
                        {
                            "name": "color",
                            "description": "LambertMaterial diffuse color.",
                            "type": "Array of Number",
                            "optional": true,
                            "optdefault": "[ 1.0, 1.0, 1.0 ]"
                        },
                        {
                            "name": "emissive",
                            "description": "LambertMaterial emissive color.",
                            "type": "Array of Number",
                            "optional": true,
                            "optdefault": "[ 0.0, 0.0, 0.0 ]"
                        },
                        {
                            "name": "alpha",
                            "description": "Scalar in range 0-1 that controls alpha, where 0 is completely transparent and 1 is completely opaque.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "1"
                        },
                        {
                            "name": "reflectivity",
                            "description": "Scalar in range 0-1 that controls how much {{#crossLink \"CubeMap\"}}CubeMap{{/crossLink}} is reflected.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "1"
                        },
                        {
                            "name": "lineWidth",
                            "description": "Scalar that controls the width of lines for {{#crossLink \"Geometry\"}}{{/crossLink}} with {{#crossLink \"Geometry/primitive:property\"}}{{/crossLink}} set to \"lines\".",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "1"
                        },
                        {
                            "name": "pointSize",
                            "description": "Scalar that controls the size of points for {{#crossLink \"Geometry\"}}{{/crossLink}} with {{#crossLink \"Geometry/primitive:property\"}}{{/crossLink}} set to \"points\".",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "1"
                        },
                        {
                            "name": "backfaces",
                            "description": "Whether to render {{#crossLink \"Geometry\"}}Geometry{{/crossLink}} backfaces.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "frontface",
                            "description": "The winding order for {{#crossLink \"Geometry\"}}Geometry{{/crossLink}} front faces - \"cw\" for clockwise, or \"ccw\" for counter-clockwise.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "\"ccw\""
                        }
                    ]
                }
            ]
        },
        "Material": {
            "name": "Material",
            "shortname": "Material",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "xeogl",
            "namespace": "",
            "file": "src/materials/material.js",
            "line": 1,
            "description": "A **Material** defines the surface appearance of attached {{#crossLink \"Entity\"}}Entities{{/crossLink}}.\n\nMaterial is the base class for:\n\n* {{#crossLink \"MetallicMaterial\"}}{{/crossLink}} - physically-based material for metallic surfaces. Use this one for things made of metal.\n* {{#crossLink \"SpecularMaterial\"}}{{/crossLink}} - physically-based material for non-metallic (dielectric)\nsurfaces. Use this one for insulators, such as ceramics, plastics, wood etc.\n* {{#crossLink \"PhongMaterial\"}}{{/crossLink}} - material for classic Blinn-Phong shading. This is less demanding of graphics hardware than the physically-based materials.\n* {{#crossLink \"LambertMaterial\"}}{{/crossLink}} - material for fast, flat-shaded CAD rendering without textures. Use\nthis for navigating huge CAD or BIM models interactively. This material gives the best rendering performance and uses the least memory.\n* {{#crossLink \"EmphasisMaterial\"}}{{/crossLink}} - defines the appearance of Entities when \"ghosted\" or \"highlighted\".\n* {{#crossLink \"OutlineMaterial\"}}{{/crossLink}} - defines the appearance of outlines drawn around Entities.\n\nA {{#crossLink \"Scene\"}}Scene{{/crossLink}} is allowed to contain a mixture of these material types.",
            "submodule": "materials",
            "is_constructor": 1,
            "extends": "Component"
        },
        "MetallicMaterial": {
            "name": "MetallicMaterial",
            "shortname": "MetallicMaterial",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "xeogl",
            "namespace": "",
            "file": "src/materials/metallicMaterial.js",
            "line": 1,
            "description": "A **MetallicMaterial** is a physically-based {{#crossLink \"Material\"}}{{/crossLink}} that defines the surface appearance of\n{{#crossLink \"Entity\"}}Entities{{/crossLink}} using the *metallic-roughness* workflow.\n\n## Examples\n\n| <a href=\"../../examples/#importing_gltf_pbr_metallic_helmet\"><img src=\"../../assets/images/screenshots/MetallicMaterial/helmet.png\"></img></a> | <a href=\"../../examples/#materials_metallic_fireHydrant\"><img src=\"../../assets/images/screenshots/MetallicMaterial/hydrant3.png\"></img></a> | <a href=\"../../examples/#materials_metallic_samples_metals\"><img src=\"../../assets/images/screenshots/MetallicMaterial/metals.png\"></img></a> | <a href=\"../../examples/#materials_metallic_metallicVsRoughness\"><img alt=\"Metallic Vs Roughness\" src=\"../../assets/images/screenshots/MetallicMaterial/metalVsRough.png\"></img></a> |\n|:------:|:----:|:-----:|:-----:|\n|[glTF models with PBR materials](../../examples/#importing_gltf_pbr_metallic_helmet)|[Fire hydrant model](../../examples/#materials_metallic_fireHydrant)| [Sample metal materials ](../../examples/#materials_metallic_samples_metals)|[Metallic Vs. roughness](../../examples/#materials_metallic_metallicVsRoughness)|\n\n## Overview\n\n* MetallicMaterial is usually used for conductive materials, such as metal.\n* {{#crossLink \"SpecularMaterial\"}}{{/crossLink}} is usually used for insulators, such as wood, ceramics and plastic.\n* {{#crossLink \"PhongMaterial\"}}{{/crossLink}} is usually used for non-realistic objects.\n\n<img src=\"../../../assets/images/MetallicMaterial.png\"></img>\n\nFor an introduction to PBR concepts, try these articles:\n\n* Joe Wilson's [Basic Theory of Physically-Based Rendering](https://www.marmoset.co/posts/basic-theory-of-physically-based-rendering/)\n* Jeff Russel's [Physically-based Rendering, and you can too!](https://www.marmoset.co/posts/physically-based-rendering-and-you-can-too/)\n* Sebastien Legarde's [Adapting a physically-based shading model](http://seblagarde.wordpress.com/tag/physically-based-rendering/)\n\nThe following table summarizes MetallicMaterial properties:\n\n| Property | Type | Range | Default Value | Space | Description |\n|:--------:|:----:|:-----:|:-------------:|:-----:|:-----------:|\n| {{#crossLink \"MetallicMaterial/baseColor:property\"}}{{/crossLink}} | Array | [0, 1] for all components | [1,1,1,1] | linear | The RGB components of the base color of the material. |\n| {{#crossLink \"MetallicMaterial/metallic:property\"}}{{/crossLink}} | Number | [0, 1] | 1 | linear | The metallic-ness the material (1 for metals, 0 for non-metals). |\n| {{#crossLink \"MetallicMaterial/roughness:property\"}}{{/crossLink}} | Number | [0, 1] | 1 | linear | The roughness of the material surface. |\n| {{#crossLink \"MetallicMaterial/specularF0:property\"}}{{/crossLink}} | Number | [0, 1] | 1 | linear | The specular Fresnel of the material surface. |\n| {{#crossLink \"MetallicMaterial/emissive:property\"}}{{/crossLink}} | Array | [0, 1] for all components | [0,0,0] | linear | The RGB components of the emissive color of the material. |\n| {{#crossLink \"MetallicMaterial/alpha:property\"}}{{/crossLink}} | Number | [0, 1] | 1 | linear | The transparency of the material surface (0 fully transparent, 1 fully opaque). |\n| {{#crossLink \"MetallicMaterial/baseColorMap:property\"}}{{/crossLink}} | {{#crossLink \"Texture\"}}{{/crossLink}} |  | null | sRGB | Texture RGB components multiplying by {{#crossLink \"MetallicMaterial/baseColor:property\"}}{{/crossLink}}. If the fourth component (A) is present, it multiplies by {{#crossLink \"MetallicMaterial/alpha:property\"}}{{/crossLink}}. |\n| {{#crossLink \"MetallicMaterial/metallicMap:property\"}}{{/crossLink}} | {{#crossLink \"Texture\"}}{{/crossLink}} |  | null | linear | Texture with first component multiplying by {{#crossLink \"MetallicMaterial/metallic:property\"}}{{/crossLink}}. |\n| {{#crossLink \"MetallicMaterial/roughnessMap:property\"}}{{/crossLink}} | {{#crossLink \"Texture\"}}{{/crossLink}} |  | null | linear | Texture with first component multiplying by {{#crossLink \"MetallicMaterial/roughness:property\"}}{{/crossLink}}. |\n| {{#crossLink \"MetallicMaterial/metallicRoughnessMap:property\"}}{{/crossLink}} | {{#crossLink \"Texture\"}}{{/crossLink}} |  | null | linear | Texture with first component multiplying by {{#crossLink \"MetallicMaterial/metallic:property\"}}{{/crossLink}} and second component multiplying by {{#crossLink \"MetallicMaterial/roughness:property\"}}{{/crossLink}}. |\n| {{#crossLink \"MetallicMaterial/emissiveMap:property\"}}{{/crossLink}} | {{#crossLink \"Texture\"}}{{/crossLink}} |  | null | linear | Texture with RGB components multiplying by {{#crossLink \"MetallicMaterial/emissive:property\"}}{{/crossLink}}. |\n| {{#crossLink \"MetallicMaterial/alphaMap:property\"}}{{/crossLink}} | {{#crossLink \"Texture\"}}{{/crossLink}} |  | null | linear | Texture with first component multiplying by {{#crossLink \"MetallicMaterial/alpha:property\"}}{{/crossLink}}. |\n| {{#crossLink \"MetallicMaterial/occlusionMap:property\"}}{{/crossLink}} | {{#crossLink \"Texture\"}}{{/crossLink}} |  | null | linear | Ambient occlusion texture multiplying by surface's reflected diffuse and specular light. |\n| {{#crossLink \"MetallicMaterial/normalMap:property\"}}{{/crossLink}} | {{#crossLink \"Texture\"}}{{/crossLink}} |  | null | linear | Tangent-space normal map. |\n| {{#crossLink \"MetallicMaterial/alphaMode:property\"}}{{/crossLink}} | String | \"opaque\", \"blend\", \"mask\" | \"blend\" |  | Alpha blend mode. |\n| {{#crossLink \"MetallicMaterial/alphaCutoff:property\"}}{{/crossLink}} | Number | [0..1] | 0.5 |  | Alpha cutoff value. |\n| {{#crossLink \"MetallicMaterial/backfaces:property\"}}{{/crossLink}} | Boolean |  | false |  | Whether to render {{#crossLink \"Geometry\"}}Geometry{{/crossLink}} backfaces. |\n| {{#crossLink \"MetallicMaterial/frontface:property\"}}{{/crossLink}} | String | \"ccw\", \"cw\" | \"ccw\" |  | The winding order for {{#crossLink \"Geometry\"}}Geometry{{/crossLink}} frontfaces - \"cw\" for clockwise, or \"ccw\" for counter-clockwise. |\n\n## Usage\n\nIn the example below we'll create the [yellow fire hydrant](../../examples/#materials_metallic_fireHydrant) shown in the example screen shots above. Our hydrant {{#crossLink \"Entity\"}}{{/crossLink}} has:\n\n* a {{#crossLink \"OBJGeometry\"}}{{/crossLink}} which loads the fire hydrant mesh from an .OBJ file,\n* a MetallicMaterial with {{#crossLink \"Texture\"}}Textures{{/crossLink}} providing diffuse, metallic, roughness, occlusion and normal maps.\n\nWe'll also provide its {{#crossLink \"Scene\"}}{{/crossLink}}'s {{#crossLink \"Lights\"}}{{/crossLink}} with\n{{#crossLink \"DirLight\"}}DirLights{{/crossLink}}, plus {{#crossLink \"CubeTexture\"}}CubeTextures{{/crossLink}} for light\nand reflection maps.\n\nNote that in this example we're providing separate {{#crossLink \"Texture\"}}Textures{{/crossLink}} for the {{#crossLink \"MetallicMaterial/metallic:property\"}}{{/crossLink}} and {{#crossLink \"MetallicMaterial/roughness:property\"}}{{/crossLink}}\nchannels, which allows us a little creative flexibility. Then, in the next example further down, we'll combine those channels\nwithin the same {{#crossLink \"Texture\"}}{{/crossLink}} for efficiency.\n\n````javascript\nvar hydrant = new xeogl.Entity({\n\n   geometry: new xeogl.OBJGeometry({\n       src: \"models/obj/FireHydrantMesh.obj\"\n   }),\n\n   material: new xeogl.MetallicMaterial({\n\n       // Channels with default values, just to show them\n\n       baseColor: [1.0, 1.0, 1.0],\n       metallic: 1.0,\n       roughness: 1.0,\n       emissive: [0.0, 0.0, 0.0],\n       alpha: 1.0,\n\n       // Textures to multiply by some of the channels\n\n       baseColorMap : new xeogl.Texture({  // Multiplies by baseColor\n           src: \"textures/diffuse/fire_hydrant_Base_Color.png\"\n       }),\n\n       metallicMap : new xeogl.Texture({   // R component multiplies by metallic\n           src: \"textures/metallic/fire_hydrant_Metallic.png\"\n       }),\n\n       roughnessMap : new xeogl.Texture({  // R component multiplies by roughness\n           src: \"textures/roughness/fire_hydrant_Roughness.png\"\n       }),\n\n       occlusionMap : new xeogl.Texture({  // Multiplies by fragment alpha\n           src: \"textures/occlusion/fire_hydrant_Mixed_AO.png\"\n       }),\n\n       normalMap : new xeogl.Texture({\n           src: \"textures/normal/fire_hydrant_Normal_OpenGL.png\"\n       })\n   })\n});\n\nvar scene = hydrant.scene;\n\nscene.lights.lights = [\n    new xeogl.DirLight({\n        dir: [0.8, -0.6, -0.8],\n        color: [0.8, 0.8, 0.8],\n        space: \"view\"\n    }),\n    new xeogl.DirLight({\n        dir: [-0.8, -0.4, -0.4],\n        color: [0.4, 0.4, 0.5],\n        space: \"view\"\n    }),\n    new xeogl.DirLight({\n        dir: [0.2, -0.8, 0.8],\n        color: [0.8, 0.8, 0.8],\n        space: \"view\"\n    }\n];\n\nscene.lights.lightMap = new xeogl.CubeTexture({\n    src: [\n        \"textures/light/Uffizi_Gallery/Uffizi_Gallery_Irradiance_PX.png\",\n        \"textures/light/Uffizi_Gallery/Uffizi_Gallery_Irradiance_NX.png\",\n        \"textures/light/Uffizi_Gallery/Uffizi_Gallery_Irradiance_PY.png\",\n        \"textures/light/Uffizi_Gallery/Uffizi_Gallery_Irradiance_NY.png\",\n        \"textures/light/Uffizi_Gallery/Uffizi_Gallery_Irradiance_PZ.png\",\n        \"textures/light/Uffizi_Gallery/Uffizi_Gallery_Irradiance_NZ.png\"\n    ]\n});\n\nscene.lights.reflectionMap = new xeogl.CubeTexture({\n    src: [\n        \"textures/reflect/Uffizi_Gallery/Uffizi_Gallery_Radiance_PX.png\",\n        \"textures/reflect/Uffizi_Gallery/Uffizi_Gallery_Radiance_NX.png\",\n        \"textures/reflect/Uffizi_Gallery/Uffizi_Gallery_Radiance_PY.png\",\n        \"textures/reflect/Uffizi_Gallery/Uffizi_Gallery_Radiance_NY.png\",\n        \"textures/reflect/Uffizi_Gallery/Uffizi_Gallery_Radiance_PZ.png\",\n        \"textures/reflect/Uffizi_Gallery/Uffizi_Gallery_Radiance_NZ.png\"\n    ]\n});\n````\n\n### Combining channels within the same textures\n\nIn the previous example we provided separate {{#crossLink \"Texture\"}}Textures{{/crossLink}} for the {{#crossLink \"MetallicMaterial/metallic:property\"}}{{/crossLink}} and\n{{#crossLink \"MetallicMaterial/roughness:property\"}}{{/crossLink}} channels, but we can combine those channels into the same {{#crossLink \"Texture\"}}{{/crossLink}} to reduce download time, memory footprint and rendering time (and also for glTF compatibility).\n\nHere's our MetallicMaterial again with those channels combined in the\n{{#crossLink \"MetallicMaterial/metallicRoughnessMap:property\"}}{{/crossLink}} {{#crossLink \"Texture\"}}Texture{{/crossLink}}, where the\n*R* component multiplies by {{#crossLink \"MetallicMaterial/metallic:property\"}}{{/crossLink}} and *G* multiplies by {{#crossLink \"MetallicMaterial/roughness:property\"}}{{/crossLink}}.\n\n````javascript\nhydrant.material = new xeogl.MetallicMaterial({\n\n   baseColor: [1,1,1], // Default value\n   metallic: 1.0,      // Default value\n   roughness: 1.0,     // Default value\n\n   baseColorMap : new xeogl.Texture({\n       src: \"textures/diffuse/fire_hydrant_Base_Color.png\"\n   }),\n   metallicRoughnessMap : new xeogl.Texture({\n       src: \"textures/metallicRoughness/fire_hydrant_MetallicRoughness.png\"\n   }),\n   occlusionMap : new xeogl.Texture({\n       src: \"textures/occlusion/fire_hydrant_Mixed_AO.png\"\n   }),\n   normalMap : new xeogl.Texture({\n       src: \"textures/normal/fire_hydrant_Normal_OpenGL.png\"\n   })\n});\n````\n\nAlthough not shown in this example, we can also texture {{#crossLink \"MetallicMaterial/alpha:property\"}}{{/crossLink}} with\nthe *A* component of {{#crossLink \"MetallicMaterial/baseColorMap:property\"}}{{/crossLink}}'s {{#crossLink \"Texture\"}}{{/crossLink}},\nif required.\n\n## Transparency\n\n### Alpha Blending\n\nLet's make our hydrant transparent.\n\nWe'll update its MetallicMaterial's {{#crossLink \"MetallicMaterial/alpha:property\"}}{{/crossLink}}\nand {{#crossLink \"MetallicMaterial/alphaMode:property\"}}{{/crossLink}}, causing it to blend 50% with the background:\n\n````javascript\nhydrant.material.alpha = 0.5;\nhydrant.material.alphaMode = \"blend\";\n````\n\n<img src=\"../../../assets/images/screenshots/MetallicMaterial/alphaBlend.png\"></img>\n\n### Alpha Masking\n\nLet's apply an alpha mask to our hydrant.\n\nWe'll give its MetallicMaterial an {{#crossLink \"MetallicMaterial/alphaMap:property\"}}{{/crossLink}}\nand configure {{#crossLink \"MetallicMaterial/alpha:property\"}}{{/crossLink}}, {{#crossLink \"MetallicMaterial/alphaMode:property\"}}{{/crossLink}},\nand {{#crossLink \"MetallicMaterial/alphaCutoff:property\"}}{{/crossLink}} to treat it as an alpha mask:\n\n````javascript\nhydrant.material.alphaMap = new xeogl.Texture({\n       src: \"textures/diffuse/crossGridColorMap.jpg\"\n   });\n\nhydrant.material.alpha = 1.0;\nhydrant.material.alphaMode = \"mask\";\nhydrant.material.alphaCutoff = 0.2;\n````\n\n<img src=\"../../../assets/images/screenshots/MetallicMaterial/alphaMask.png\"></img>",
            "submodule": "materials",
            "is_constructor": 1,
            "extends": "Material",
            "params": [
                {
                    "name": "scene",
                    "description": "Parent {{#crossLink \"Scene\"}}Scene{{/crossLink}}, creates this MetallicMaterial within the\ndefault {{#crossLink \"Scene\"}}Scene{{/crossLink}} when omitted.",
                    "type": "Scene",
                    "optional": true
                },
                {
                    "name": "cfg",
                    "description": "The MetallicMaterial configuration.",
                    "type": "*",
                    "optional": true,
                    "props": [
                        {
                            "name": "id",
                            "description": "Optional ID, unique among all components in the parent {{#crossLink \"Scene\"}}Scene{{/crossLink}}, generated automatically when omitted.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "meta",
                            "description": "Metadata to attach to this material.",
                            "type": "String:Object",
                            "optional": true,
                            "optdefault": "null"
                        },
                        {
                            "name": "baseColor",
                            "description": "RGB diffuse color of this MetallicMaterial. Multiplies by the RGB\ncomponents of {{#crossLink \"MetallicMaterial/baseColorMap:property\"}}{{/crossLink}}.",
                            "type": "Float32Array",
                            "optional": true,
                            "optdefault": "[1,1,1]"
                        },
                        {
                            "name": "metallic",
                            "description": "Factor in the range 0..1 indicating how metallic this MetallicMaterial is.\n1 is metal, 0 is non-metal. Multiplies by the *R* component of {{#crossLink \"MetallicMaterial/metallicMap:property\"}}{{/crossLink}} and the *A* component of\n{{#crossLink \"MetallicMaterial/metalRoughnessMap:property\"}}{{/crossLink}}.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "1.0"
                        },
                        {
                            "name": "roughness",
                            "description": "Factor in the range 0..1 indicating the roughness of this MetallicMaterial.\n0 is fully smooth, 1 is fully rough. Multiplies by the *R* component of {{#crossLink \"MetallicMaterial/roughnessMap:property\"}}{{/crossLink}}.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "1.0"
                        },
                        {
                            "name": "specularF0",
                            "description": "Factor in the range 0..1 indicating specular Fresnel.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "0.0"
                        },
                        {
                            "name": "emissive",
                            "description": "RGB emissive color of this MetallicMaterial. Multiplies by the RGB\ncomponents of {{#crossLink \"MetallicMaterial/emissiveMap:property\"}}{{/crossLink}}.",
                            "type": "Float32Array",
                            "optional": true,
                            "optdefault": "[0,0,0]"
                        },
                        {
                            "name": "alpha",
                            "description": "Factor in the range 0..1 indicating the alpha of this MetallicMaterial.\nMultiplies by the *R* component of {{#crossLink \"MetallicMaterial/alphaMap:property\"}}{{/crossLink}} and the *A* component,\nif present, of {{#crossLink \"MetallicMaterial/baseColorMap:property\"}}{{/crossLink}}. The value of\n{{#crossLink \"MetallicMaterial/alphaMode:property\"}}{{/crossLink}} indicates how alpha is interpreted when rendering.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "1.0"
                        },
                        {
                            "name": "baseColorMap",
                            "description": "RGBA {{#crossLink \"Texture\"}}{{/crossLink}} containing the diffuse color\nof this MetallicMaterial, with optional *A* component for alpha. The RGB components multiply by the\n{{#crossLink \"MetallicMaterial/baseColor:property\"}}{{/crossLink}} property,\nwhile the *A* component, if present, multiplies by the {{#crossLink \"MetallicMaterial/alpha:property\"}}{{/crossLink}} property.",
                            "type": "Texture",
                            "optional": true,
                            "optdefault": "undefined"
                        },
                        {
                            "name": "alphaMap",
                            "description": "RGB {{#crossLink \"Texture\"}}{{/crossLink}} containing this MetallicMaterial's\nalpha in its *R* component. The *R* component multiplies by the {{#crossLink \"MetallicMaterial/alpha:property\"}}{{/crossLink}} property. Must\nbe within the same {{#crossLink \"Scene\"}}Scene{{/crossLink}} as this MetallicMaterial.",
                            "type": "Texture",
                            "optional": true,
                            "optdefault": "undefined"
                        },
                        {
                            "name": "metallicMap",
                            "description": "RGB {{#crossLink \"Texture\"}}{{/crossLink}} containing this MetallicMaterial's\nmetallic factor in its *R* component. The *R* component multiplies by the\n{{#crossLink \"MetallicMaterial/metallic:property\"}}{{/crossLink}} property. Must be within the same\n{{#crossLink \"Scene\"}}Scene{{/crossLink}} as this MetallicMaterial.",
                            "type": "Texture",
                            "optional": true,
                            "optdefault": "undefined"
                        },
                        {
                            "name": "roughnessMap",
                            "description": "RGB {{#crossLink \"Texture\"}}{{/crossLink}} containing this MetallicMaterial's\nroughness factor in its *R* component. The *R* component multiplies by the\n{{#crossLink \"MetallicMaterial/roughness:property\"}}{{/crossLink}} property. Must be within the same\n{{#crossLink \"Scene\"}}Scene{{/crossLink}} as this MetallicMaterial.",
                            "type": "Texture",
                            "optional": true,
                            "optdefault": "undefined"
                        },
                        {
                            "name": "metallicRoughnessMap",
                            "description": "RGB {{#crossLink \"Texture\"}}{{/crossLink}} containing this\nMetallicMaterial's metalness in its *R* component and roughness in its *G* component. Its *R* component multiplies by the\n{{#crossLink \"MetallicMaterial/metallic:property\"}}{{/crossLink}} property, while its *G* component multiplies by the\n{{#crossLink \"MetallicMaterial/roughness:property\"}}{{/crossLink}} property. Must be within the same\n{{#crossLink \"Scene\"}}Scene{{/crossLink}} as this MetallicMaterial.",
                            "type": "Texture",
                            "optional": true,
                            "optdefault": "undefined"
                        },
                        {
                            "name": "emissiveMap",
                            "description": "RGB {{#crossLink \"Texture\"}}{{/crossLink}} containing the emissive color of this\nMetallicMaterial. Multiplies by the {{#crossLink \"MetallicMaterial/emissive:property\"}}{{/crossLink}} property.\nMust be within the same {{#crossLink \"Scene\"}}Scene{{/crossLink}} as this MetallicMaterial.",
                            "type": "Texture",
                            "optional": true,
                            "optdefault": "undefined"
                        },
                        {
                            "name": "occlusionMap",
                            "description": "RGB ambient occlusion {{#crossLink \"Texture\"}}{{/crossLink}}. Within shaders,\nmultiplies by the specular and diffuse light reflected by surfaces. Must be within the same {{#crossLink \"Scene\"}}{{/crossLink}}\nas this MetallicMaterial.",
                            "type": "Texture",
                            "optional": true,
                            "optdefault": "undefined"
                        },
                        {
                            "name": "normalMap",
                            "description": "RGB tangent-space normal {{#crossLink \"Texture\"}}{{/crossLink}}. Must be\nwithin the same {{#crossLink \"Scene\"}}Scene{{/crossLink}} as this MetallicMaterial.",
                            "type": "Texture",
                            "optional": true,
                            "optdefault": "undefined"
                        },
                        {
                            "name": "alphaMode",
                            "description": "The alpha blend mode, which specifies how alpha is to be interpreted. Accepted\nvalues are \"opaque\", \"blend\" and \"mask\". See the {{#crossLink \"MetallicMaterial/alphaMode:property\"}}{{/crossLink}} property for more info.",
                            "type": "String",
                            "optional": true,
                            "optdefault": "\"opaque\""
                        },
                        {
                            "name": "alphaCutoff",
                            "description": "The alpha cutoff value.\nSee the {{#crossLink \"MetallicMaterial/alphaCutoff:property\"}}{{/crossLink}} property for more info.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "0.5"
                        },
                        {
                            "name": "backfaces",
                            "description": "Whether to render {{#crossLink \"Geometry\"}}Geometry{{/crossLink}} backfaces.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "frontface",
                            "description": "The winding order for {{#crossLink \"Geometry\"}}Geometry{{/crossLink}} front faces - \"cw\" for clockwise, or \"ccw\" for counter-clockwise.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "\"ccw\""
                        },
                        {
                            "name": "lineWidth",
                            "description": "Scalar that controls the width of lines for {{#crossLink \"Geometry\"}}{{/crossLink}} with {{#crossLink \"Geometry/primitive:property\"}}{{/crossLink}} set to \"lines\".",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "1"
                        },
                        {
                            "name": "pointSize",
                            "description": "Scalar that controls the size of points for {{#crossLink \"Geometry\"}}{{/crossLink}} with {{#crossLink \"Geometry/primitive:property\"}}{{/crossLink}} set to \"points\".",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "1"
                        }
                    ]
                }
            ]
        },
        "OutlineMaterial": {
            "name": "OutlineMaterial",
            "shortname": "OutlineMaterial",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "xeogl",
            "namespace": "",
            "file": "src/materials/outlineMaterial.js",
            "line": 1,
            "description": "An **OutlineMaterial** is a {{#crossLink \"Material\"}}{{/crossLink}} that's applied to {{#crossLink \"Entity\"}}Entities{{/crossLink}}\nto render an outline around them.\n\nWIP",
            "submodule": "materials",
            "is_constructor": 1,
            "extends": "Material",
            "params": [
                {
                    "name": "scene",
                    "description": "Parent {{#crossLink \"Scene\"}}Scene{{/crossLink}}, creates this OutlineMaterial within the\ndefault {{#crossLink \"Scene\"}}Scene{{/crossLink}} when omitted",
                    "type": "Scene",
                    "optional": true
                },
                {
                    "name": "cfg",
                    "description": "The OutlineMaterial configuration",
                    "type": "*",
                    "optional": true,
                    "props": [
                        {
                            "name": "id",
                            "description": "Optional ID, unique among all components in the parent {{#crossLink \"Scene\"}}Scene{{/crossLink}}, generated automatically when omitted.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "meta",
                            "description": "Metadata to attach to this OutlineMaterial.",
                            "type": "String:Object",
                            "optional": true,
                            "optdefault": "null"
                        },
                        {
                            "name": "color",
                            "description": "Outline RGB color.",
                            "type": "Array of Number",
                            "optional": true,
                            "optdefault": "[1.0,0.2,0.2]"
                        },
                        {
                            "name": "alpha",
                            "description": "Outline opacity. A value of 0.0 indicates fully transparent, 1.0 is fully opaque.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "1.0"
                        },
                        {
                            "name": "width",
                            "description": "Outline width, in pixels.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "4"
                        }
                    ]
                }
            ]
        },
        "PhongMaterial": {
            "name": "PhongMaterial",
            "shortname": "PhongMaterial",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "xeogl",
            "namespace": "",
            "file": "src/materials/phongMaterial.js",
            "line": 1,
            "description": "A **PhongMaterial** is a {{#crossLink \"Material\"}}{{/crossLink}} that defines the surface appearance of\nattached {{#crossLink \"Entity\"}}Entities{{/crossLink}} using\nthe classic <a href=\"https://en.wikipedia.org/wiki/Blinn%E2%80%93Phong_shading_model\">Blinn-Phong</a> lighting model.\n\n## Examples\n\n| <a href=\"../../examples/#materials_phong_textures\"><img src=\"../../assets/images/screenshots/PhongMaterial/textures.png\"></img></a> | <a href=\"../../examples/#materials_phong_textures_video\"><img src=\"../../assets/images/screenshots/PhongMaterial/videoTexture.png\"></img></a> | <a href=\"../../examples/#materials_phong_fresnel\"><img src=\"../../assets/images/screenshots/PhongMaterial/fresnel.png\"></img></a> |\n|:------:|:----:|:-----:|:-----:|\n|[Phong textures](../../examples/#materials_phong_textures)|[Video texture](../../examples/#materials_phong_textures_video)| [Fresnels](../../examples/#materials_phong_fresnel)|\n\n## Overview\n\n* Used for rendering non-realistic objects such as \"helpers\", wireframe objects, labels etc.\n* Use the physically-based {{#crossLink \"MetallicMaterial\"}}{{/crossLink}} or {{#crossLink \"SpecularMaterial\"}}{{/crossLink}} when more realism is required.\n\n<img src=\"../../../assets/images/PhongMaterial.png\"></img>\n\nThe following table summarizes PhongMaterial properties:\n\n| Property | Type | Range | Default Value | Space | Description |\n|:--------:|:----:|:-----:|:-------------:|:-----:|:-----------:|\n|  {{#crossLink \"PhongMaterial/ambient:property\"}}{{/crossLink}} | Array | [0, 1] for all components | [1,1,1,1] | linear | The RGB components of the ambient light reflected by the material. |\n|  {{#crossLink \"PhongMaterial/diffuse:property\"}}{{/crossLink}} | Array | [0, 1] for all components | [1,1,1,1] | linear | The RGB components of the diffuse light reflected by the material. |\n|  {{#crossLink \"PhongMaterial/specular:property\"}}{{/crossLink}} | Array | [0, 1] for all components | [1,1,1,1] | linear | The RGB components of the specular light reflected by the material. |\n|  {{#crossLink \"PhongMaterial/emissive:property\"}}{{/crossLink}} | Array | [0, 1] for all components | [0,0,0] | linear | The RGB components of the light emitted by the material. |\n| {{#crossLink \"PhongMaterial/alpha:property\"}}{{/crossLink}} | Number | [0, 1] | 1 | linear | The transparency of the material surface (0 fully transparent, 1 fully opaque). |\n| {{#crossLink \"PhongMaterial/shininess:property\"}}{{/crossLink}} | Number | [0, 128] | 80 | linear | Determines the size and sharpness of specular highlights. |\n| {{#crossLink \"PhongMaterial/reflectivity:property\"}}{{/crossLink}} | Number | [0, 1] | 1 | linear | Determines the amount of reflectivity. |\n| {{#crossLink \"PhongMaterial/diffuseMap:property\"}}{{/crossLink}} | {{#crossLink \"Texture\"}}{{/crossLink}} |  | null | sRGB | Texture RGB components multiplying by {{#crossLink \"PhongMaterial/diffuse:property\"}}{{/crossLink}}. If the fourth component (A) is present, it multiplies by {{#crossLink \"PhongMaterial/alpha:property\"}}{{/crossLink}}. |\n| {{#crossLink \"PhongMaterial/specularMap:property\"}}{{/crossLink}} | {{#crossLink \"Texture\"}}{{/crossLink}} |  | null | sRGB | Texture RGB components multiplying by {{#crossLink \"PhongMaterial/specular:property\"}}{{/crossLink}}. If the fourth component (A) is present, it multiplies by {{#crossLink \"PhongMaterial/alpha:property\"}}{{/crossLink}}. |\n| {{#crossLink \"PhongMaterial/emissiveMap:property\"}}{{/crossLink}} | {{#crossLink \"Texture\"}}{{/crossLink}} |  | null | linear | Texture with RGB components multiplying by {{#crossLink \"PhongMaterial/emissive:property\"}}{{/crossLink}}. |\n| {{#crossLink \"PhongMaterial/alphaMap:property\"}}{{/crossLink}} | {{#crossLink \"Texture\"}}{{/crossLink}} |  | null | linear | Texture with first component multiplying by {{#crossLink \"PhongMaterial/alpha:property\"}}{{/crossLink}}. |\n| {{#crossLink \"PhongMaterial/occlusionMap:property\"}}{{/crossLink}} | {{#crossLink \"Texture\"}}{{/crossLink}} |  | null | linear | Ambient occlusion texture multiplying by {{#crossLink \"PhongMaterial/ambient:property\"}}{{/crossLink}}, {{#crossLink \"PhongMaterial/diffuse:property\"}}{{/crossLink}} and {{#crossLink \"PhongMaterial/specular:property\"}}{{/crossLink}}. |\n| {{#crossLink \"PhongMaterial/normalMap:property\"}}{{/crossLink}} | {{#crossLink \"Texture\"}}{{/crossLink}} |  | null | linear | Tangent-space normal map. |\n| {{#crossLink \"PhongMaterial/diffuseFresnel:property\"}}{{/crossLink}} | {{#crossLink \"Fresnel\"}}{{/crossLink}} |  | null |  | Fresnel term applied to {{#crossLink \"PhongMaterial/diffuse:property\"}}{{/crossLink}}. |\n| {{#crossLink \"PhongMaterial/specularFresnel:property\"}}{{/crossLink}} | {{#crossLink \"Fresnel\"}}{{/crossLink}} |  | null |  | Fresnel term applied to {{#crossLink \"PhongMaterial/specular:property\"}}{{/crossLink}}. |\n| {{#crossLink \"PhongMaterial/emissiveFresnel:property\"}}{{/crossLink}} | {{#crossLink \"Fresnel\"}}{{/crossLink}} |  | null |  | Fresnel term applied to {{#crossLink \"PhongMaterial/emissive:property\"}}{{/crossLink}}. |\n| {{#crossLink \"PhongMaterial/reflectivityFresnel:property\"}}{{/crossLink}} | {{#crossLink \"Fresnel\"}}{{/crossLink}} |  | null |  | Fresnel term applied to {{#crossLink \"PhongMaterial/reflectivity:property\"}}{{/crossLink}}. |\n| {{#crossLink \"PhongMaterial/alphaFresnel:property\"}}{{/crossLink}} | {{#crossLink \"Fresnel\"}}{{/crossLink}} |  | null |  | Fresnel term applied to {{#crossLink \"PhongMaterial/alpha:property\"}}{{/crossLink}}. |\n| {{#crossLink \"PhongMaterial/lineWidth:property\"}}{{/crossLink}} | Number | [0..100] | 1 |  | Line width in pixels. |\n| {{#crossLink \"PhongMaterial/pointSize:property\"}}{{/crossLink}} | Number | [0..100] | 1 |  | Point size in pixels. |\n| {{#crossLink \"PhongMaterial/alphaMode:property\"}}{{/crossLink}} | String | \"opaque\", \"blend\", \"mask\" | \"blend\" |  | Alpha blend mode. |\n| {{#crossLink \"PhongMaterial/alphaCutoff:property\"}}{{/crossLink}} | Number | [0..1] | 0.5 |  | Alpha cutoff value. |\n| {{#crossLink \"PhongMaterial/backfaces:property\"}}{{/crossLink}} | Boolean |  | false |  | Whether to render {{#crossLink \"Geometry\"}}Geometry{{/crossLink}} backfaces. |\n| {{#crossLink \"PhongMaterial/frontface:property\"}}{{/crossLink}} | String | \"ccw\", \"cw\" | \"ccw\" |  | The winding order for {{#crossLink \"Geometry\"}}Geometry{{/crossLink}} frontfaces - \"cw\" for clockwise, or \"ccw\" for counter-clockwise. |\n\n## Usage\n\nIn this example we have an Entity with\n\n* a {{#crossLink \"Lights\"}}{{/crossLink}} containing an {{#crossLink \"AmbientLight\"}}{{/crossLink}} and a {{#crossLink \"DirLight\"}}{{/crossLink}},\n* a {{#crossLink \"PhongMaterial\"}}{{/crossLink}} which applies a {{#crossLink \"Texture\"}}{{/crossLink}} as a diffuse map and a specular {{#crossLink \"Fresnel\"}}{{/crossLink}}, and\n* a {{#crossLink \"TorusGeometry\"}}{{/crossLink}}.\n\n```` javascript\nvar torus = new xeogl.Entity({\n\n   lights: new xeogl.Lights({\n       lights: [\n           new xeogl.AmbientLight({\n               color: [0.7, 0.7, 0.7]\n           }),\n           new xeogl.DirLight({\n               dir: [-1, -1, -1],\n               color: [0.5, 0.7, 0.5],\n               intensity: [1.0, 1.0, 1.0],\n               space: \"view\"\n           })\n       ]\n   }),\n\n   material: new xeogl.PhongMaterial({\n       ambient: [0.3, 0.3, 0.3],\n       diffuse: [0.5, 0.5, 0.0],   // Ignored, since we have assigned a Texture to diffuseMap, below\n       diffuseMap: new xeogl.Texture({\n           src: \"diffuseMap.jpg\"\n       }),\n       specular: [1, 1, 1],\n       specularFresnel: new xeogl.Fresnel({\n           leftColor: [1.0, 1.0, 1.0],\n           rightColor: [0.0, 0.0, 0.0],\n           power: 4\n       }),\n       shininess: 80, // Default\n       alpha: 1.0 // Default\n   }),\n\n   geometry: new xeogl.TorusGeometry()\n});\n````\n\n## Transparency\n\n### Alpha Blending\n\nLet's make our torus transparent. We'll update its PhongMaterial's {{#crossLink \"PhongMaterial/alpha:property\"}}{{/crossLink}}\nand {{#crossLink \"PhongMaterial/alphaMode:property\"}}{{/crossLink}}, causing it to blend 50% with the background:\n\n````javascript\ntorus.material.alpha = 0.5;\ntorus.material.alphaMode = \"blend\";\n````\n*TODO: Screenshot*\n\n### Alpha Masking\n\nNow let's make holes in our torus instead. We'll give its PhongMaterial an {{#crossLink \"PhongMaterial/alphaMap:property\"}}{{/crossLink}}\nand configure {{#crossLink \"PhongMaterial/alpha:property\"}}{{/crossLink}}, {{#crossLink \"PhongMaterial/alphaMode:property\"}}{{/crossLink}},\nand {{#crossLink \"PhongMaterial/alphaCutoff:property\"}}{{/crossLink}} to treat it as an alpha mask:\n\n````javascript\ntorus.material.alphaMap = new xeogl.Texture({\n       src: \"textures/diffuse/crossGridColorMap.jpg\"\n   });\n\ntorus.material.alpha = 1.0;\ntorus.material.alphaMode = \"mask\";\ntorus.material.alphaCutoff = 0.2;\n````\n*TODO: Screenshot*",
            "submodule": "materials",
            "is_constructor": 1,
            "extends": "Material",
            "params": [
                {
                    "name": "scene",
                    "description": "Parent {{#crossLink \"Scene\"}}Scene{{/crossLink}}, creates this PhongMaterial within the\ndefault {{#crossLink \"Scene\"}}Scene{{/crossLink}} when omitted",
                    "type": "Scene",
                    "optional": true
                },
                {
                    "name": "cfg",
                    "description": "The PhongMaterial configuration",
                    "type": "*",
                    "optional": true,
                    "props": [
                        {
                            "name": "id",
                            "description": "Optional ID, unique among all components in the parent {{#crossLink \"Scene\"}}Scene{{/crossLink}}, generated automatically when omitted.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "meta",
                            "description": "Metadata to attach to this PhongMaterial.",
                            "type": "String:Object",
                            "optional": true,
                            "optdefault": "null"
                        },
                        {
                            "name": "ambient",
                            "description": "PhongMaterial ambient color.",
                            "type": "Array of Number",
                            "optional": true,
                            "optdefault": "[1.0, 1.0, 1.0 ]"
                        },
                        {
                            "name": "diffuse",
                            "description": "PhongMaterial diffuse color.",
                            "type": "Array of Number",
                            "optional": true,
                            "optdefault": "[ 1.0, 1.0, 1.0 ]"
                        },
                        {
                            "name": "specular",
                            "description": "PhongMaterial specular color.",
                            "type": "Array of Number",
                            "optional": true,
                            "optdefault": "[ 1.0, 1.0, 1.0 ]"
                        },
                        {
                            "name": "emissive",
                            "description": "PhongMaterial emissive color.",
                            "type": "Array of Number",
                            "optional": true,
                            "optdefault": "[ 0.0, 0.0, 0.0 ]"
                        },
                        {
                            "name": "alpha",
                            "description": "Scalar in range 0-1 that controls alpha, where 0 is completely transparent and 1 is completely opaque.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "1"
                        },
                        {
                            "name": "shininess",
                            "description": "Scalar in range 0-128 that determines the size and sharpness of specular highlights.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "80"
                        },
                        {
                            "name": "reflectivity",
                            "description": "Scalar in range 0-1 that controls how much {{#crossLink \"CubeMap\"}}CubeMap{{/crossLink}} is reflected.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "1"
                        },
                        {
                            "name": "lineWidth",
                            "description": "Scalar that controls the width of lines for {{#crossLink \"Geometry\"}}{{/crossLink}} with {{#crossLink \"Geometry/primitive:property\"}}{{/crossLink}} set to \"lines\".",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "1"
                        },
                        {
                            "name": "pointSize",
                            "description": "Scalar that controls the size of points for {{#crossLink \"Geometry\"}}{{/crossLink}} with {{#crossLink \"Geometry/primitive:property\"}}{{/crossLink}} set to \"points\".",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "1"
                        },
                        {
                            "name": "ambientMap",
                            "description": "A ambient map {{#crossLink \"Texture\"}}Texture{{/crossLink}}, which will multiply by the diffuse property. Must be within the same {{#crossLink \"Scene\"}}Scene{{/crossLink}} as this PhongMaterial.",
                            "type": "Texture",
                            "optional": true,
                            "optdefault": "null"
                        },
                        {
                            "name": "diffuseMap",
                            "description": "A diffuse map {{#crossLink \"Texture\"}}Texture{{/crossLink}}, which will override the effect of the diffuse property. Must be within the same {{#crossLink \"Scene\"}}Scene{{/crossLink}} as this PhongMaterial.",
                            "type": "Texture",
                            "optional": true,
                            "optdefault": "null"
                        },
                        {
                            "name": "specularMap",
                            "description": "A specular map {{#crossLink \"Texture\"}}Texture{{/crossLink}}, which will override the effect of the specular property. Must be within the same {{#crossLink \"Scene\"}}Scene{{/crossLink}} as this PhongMaterial.",
                            "type": "Texture",
                            "optional": true,
                            "optdefault": "null"
                        },
                        {
                            "name": "emissiveMap",
                            "description": "An emissive map {{#crossLink \"Texture\"}}Texture{{/crossLink}}, which will override the effect of the emissive property. Must be within the same {{#crossLink \"Scene\"}}Scene{{/crossLink}} as this PhongMaterial.",
                            "type": "Texture",
                            "optional": true,
                            "optdefault": "undefined"
                        },
                        {
                            "name": "normalMap",
                            "description": "A normal map {{#crossLink \"Texture\"}}Texture{{/crossLink}}. Must be within the same {{#crossLink \"Scene\"}}Scene{{/crossLink}} as this PhongMaterial.",
                            "type": "Texture",
                            "optional": true,
                            "optdefault": "undefined"
                        },
                        {
                            "name": "alphaMap",
                            "description": "An alpha map {{#crossLink \"Texture\"}}Texture{{/crossLink}}, which will override the effect of the alpha property. Must be within the same {{#crossLink \"Scene\"}}Scene{{/crossLink}} as this PhongMaterial.",
                            "type": "Texture",
                            "optional": true,
                            "optdefault": "undefined"
                        },
                        {
                            "name": "reflectivityMap",
                            "description": "A reflectivity control map {{#crossLink \"Texture\"}}Texture{{/crossLink}}, which will override the effect of the reflectivity property. Must be within the same {{#crossLink \"Scene\"}}Scene{{/crossLink}} as this PhongMaterial.",
                            "type": "Texture",
                            "optional": true,
                            "optdefault": "undefined"
                        },
                        {
                            "name": "occlusionMap",
                            "description": "An occlusion map {{#crossLink \"Texture\"}}Texture{{/crossLink}}. Must be within the same {{#crossLink \"Scene\"}}Scene{{/crossLink}} as this PhongMaterial.",
                            "type": "Texture",
                            "optional": true,
                            "optdefault": "null"
                        },
                        {
                            "name": "diffuseFresnel",
                            "description": "A diffuse {{#crossLink \"Fresnel\"}}Fresnel{{/crossLink}}. Must be within the same {{#crossLink \"Scene\"}}Scene{{/crossLink}} as this PhongMaterial.",
                            "type": "Fresnel",
                            "optional": true,
                            "optdefault": "undefined"
                        },
                        {
                            "name": "specularFresnel",
                            "description": "A specular {{#crossLink \"Fresnel\"}}Fresnel{{/crossLink}}. Must be within the same {{#crossLink \"Scene\"}}Scene{{/crossLink}} as this PhongMaterial.",
                            "type": "Fresnel",
                            "optional": true,
                            "optdefault": "undefined"
                        },
                        {
                            "name": "emissiveFresnel",
                            "description": "An emissive {{#crossLink \"Fresnel\"}}Fresnel{{/crossLink}}. Must be within the same {{#crossLink \"Scene\"}}Scene{{/crossLink}} as this PhongMaterial.",
                            "type": "Fresnel",
                            "optional": true,
                            "optdefault": "undefined"
                        },
                        {
                            "name": "alphaFresnel",
                            "description": "An alpha {{#crossLink \"Fresnel\"}}Fresnel{{/crossLink}}. Must be within the same {{#crossLink \"Scene\"}}Scene{{/crossLink}} as this PhongMaterial.",
                            "type": "Fresnel",
                            "optional": true,
                            "optdefault": "undefined"
                        },
                        {
                            "name": "reflectivityFresnel",
                            "description": "A reflectivity {{#crossLink \"Fresnel\"}}Fresnel{{/crossLink}}. Must be within the same {{#crossLink \"Scene\"}}Scene{{/crossLink}} as this PhongMaterial.",
                            "type": "Fresnel",
                            "optional": true,
                            "optdefault": "undefined"
                        },
                        {
                            "name": "alphaMode",
                            "description": "The alpha blend mode - accepted values are \"opaque\", \"blend\" and \"mask\".\nSee the {{#crossLink \"PhongMaterial/alphaMode:property\"}}{{/crossLink}} property for more info.",
                            "type": "String",
                            "optional": true,
                            "optdefault": "\"opaque\""
                        },
                        {
                            "name": "alphaCutoff",
                            "description": "The alpha cutoff value. See the {{#crossLink \"PhongMaterial/alphaCutoff:property\"}}{{/crossLink}} property for more info.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "0.5"
                        },
                        {
                            "name": "backfaces",
                            "description": "Whether to render {{#crossLink \"Geometry\"}}Geometry{{/crossLink}} backfaces.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "frontface",
                            "description": "The winding order for {{#crossLink \"Geometry\"}}Geometry{{/crossLink}} front faces - \"cw\" for clockwise, or \"ccw\" for counter-clockwise.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "\"ccw\""
                        }
                    ]
                }
            ]
        },
        "SpecularMaterial": {
            "name": "SpecularMaterial",
            "shortname": "SpecularMaterial",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "xeogl",
            "namespace": "",
            "file": "src/materials/specularMaterial.js",
            "line": 1,
            "description": "A **SpecularMaterial** is a physically-based {{#crossLink \"Material\"}}{{/crossLink}} that defines the surface appearance of\n{{#crossLink \"Entity\"}}Entities{{/crossLink}} using the *specular-glossiness* workflow.\n\n## Examples\n\n| <a href=\"../../examples/#importing_gltf_pbr_specular_telephone\"><img src=\"../../assets/images/screenshots/SpecularMaterial/telephone.png\"></img></a> | <a href=\"../../examples/#materials_specular_samples\"><img src=\"../../assets/images/screenshots/SpecularMaterial/materials.png\"></img></a> | <a href=\"../../examples/#materials_specular_textures\"><img src=\"../../assets/images/screenshots/SpecularMaterial/textures.png\"></img></a> | <a href=\"../../examples/#materials_specular_specularVsGlossiness\"><img src=\"../../assets/images/screenshots/SpecularMaterial/specVsGloss.png\"></img></a> |\n|:------:|:----:|:-----:|:-----:|\n|[glTF models with PBR materials](../../examples/#importing_gltf_pbr_specular_telephone)|[Sample materials ](../../examples/#materials_specular_samples) | [Texturing spec/gloss channels](../../examples/#materials_specular_textures) | [Specular Vs. glossiness](../../examples/#materials_specular_specularVsGlossiness) |\n\n## Overview\n\n* SpecularMaterial is usually used for insulators, such as ceramic, wood and plastic.\n* {{#crossLink \"MetallicMaterial\"}}{{/crossLink}} is usually used for conductive materials, such as metal.\n* {{#crossLink \"PhongMaterial\"}}{{/crossLink}} is usually used for non-realistic objects.\n\n<img src=\"../../../assets/images/SpecularMaterial.png\"></img>\n\nFor an introduction to PBR concepts, try these articles:\n\n* Joe Wilson's [Basic Theory of Physically-Based Rendering](https://www.marmoset.co/posts/basic-theory-of-physically-based-rendering/)\n* Jeff Russel's [Physically-based Rendering, and you can too!](https://www.marmoset.co/posts/physically-based-rendering-and-you-can-too/)\n* Sebastien Legarde's [Adapting a physically-based shading model](http://seblagarde.wordpress.com/tag/physically-based-rendering/)\n\nThe following table summarizes SpecularMaterial properties:\n\n| Property | Type | Range | Default Value | Space | Description |\n|:--------:|:----:|:-----:|:-------------:|:-----:|:-----------:|\n|  {{#crossLink \"SpecularMaterial/diffuse:property\"}}{{/crossLink}} | Array | [0, 1] for all components | [1,1,1,1] | linear | The RGB components of the diffuse color of the material. |\n|  {{#crossLink \"SpecularMaterial/specular:property\"}}{{/crossLink}} | Array | [0, 1] for all components | [1,1,1,1] | linear | The RGB components of the specular color of the material. |\n| {{#crossLink \"SpecularMaterial/glossiness:property\"}}{{/crossLink}} | Number | [0, 1] | 1 | linear | The glossiness the material. |\n| {{#crossLink \"SpecularMaterial/specularF0:property\"}}{{/crossLink}} | Number | [0, 1] | 1 | linear | The specularF0 of the material surface. |\n|  {{#crossLink \"SpecularMaterial/emissive:property\"}}{{/crossLink}} | Array | [0, 1] for all components | [0,0,0] | linear | The RGB components of the emissive color of the material. |\n| {{#crossLink \"SpecularMaterial/alpha:property\"}}{{/crossLink}} | Number | [0, 1] | 1 | linear | The transparency of the material surface (0 fully transparent, 1 fully opaque). |\n| {{#crossLink \"SpecularMaterial/diffuseMap:property\"}}{{/crossLink}} | {{#crossLink \"Texture\"}}{{/crossLink}} |  | null | sRGB | Texture RGB components multiplying by {{#crossLink \"SpecularMaterial/diffuse:property\"}}{{/crossLink}}. If the fourth component (A) is present, it multiplies by {{#crossLink \"SpecularMaterial/alpha:property\"}}{{/crossLink}}. |\n| {{#crossLink \"SpecularMaterial/specularMap:property\"}}{{/crossLink}} | {{#crossLink \"Texture\"}}{{/crossLink}} |  | null | sRGB | Texture RGB components multiplying by {{#crossLink \"SpecularMaterial/specular:property\"}}{{/crossLink}}. If the fourth component (A) is present, it multiplies by {{#crossLink \"SpecularMaterial/alpha:property\"}}{{/crossLink}}. |\n| {{#crossLink \"SpecularMaterial/glossinessMap:property\"}}{{/crossLink}} | {{#crossLink \"Texture\"}}{{/crossLink}} |  | null | linear | Texture with first component multiplying by {{#crossLink \"SpecularMaterial/glossiness:property\"}}{{/crossLink}}. |\n| {{#crossLink \"SpecularMaterial/specularGlossinessMap:property\"}}{{/crossLink}} | {{#crossLink \"Texture\"}}{{/crossLink}} |  | null | linear | Texture with first three components multiplying by {{#crossLink \"SpecularMaterial/specular:property\"}}{{/crossLink}} and fourth component multiplying by {{#crossLink \"SpecularMaterial/glossiness:property\"}}{{/crossLink}}. |\n| {{#crossLink \"SpecularMaterial/emissiveMap:property\"}}{{/crossLink}} | {{#crossLink \"Texture\"}}{{/crossLink}} |  | null | linear | Texture with RGB components multiplying by {{#crossLink \"SpecularMaterial/emissive:property\"}}{{/crossLink}}. |\n| {{#crossLink \"SpecularMaterial/alphaMap:property\"}}{{/crossLink}} | {{#crossLink \"Texture\"}}{{/crossLink}} |  | null | linear | Texture with first component multiplying by {{#crossLink \"SpecularMaterial/alpha:property\"}}{{/crossLink}}. |\n| {{#crossLink \"SpecularMaterial/occlusionMap:property\"}}{{/crossLink}} | {{#crossLink \"Texture\"}}{{/crossLink}} |  | null | linear | Ambient occlusion texture multiplying by surface's reflected diffuse and specular light. |\n| {{#crossLink \"SpecularMaterial/normalMap:property\"}}{{/crossLink}} | {{#crossLink \"Texture\"}}{{/crossLink}} |  | null | linear | Tangent-space normal map. |\n| {{#crossLink \"SpecularMaterial/alphaMode:property\"}}{{/crossLink}} | String | \"opaque\", \"blend\", \"mask\" | \"blend\" |  | Alpha blend mode. |\n| {{#crossLink \"SpecularMaterial/alphaCutoff:property\"}}{{/crossLink}} | Number | [0..1] | 0.5 |  | Alpha cutoff value. |\n| {{#crossLink \"SpecularMaterial/backfaces:property\"}}{{/crossLink}} | Boolean |  | false |  | Whether to render {{#crossLink \"Geometry\"}}Geometry{{/crossLink}} backfaces. |\n| {{#crossLink \"SpecularMaterial/frontface:property\"}}{{/crossLink}} | String | \"ccw\", \"cw\" | \"ccw\" |  | The winding order for {{#crossLink \"Geometry\"}}Geometry{{/crossLink}} frontfaces - \"cw\" for clockwise, or \"ccw\" for counter-clockwise. |\n\n## Usage\n\nIn the example below we'll create the plastered sphere shown in the [Sample Materials](../../examples/#materials_specular_textures) example (see screenshots above).\n\nHere's a closeup of the sphere we'll create:\n\n<a href=\"../../examples/#materials_specular_samples\"><img src=\"../../assets/images/screenshots/SpecularMaterial/plaster.png\"></img></a>\n\nOur plastered sphere {{#crossLink \"Entity\"}}{{/crossLink}} has:\n\n* a {{#crossLink \"SphereGeometry\"}}{{/crossLink}},\n* a SpecularMaterial with {{#crossLink \"Texture\"}}Textures{{/crossLink}} providing diffuse, glossiness, specular and normal maps.\n\nWe'll also provide its {{#crossLink \"Scene\"}}{{/crossLink}}'s {{#crossLink \"Lights\"}}{{/crossLink}} with\n{{#crossLink \"DirLight\"}}DirLights{{/crossLink}}, plus {{#crossLink \"CubeTexture\"}}CubeTextures{{/crossLink}} for light\nand reflection maps.\n\nNote that in this example we're providing separate {{#crossLink \"Texture\"}}Textures{{/crossLink}} for the {{#crossLink \"SpecularMaterial/specular:property\"}}{{/crossLink}} and {{#crossLink \"SpecularMaterial/glossiness:property\"}}{{/crossLink}}\nchannels, which allows us a little creative flexibility. Then, in the next example further down, we'll combine those channels\nwithin the same {{#crossLink \"Texture\"}}{{/crossLink}} for efficiency.\n\n````javascript\nvar plasteredSphere = new xeogl.Entity({\n\n   geometry: new xeogl.SphereGeometry({\n       center: [0,0,0],\n       radius: 1.5,\n       heightSegments: 60,\n       widthSegments: 60\n   }),\n\n   material: new xeogl.SpecularMaterial({\n\n       // Channels with default values, just to show them\n\n       diffuse: [1.0, 1.0, 1.0],\n       specular: [1.0, 1.0, 1.0],\n       glossiness: 1.0,\n       emissive: [0.0, 0.0, 0.0]\n       alpha: 1.0,\n\n       // Textures to multiply some of the channels\n\n       diffuseMap: {       // RGB components multiply by diffuse\n           src: \"textures/materials/poligon/Plaster07_1k/Plaster07_COL_VAR1_1K.jpg\"\n       },\n       specularMap: {      // RGB component multiplies by specular\n           src: \"textures/materials/poligon/Plaster07_1k/Plaster07_REFL_1K.jpg\"\n       },\n       glossinessMap: {    // R component multiplies by glossiness\n           src: \"textures/materials/poligon/Plaster07_1k/Plaster07_GLOSS_1K.jpg\"\n       },\n       normalMap: {\n           src: \"textures/materials/poligon/Plaster07_1k/Plaster07_NRM_1K.jpg\"\n       }\n   })\n});\n\nvar scene = plasteredSphere.scene;\n\nscene.lights.lights = [\n    new xeogl.DirLight({\n        dir: [0.8, -0.6, -0.8],\n        color: [0.8, 0.8, 0.8],\n        space: \"view\"\n    }),\n    new xeogl.DirLight({\n        dir: [-0.8, -0.4, -0.4],\n        color: [0.4, 0.4, 0.5],\n        space: \"view\"\n    }),\n    new xeogl.DirLight({\n        dir: [0.2, -0.8, 0.8],\n        color: [0.8, 0.8, 0.8],\n        space: \"view\"\n    }\n];\n\nscene.lights.lightMap = new xeogl.CubeTexture({\n    src: [\n        \"textures/light/Uffizi_Gallery/Uffizi_Gallery_Irradiance_PX.png\",\n        \"textures/light/Uffizi_Gallery/Uffizi_Gallery_Irradiance_NX.png\",\n        \"textures/light/Uffizi_Gallery/Uffizi_Gallery_Irradiance_PY.png\",\n        \"textures/light/Uffizi_Gallery/Uffizi_Gallery_Irradiance_NY.png\",\n        \"textures/light/Uffizi_Gallery/Uffizi_Gallery_Irradiance_PZ.png\",\n        \"textures/light/Uffizi_Gallery/Uffizi_Gallery_Irradiance_NZ.png\"\n    ]\n});\n\nscene.lights.reflectionMap = new xeogl.CubeTexture({\n    src: [\n        \"textures/reflect/Uffizi_Gallery/Uffizi_Gallery_Radiance_PX.png\",\n        \"textures/reflect/Uffizi_Gallery/Uffizi_Gallery_Radiance_NX.png\",\n        \"textures/reflect/Uffizi_Gallery/Uffizi_Gallery_Radiance_PY.png\",\n        \"textures/reflect/Uffizi_Gallery/Uffizi_Gallery_Radiance_NY.png\",\n        \"textures/reflect/Uffizi_Gallery/Uffizi_Gallery_Radiance_PZ.png\",\n        \"textures/reflect/Uffizi_Gallery/Uffizi_Gallery_Radiance_NZ.png\"\n    ]\n});\n````\n\n### Combining channels within the same textures\n\nIn the previous example we provided separate {{#crossLink \"Texture\"}}Textures{{/crossLink}} for the {{#crossLink \"SpecularMaterial/specular:property\"}}{{/crossLink}} and\n{{#crossLink \"SpecularMaterial/glossiness:property\"}}{{/crossLink}} channels, but we can combine those channels into the same {{#crossLink \"Texture\"}}{{/crossLink}} to reduce download time, memory footprint and rendering time (and also for glTF compatibility).\n\nHere's our SpecularMaterial again with those channels combined in the\n{{#crossLink \"SpecularMaterial/specularGlossinessMap:property\"}}{{/crossLink}} {{#crossLink \"Texture\"}}Texture{{/crossLink}}, where the\n*RGB* component multiplies by {{#crossLink \"SpecularMaterial/specular:property\"}}{{/crossLink}} and *A* multiplies by {{#crossLink \"SpecularMaterial/glossiness:property\"}}{{/crossLink}}.\n\n````javascript\nplasteredSphere.material = new xeogl.SpecularMaterial({\n\n   // Default values\n   diffuse: [1.0, 1.0, 1.0],\n   specular: [1.0, 1.0, 1.0],\n   glossiness: 1.0,\n   emissive: [0.0, 0.0, 0.0]\n   alpha: 1.0,\n\n   diffuseMap: {\n       src: \"textures/materials/poligon/Plaster07_1k/Plaster07_COL_VAR1_1K.jpg\"\n   },\n   specularGlossinessMap: { // RGB multiplies by specular, A by glossiness\n       src: \"textures/materials/poligon/Plaster07_1k/Plaster07_REFL_GLOSS_1K.jpg\"\n   },\n   normalMap: {\n       src: \"textures/materials/poligon/Plaster07_1k/Plaster07_NRM_1K.jpg\"\n   }\n});\n````\n\nAlthough not shown in this example, we can also texture {{#crossLink \"SpecularMaterial/alpha:property\"}}{{/crossLink}} with\nthe *A* component of {{#crossLink \"SpecularMaterial/diffuseMap:property\"}}{{/crossLink}}'s {{#crossLink \"Texture\"}}{{/crossLink}},\nif required.\n\n## Transparency\n\n### Alpha Blending\n\nLet's make our plastered sphere transparent. We'll update its SpecularMaterial's {{#crossLink \"SpecularMaterial/alpha:property\"}}{{/crossLink}}\nand {{#crossLink \"SpecularMaterial/alphaMode:property\"}}{{/crossLink}}, causing it to blend 50% with the background:\n\n````javascript\nplasteredSphere.material.alpha = 0.5;\nplasteredSphere.material.alphaMode = \"blend\";\n````\n\n*TODO: Screenshot*\n\n### Alpha Masking\n\nNow let's make holes in our plastered sphere. We'll give its SpecularMaterial an {{#crossLink \"SpecularMaterial/alphaMap:property\"}}{{/crossLink}}\nand configure {{#crossLink \"SpecularMaterial/alpha:property\"}}{{/crossLink}}, {{#crossLink \"SpecularMaterial/alphaMode:property\"}}{{/crossLink}},\nand {{#crossLink \"SpecularMaterial/alphaCutoff:property\"}}{{/crossLink}} to treat it as an alpha mask:\n\n````javascript\nplasteredSphere.material.alphaMap = new xeogl.Texture({\n    src: \"textures/diffuse/crossGridColorMap.jpg\"\n});\n\nplasteredSphere.material.alpha = 1.0;\nplasteredSphere.material.alphaMode = \"mask\";\nplasteredSphere.material.alphaCutoff = 0.2;\n````\n\n*TODO: Screenshot*",
            "submodule": "materials",
            "is_constructor": 1,
            "extends": "Material",
            "params": [
                {
                    "name": "scene",
                    "description": "Parent {{#crossLink \"Scene\"}}Scene{{/crossLink}}, creates this SpecularMaterial within the\ndefault {{#crossLink \"Scene\"}}Scene{{/crossLink}} when omitted",
                    "type": "Scene",
                    "optional": true
                },
                {
                    "name": "cfg",
                    "description": "The SpecularMaterial configuration",
                    "type": "*",
                    "optional": true,
                    "props": [
                        {
                            "name": "id",
                            "description": "Optional ID, unique among all components in the parent {{#crossLink \"Scene\"}}Scene{{/crossLink}}, generated automatically when omitted.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "meta",
                            "description": "Metadata to attach to this SpecularMaterial.",
                            "type": "String:Object",
                            "optional": true,
                            "optdefault": "null"
                        },
                        {
                            "name": "diffuse",
                            "description": "RGB diffuse color of this SpecularMaterial. Multiplies by the RGB\ncomponents of {{#crossLink \"SpecularMaterial/diffuseMap:property\"}}{{/crossLink}}.",
                            "type": "Float32Array",
                            "optional": true,
                            "optdefault": "[1,1,1]"
                        },
                        {
                            "name": "diffuseMap",
                            "description": "RGBA {{#crossLink \"Texture\"}}{{/crossLink}} containing the diffuse color\nof this SpecularMaterial, with optional *A* component for alpha. The RGB components multiply by the\n{{#crossLink \"SpecularMaterial/diffuse:property\"}}{{/crossLink}} property,\nwhile the *A* component, if present, multiplies by the {{#crossLink \"SpecularMaterial/alpha:property\"}}{{/crossLink}} property.",
                            "type": "Texture",
                            "optional": true,
                            "optdefault": "undefined"
                        },
                        {
                            "name": "specular",
                            "description": "RGB specular color of this SpecularMaterial. Multiplies by the\n{{#crossLink \"SpecularMaterial/specularMap:property\"}}{{/crossLink}} and the *RGB* components of\n{{#crossLink \"SpecularMaterial/specularGlossinessMap:property\"}}{{/crossLink}}.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "[1,1,1]"
                        },
                        {
                            "name": "specularMap",
                            "description": "RGB texture containing the specular color of this SpecularMaterial. Multiplies\nby the {{#crossLink \"SpecularMaterial/specular:property\"}}{{/crossLink}} property. Must be within the same {{#crossLink \"Scene\"}}Scene{{/crossLink}} as this SpecularMaterial.",
                            "type": "Texture",
                            "optional": true,
                            "optdefault": "undefined"
                        },
                        {
                            "name": "glossiness",
                            "description": "indicating how glossy this SpecularMaterial is. 0 is\nno glossiness, 1 is full glossiness. Multiplies by the *R* component of {{#crossLink \"SpecularMaterial/glossinessMap:property\"}}{{/crossLink}}\nand the *A* component of {{#crossLink \"SpecularMaterial/specularGlossinessMap:property\"}}{{/crossLink}}.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "1.0]  Factor in the range [0..1"
                        },
                        {
                            "name": "specularGlossinessMap",
                            "description": "RGBA {{#crossLink \"Texture\"}}{{/crossLink}} containing this\nSpecularMaterial's specular color in its *RGB* component and glossiness in its *A* component. Its *RGB* components multiply by the\n{{#crossLink \"SpecularMaterial/specular:property\"}}{{/crossLink}} property, while its *A* component multiplies by the\n{{#crossLink \"SpecularMaterial/glossiness:property\"}}{{/crossLink}} property. Must be within the same\n{{#crossLink \"Scene\"}}Scene{{/crossLink}} as this SpecularMaterial.",
                            "type": "Texture",
                            "optional": true,
                            "optdefault": "undefined"
                        },
                        {
                            "name": "specularF0",
                            "description": "Factor in the range 0..1 indicating how reflective this SpecularMaterial is.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "0.0"
                        },
                        {
                            "name": "emissive",
                            "description": "RGB emissive color of this SpecularMaterial. Multiplies by the RGB\ncomponents of {{#crossLink \"SpecularMaterial/emissiveMap:property\"}}{{/crossLink}}.",
                            "type": "Float32Array",
                            "optional": true,
                            "optdefault": "[0,0,0]"
                        },
                        {
                            "name": "emissiveMap",
                            "description": "RGB {{#crossLink \"Texture\"}}{{/crossLink}} containing the emissive color of this\nSpecularMaterial. Multiplies by the {{#crossLink \"SpecularMaterial/emissive:property\"}}{{/crossLink}} property.\nMust be within the same {{#crossLink \"Scene\"}}Scene{{/crossLink}} as this SpecularMaterial.",
                            "type": "Texture",
                            "optional": true,
                            "optdefault": "undefined"
                        },
                        {
                            "name": "occlusionMap",
                            "description": "RGB ambient occlusion {{#crossLink \"Texture\"}}{{/crossLink}}. Within shaders,\nmultiplies by the specular and diffuse light reflected by surfaces. Must be within the same {{#crossLink \"Scene\"}}{{/crossLink}}\nas this SpecularMaterial.",
                            "type": "Texture",
                            "optional": true,
                            "optdefault": "undefined"
                        },
                        {
                            "name": "normalMap",
                            "description": "RGB tangent-space normal {{#crossLink \"Texture\"}}{{/crossLink}}. Must be\nwithin the same {{#crossLink \"Scene\"}}Scene{{/crossLink}} as this SpecularMaterial.",
                            "type": "Texture",
                            "optional": true,
                            "optdefault": "undefined"
                        },
                        {
                            "name": "alpha",
                            "description": "Factor in the range 0..1 indicating how transparent this SpecularMaterial is.\nA value of 0.0 indicates fully transparent, 1.0 is fully opaque. Multiplies by the *R* component of\n{{#crossLink \"SpecularMaterial/alphaMap:property\"}}{{/crossLink}} and the *A* component, if present, of\n{{#crossLink \"SpecularMaterial/diffuseMap:property\"}}{{/crossLink}}.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "1.0"
                        },
                        {
                            "name": "alphaMap",
                            "description": "RGB {{#crossLink \"Texture\"}}{{/crossLink}} containing this SpecularMaterial's\nalpha in its *R* component. The *R* component multiplies by the {{#crossLink \"SpecularMaterial/alpha:property\"}}{{/crossLink}} property. Must\nbe within the same {{#crossLink \"Scene\"}}Scene{{/crossLink}} as this SpecularMaterial.",
                            "type": "Texture",
                            "optional": true,
                            "optdefault": "undefined"
                        },
                        {
                            "name": "alphaMode",
                            "description": "The alpha blend mode - accepted values are \"opaque\", \"blend\" and \"mask\".\nSee the {{#crossLink \"SpecularMaterial/alphaMode:property\"}}{{/crossLink}} property for more info.",
                            "type": "String",
                            "optional": true,
                            "optdefault": "\"opaque\""
                        },
                        {
                            "name": "alphaCutoff",
                            "description": "The alpha cutoff value.\nSee the {{#crossLink \"SpecularMaterial/alphaCutoff:property\"}}{{/crossLink}} property for more info.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "0.5"
                        },
                        {
                            "name": "backfaces",
                            "description": "Whether to render {{#crossLink \"Geometry\"}}Geometry{{/crossLink}} backfaces.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "frontface",
                            "description": "The winding order for {{#crossLink \"Geometry\"}}Geometry{{/crossLink}} front faces - \"cw\" for clockwise, or \"ccw\" for counter-clockwise.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "\"ccw\""
                        },
                        {
                            "name": "lineWidth",
                            "description": "Scalar that controls the width of lines for {{#crossLink \"Geometry\"}}{{/crossLink}} with {{#crossLink \"Geometry/primitive:property\"}}{{/crossLink}} set to \"lines\".",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "1"
                        },
                        {
                            "name": "pointSize",
                            "description": "Scalar that controls the size of points for {{#crossLink \"Geometry\"}}{{/crossLink}} with {{#crossLink \"Geometry/primitive:property\"}}{{/crossLink}} set to \"points\".",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "1"
                        }
                    ]
                }
            ]
        },
        "Texture": {
            "name": "Texture",
            "shortname": "Texture",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "xeogl",
            "namespace": "",
            "file": "src/materials/texture.js",
            "line": 1,
            "description": "A **Texture** specifies a texture map.\n\n## Overview\n\n* Textures are grouped within {{#crossLink \"Material\"}}Materials{{/crossLink}}, which are attached to\n{{#crossLink \"Entity\"}}Entities{{/crossLink}}.\n* To create a Texture from an image file, set the Texture's {{#crossLink \"Texture/src:property\"}}{{/crossLink}}\nproperty to the image file path.\n* To create a Texture from an HTMLImageElement, set the Texture's {{#crossLink \"Texture/image:property\"}}{{/crossLink}}\nproperty to the HTMLImageElement.\n\n## Examples\n\n* [Textures on MetallicMaterials](../../examples/#materials_metallic_textures)\n* [Textures on SpecularMaterials](../../examples/#materials_specGloss_textures)\n* [Textures on PhongMaterials](../../examples/#materials_phong_textures)\n* [Video texture](../../examples/#materials_phong_textures_video)\n\n## Usage\n\nIn this example we have an Entity with\n\n* a {{#crossLink \"PhongMaterial\"}}{{/crossLink}} which applies diffuse and specular {{#crossLink \"Texture\"}}Textures{{/crossLink}}, and\n* a {{#crossLink \"TorusGeometry\"}}{{/crossLink}}.\n\nNote that xeogl will ignore the {{#crossLink \"PhongMaterial\"}}PhongMaterial's{{/crossLink}} {{#crossLink \"PhongMaterial/diffuse:property\"}}{{/crossLink}}\nand {{#crossLink \"PhongMaterial/specular:property\"}}{{/crossLink}} properties, since we assigned {{#crossLink \"Texture\"}}Textures{{/crossLink}} to the {{#crossLink \"PhongMaterial\"}}PhongMaterial's{{/crossLink}} {{#crossLink \"PhongMaterial/diffuseMap:property\"}}{{/crossLink}} and\n{{#crossLink \"PhongMaterial/specularMap:property\"}}{{/crossLink}} properties. The {{#crossLink \"Texture\"}}Textures'{{/crossLink}} pixel\ncolors directly provide the diffuse and specular components for each fragment across the {{#crossLink \"Geometry\"}}{{/crossLink}} surface.\n\n```` javascript\nvar entity = new xeogl.Entity({\n\n   material: new xeogl.PhongMaterial({\n       ambient: [0.3, 0.3, 0.3],\n       diffuse: [0.5, 0.5, 0.0],   // Ignored, since we have assigned a Texture to diffuseMap, below\n       specular: [1.0, 1.0, 1.0],   // Ignored, since we have assigned a Texture to specularMap, below\n       diffuseMap: new xeogl.Texture({\n           src: \"diffuseMap.jpg\"\n       }),\n       specularMap: new xeogl.Fresnel({\n           src: \"diffuseMap.jpg\"\n       }),\n       shininess: 80, // Default\n       alpha: 1.0 // Default\n   }),\n\n   geometry: new xeogl.TorusGeometry()\n});\n````",
            "submodule": "materials",
            "is_constructor": 1,
            "params": [
                {
                    "name": "scene",
                    "description": "Parent {{#crossLink \"Scene\"}}Scene{{/crossLink}} - creates this Texture in the default\n{{#crossLink \"Scene\"}}Scene{{/crossLink}} when omitted.",
                    "type": "Scene",
                    "optional": true
                },
                {
                    "name": "cfg",
                    "description": "Configs",
                    "type": "*",
                    "optional": true,
                    "props": [
                        {
                            "name": "id",
                            "description": "Optional ID for this Texture, unique among all components in the parent scene, generated automatically when omitted.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "meta",
                            "description": "Optional map of user-defined metadata to attach to this Texture.",
                            "type": "String:Object",
                            "optional": true
                        },
                        {
                            "name": "src",
                            "description": "Path to image file to load into this Texture. See the {{#crossLink \"Texture/src:property\"}}{{/crossLink}} property for more info.",
                            "type": "String",
                            "optional": true,
                            "optdefault": "null"
                        },
                        {
                            "name": "image",
                            "description": "HTML Image object to load into this Texture. See the {{#crossLink \"Texture/image:property\"}}{{/crossLink}} property for more info.",
                            "type": "HTMLImageElement",
                            "optional": true,
                            "optdefault": "null"
                        },
                        {
                            "name": "minFilter",
                            "description": "How the texture is sampled when a texel covers less than one pixel. See the {{#crossLink \"Texture/minFilter:property\"}}{{/crossLink}} property for more info.",
                            "type": "String",
                            "optional": true,
                            "optdefault": "\"linearMipmapLinear\""
                        },
                        {
                            "name": "magFilter",
                            "description": "How the texture is sampled when a texel covers more than one pixel. See the {{#crossLink \"Texture/magFilter:property\"}}{{/crossLink}} property for more info.",
                            "type": "String",
                            "optional": true,
                            "optdefault": "\"linear\""
                        },
                        {
                            "name": "wrapS",
                            "description": "Wrap parameter for texture coordinate *S*. See the {{#crossLink \"Texture/wrapS:property\"}}{{/crossLink}} property for more info.",
                            "type": "String",
                            "optional": true,
                            "optdefault": "\"repeat\""
                        },
                        {
                            "name": "wrapT",
                            "description": "Wrap parameter for texture coordinate *S*. See the {{#crossLink \"Texture/wrapT:property\"}}{{/crossLink}} property for more info.",
                            "type": "String",
                            "optional": true,
                            "optdefault": "\"repeat\""
                        },
                        {
                            "name": "flipY",
                            "description": "Flips this Texture's source data along its vertical axis when true.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "translate",
                            "description": "2D translation vector that will be added to texture's *S* and *T* coordinates.",
                            "type": "Array of Number",
                            "optional": true,
                            "optdefault": "[0,0]"
                        },
                        {
                            "name": "scale",
                            "description": "2D scaling vector that will be applied to texture's *S* and *T* coordinates.",
                            "type": "Array of Number",
                            "optional": true,
                            "optdefault": "[1,1]"
                        },
                        {
                            "name": "rotate",
                            "description": "Rotation, in degrees, that will be applied to texture's *S* and *T* coordinates.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "0"
                        },
                        {
                            "name": "encoding",
                            "description": "Encoding format.  See the {{#crossLink \"Texture/encoding:property\"}}{{/crossLink}} property for more info.",
                            "type": "String",
                            "optional": true,
                            "optdefault": "\"linear\""
                        }
                    ]
                }
            ],
            "extends": "Component"
        },
        "xeogl.math.math": {
            "name": "xeogl.math.math",
            "shortname": "math",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "xeogl",
            "submodule": "math",
            "namespace": "xeogl.math",
            "file": "src/math/math.js",
            "line": 12,
            "description": "This utility object provides math functions that are used within xeogl. These functions are also part of xeogl's\npublic API and are therefore available for you to use within your application code."
        },
        "Model": {
            "name": "Model",
            "shortname": "Model",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "xeogl",
            "namespace": "",
            "file": "src/models/model.js",
            "line": 1,
            "description": "A **Model** is a collection of {{#crossLink \"Component\"}}Components{{/crossLink}}.\n\n## Overview\n\n* A Model owns the components that are added to it, automatically destroying them when the Model is destroyed.\n* Can be attached to a {{#crossLink \"Transform\"}}{{/crossLink}} hierarchy, to transform its components as a group, within World-space.\n* Provides the collective axis-aligned World-space boundary of its components.\n\nA Model is subclassed by (at least):\n\n* {{#crossLink \"GLTFModel\"}}{{/crossLink}}, which loads its components from glTF files.\n* {{#crossLink \"OBJModel\"}}{{/crossLink}}, which loads its components from .OBJ and .MTL files.\n* {{#crossLink \"STLModel\"}}{{/crossLink}}, which loads its components from .STL files.\n* {{#crossLink \"SceneJSModel\"}}{{/crossLink}}, which loads its components from SceneJS scene definitions.\n* {{#crossLink \"BuildableModel\"}}{{/crossLink}}, which provides a fluent API for building its components.\n\n## Usage\n\n* [Adding Components](#adding-components)\n* [Removing Components](#removing-components)\n* [Finding Models in Scenes](#finding-models-in-scenes)\n* [Finding Components in Models](#finding-components-in-models)\n* [Transforming a Model](#transforming-a-model)\n* [Getting the World-space boundary of a Model](#getting-the-world-space-boundary-of-a-model)\n* [Clearing a Model](#clearing-a-model)\n* [Destroying a Model](#destroying-a-model)\n\n### Adding Components\n\nWhen adding components to a Model, it's usually easiest to just add their configuration objects and let the Model\ninternally instantiate them, as shown below.\n\nAs mentioned, a Model owns all the components added to it, destroying them when we destroy\nthe Model or call the Model's {{#crossLink \"Model/destroyAll:method\"}}{{/crossLink}} method.\n\n````javascript\nvar model = new xeogl.Model({ // Create Model in xeogl's default Scene\n    id: \"myModel\"\n});\n\nvar geometry = model.add({\n   type: \"xeogl.TorusGeometry\"\n});\n\nvar material = model.add({\n   type: \"xeogl.PhongMaterial\"\n   diffuse: [0.4, 0.4, 9.0]\n});\n\nmodel.add({\n   type: \"xeogl.Entity\",\n   geometry: geometry,\n   material: material\n});\n````\n\nAs shown below, we can also add our own component instances, supplying them either by reference or ID.\n\nNote that the components must be in the same {{#crossLink \"Scene\"}}{{/crossLink}} as the model.\n\n````javascript\n// Add by instance\nvar myEntity = new xeogl.Entity({\n   geometry: geometry,\n   material: material\n});\nmodel.add(myEntity);\n\n// Add by ID\nnew xeogl.Entity({\n   id: \"myEntity\",\n   geometry: geometry,\n   material: material\n})\nmodel.add(\"myEntity\");\n````\n\nWe can also add components all in one shot,  via the Model's constructor:\n\n````javascript\nmodel = new xeogl.Model({\n   id: \"myModel\",\n   components: [\n       {\n           type: \"xeogl.TorusGeometry\",\n           id: \"myGeometry\"\n       },\n       {\n           type: \"xeogl.PhongMaterial\",\n           id: \"myMaterial\",\n           diffuse: [0.4, 0.4, 0.9]\n       },\n       {\n           type: \"xeogl.Entity\",\n           id: \"myEntity\",\n           geometry: \"myGeometry\",\n           material: \"myMaterial\"\n       }\n   ]\n});\n````\n\n### Removing Components\n\nTo remove a component instance from a Model:\n\n````JavaScript\nmodel.remove(myEntity);\n````\n\nWe can also remove components by ID:\n\n````JavaScript\nmodel.remove(\"myEntity\");\n````\nNote that if the Component is owned by the Model, where it was created like this:\n\n````javascript\nvar myComponent = new xeogl.Rotate(myModel, {... });\n````\n\nthen even after removing it, calling {{#crossLink \"Model/destroyAll:method\"}}destroyAll{{/crossLink}} on the\nModel will still destroy the component.\n\n### Finding Models in Scenes\n\nOur Model will now be registered by ID on its Scene, so we can now find it like this:\n\n````javascript\nmodel = xeogl.scene.models[\"myModel\"];\n````\n\nThat's assuming that we've created the Model in the default xeogl Scene, which we did for these examples.\n\n### Finding Components in Models\n\nOur Model now has various components within itself, which we can find by their IDs.\n\nTo find the components grouped by their types, drop this expression into the browser's JavaScript\ndebug console (we're using Chrome here):\n\n````\nmodel.types;\n````\n\nThe result is the value of the Model's {{#crossLink \"Model/types:property\"}}types{{/crossLink}} map, which\ncontains its components, mapped to their types:\n\n<img src=\"../../../assets/images/screenshots/Model_findingComponents.png\"></img>\n\nHere we've expanded the {{#crossLink \"PhongMaterial\"}}{{/crossLink}} components, and we can see\nour {{#crossLink \"PhongMaterial\"}}{{/crossLink}}.\n\nLet's get that {{#crossLink \"PhongMaterial\"}}{{/crossLink}} from our Model's\n{{#crossLink \"Model/components:property\"}}{{/crossLink}} map and change its diffuse color:\n\n```` JavaScript\nvar material = model.components[\"myMaterial\"];\nmaterial.diffuse = [0.9, 0.4, 0.4];\n````\n\nThe Model also has an {{#crossLink \"Model/entities:property\"}}{{/crossLink}} map, in which we can find our {{#crossLink \"Entity\"}}{{/crossLink}}:\n\n<img src=\"../../../assets/images/screenshots/Model.entities.png\"></img>\n\n### Transforming a Model\n\nA Model lets us transform its Entities as a group.\n\nWe can attach a modeling {{#crossLink \"Transform\"}}{{/crossLink}} to our Model, as a either a\nconfiguration object or a component instance:\n\n```` Javascript\n// Attach transforms as a configuration object:\nmodel.transform = {\n       type: \"xeogl.Translate\",\n       xyz: [-35, 0, 0],\n       parent: {\n           type: \"xeogl.Rotate\",\n           xyz: [0, 1, 0],\n           angle: 45\n       }\n    };\n\n// Attach our own transform instances:\nmodel.transform = new xeogl.Translate({\n       xyz: [-35, 0, 0],\n       parent: new xeogl.Rotate({\n           xyz: [0, 1, 0],\n           angle: 45\n       })\n    });\n````\n\nWe can also provide the {{#crossLink \"Transform\"}}{{/crossLink}} to the Model constructor, as either configuration\nobjects or instances.\n\nHere we'll provide them as configuration objects:\n\n```` Javascript\n// Model internally instantiates our transform components:\nvar model3 = new xeogl.Model({\n       transform: {\n           type: \"xeogl.Translate\",\n           xyz: [-35, 0, 0],\n           parent: {\n               type: \"xeogl.Rotate\",\n               xyz: [0, 1, 0],\n               angle: 45\n           }\n       }\n    });\n\n````\n\nNote that, as with the components we added before, the Model will manage the lifecycles of our {{#crossLink \"Transform\"}}{{/crossLink}} components,\ndestroying them when we destroy the Model or call its {{#crossLink \"Model/destroyAll:method\"}}{{/crossLink}} method. Also, when we call {{#crossLink \"Component/destroy:method\"}}{{/crossLink}} on a Model component, the component will remove itself from the Model first.\n\n### Getting the World-space boundary of a Model\n\nGet the World-space axis-aligned boundary of a MOdel like this:\n\n```` Javascript\nmodel.on(\"boundary\", function() {\n   var aabb = model.aabb; //  [xmin, ymin,zmin,xmax,ymax, zmax]\n   //...\n});\n````\n\nWe can also subscribe to changes to that boundary, which will happen whenever\n\n* the Model's {{#crossLink \"Transform\"}}{{/crossLink}} is updated,\n* components are added or removed from the Model, or\n* the {{#crossLink \"Geometry\"}}Geometries{{/crossLink}} or {{#crossLink \"Transform\"}}Transforms{{/crossLink}} of its Entities are switched or modified.\n\n````javascript\nmodel.on(\"boundary\", function() {\n   var aabb = model.aabb; // [xmin, ymin,zmin,xmax,ymax, zmax]\n});\n````\n\n### Clearing a Model\n\n```` Javascript\nmodel.clear();\n````\n\n### Destroying a Model\n\n```` Javascript\nmodel.destroy();\n````",
            "submodule": "models",
            "is_constructor": 1,
            "params": [
                {
                    "name": "scene",
                    "description": "Parent {{#crossLink \"Scene\"}}Scene{{/crossLink}} - creates this ModelModel in the default\n{{#crossLink \"Scene\"}}Scene{{/crossLink}} when omitted.",
                    "type": "Scene",
                    "optional": true
                },
                {
                    "name": "cfg",
                    "description": "Configs",
                    "type": "*",
                    "optional": true,
                    "props": [
                        {
                            "name": "id",
                            "description": "Optional ID, unique among all components in the parent {{#crossLink \"Scene\"}}Scene{{/crossLink}},\ngenerated automatically when omitted.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "meta",
                            "description": "Optional map of user-defined metadata to attach to this ModelModel.",
                            "type": "String:Object",
                            "optional": true
                        },
                        {
                            "name": "flattenTransforms",
                            "description": "Flattens transform hierarchies to improve rendering performance.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        },
                        {
                            "name": "ghosted",
                            "description": "When true, sets all the Model's Entities initially ghosted.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "highlighted",
                            "description": "When true, sets all the Model's Entities initially highlighted.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "outlined",
                            "description": "When true, sets all the Model's Entities initially outlined.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "transform",
                            "description": "A Local-to-World-space (modelling) {{#crossLink \"Transform\"}}{{/crossLink}} to attach to this Model.\nMust be within the same {{#crossLink \"Scene\"}}{{/crossLink}} as this Model. Internally, the given\n{{#crossLink \"Transform\"}}{{/crossLink}} will be inserted above each top-most {{#crossLink \"Transform\"}}Transform{{/crossLink}}\nthat the Model attaches to its {{#crossLink \"Entity\"}}Entities{{/crossLink}}.",
                            "type": "Number|String|Transform",
                            "optional": true
                        },
                        {
                            "name": "components",
                            "description": "Array of {{#crossLink \"Components\"}}{{/crossLink}} to add initially, given as IDs, configuration objects or instances.",
                            "type": "Array",
                            "optional": true
                        }
                    ]
                }
            ],
            "extends": "Component"
        },
        "Lookat": {
            "name": "Lookat",
            "shortname": "Lookat",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "xeogl",
            "namespace": "",
            "file": "src/transforms/lookat.js",
            "line": 1,
            "description": "A **Lookat** is a {{#crossLink \"Transform\"}}{{/crossLink}} that defines a viewing transform as an {{#crossLink \"Lookat/eye:property\"}}eye{{/crossLink}} position, a\n{{#crossLink \"Lookat/look:property\"}}look{{/crossLink}} position and an {{#crossLink \"Lookat/up:property\"}}up{{/crossLink}}\nvector.",
            "submodule": "transforms",
            "is_constructor": 1,
            "params": [
                {
                    "name": "scene",
                    "description": "Parent {{#crossLink \"Scene\"}}Scene{{/crossLink}} - creates this Lookat in the default\n{{#crossLink \"Scene\"}}Scene{{/crossLink}} when omitted.",
                    "type": "Scene",
                    "optional": true
                },
                {
                    "name": "cfg",
                    "description": "Configs",
                    "type": "*",
                    "optional": true,
                    "props": [
                        {
                            "name": "id",
                            "description": "Optional ID, unique among all components in the parent scene, generated automatically when omitted.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "meta",
                            "description": "Optional map of user-defined metadata to attach to this Lookat.",
                            "type": "String:Object",
                            "optional": true
                        },
                        {
                            "name": "parent",
                            "description": "ID or instance of a parent {{#crossLink \"Transform\"}}{{/crossLink}} within the same {{#crossLink \"Scene\"}}Scene{{/crossLink}}.",
                            "type": "String|Transform",
                            "optional": true
                        },
                        {
                            "name": "eye",
                            "description": "Eye position.",
                            "type": "Array of Number",
                            "optional": true,
                            "optdefault": "[0,0,10]"
                        },
                        {
                            "name": "look",
                            "description": "The position of the point-of-interest we're looking at.",
                            "type": "Array of Number",
                            "optional": true,
                            "optdefault": "[0,0,0]"
                        },
                        {
                            "name": "up",
                            "description": "The \"up\" vector.",
                            "type": "Array of Number",
                            "optional": true,
                            "optdefault": "[0,1,0]"
                        },
                        {
                            "name": "worldAxis",
                            "description": "````.",
                            "type": "Array of Number",
                            "optional": true,
                            "optdefault": "[1, 0, 0, 0, 1, 0, 0, 0, 1]]  Indicates the up, right and forward axis of the World coordinate system. Has format: ````[rightX, rightY, rightZ, upX, upY, upZ, forwardX, forwardY, forwardZ"
                        },
                        {
                            "name": "gimbalLock",
                            "description": "Whether to lock yaw rotation to pivot about the World-space \"up\" axis.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        }
                    ]
                }
            ],
            "extends": "Transform",
            "author": "xeolabs / http://xeolabs.com/"
        },
        "Quaternion": {
            "name": "Quaternion",
            "shortname": "Quaternion",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "xeogl",
            "namespace": "",
            "file": "src/transforms/quaternion.js",
            "line": 1,
            "description": "A **Quaternion** is a {{#crossLink \"Transform\"}}{{/crossLink}} that rotates associated {{#crossLink \"Entity\"}}Entities{{/crossLink}} or {{#crossLink \"Model\"}}Models{{/crossLink}}.\n\n## Overview\n\n* Instances of {{#crossLink \"Transform\"}}{{/crossLink}} and its sub-classes may be connected into hierarchies.\n* When an {{#crossLink \"Entity\"}}{{/crossLink}} or {{#crossLink \"Model\"}}{{/crossLink}} is connected to a\nleaf {{#crossLink \"Transform\"}}{{/crossLink}} within a {{#crossLink \"Transform\"}}{{/crossLink}} hierarchy, it will be\ntransformed by each {{#crossLink \"Transform\"}}{{/crossLink}} on the path up to the root, in that order.\n\n<img src=\"../../../assets/images/Quaternion.png\"></img>\n\n## Usage\n\nIn this example we have two {{#crossLink \"Entity\"}}Entities{{/crossLink}} that are transformed by a hierarchy that contains\nQuaternion, {{#crossLink \"Translate\"}}{{/crossLink}} and {{#crossLink \"Scale\"}}{{/crossLink}} transforms.\nThe Entities share the same {{#crossLink \"BoxGeometry\"}}{{/crossLink}}.<br>\n\n````javascript\nvar quaternion = new xeogl.Quaternion({\n   xyzw: [0, 0, 0, 1], // Unit quaternion\n});\n\nvar translate1 = new xeogl.Translate({\n  parent: quaternion,\n  xyz: [-5, 0, 0] // Translate along -X axis\n});\n\nvar translate2 = new xeogl.Translate({\n  parent: quaternion,\n  xyz: [5, 0, 0] // Translate along +X axis\n});\n\nvar scale = new xeogl.Scale({\n  parent: translate2,\n  xyz: [1, 2, 1] // Scale x2 on Y axis\n});\n\nvar geometry = new xeogl.BoxGeometry();\n\nvar entity1 = new xeogl.Entity(scene, {\n  transform: translate1,\n  geometry: geometry\n});\n\nvar entity2 = new xeogl.Entity({\n  transform: scale,\n  geometry: geometry\n});\n````\n\nSince everything in xeogl is dynamically editable, we can restructure the transform hierarchy at any time.\n\nLet's insert a {{#crossLink \"Scale\"}}{{/crossLink}} between the first Translate and the first {{#crossLink \"Entity\"}}{{/crossLink}}:\n\n````javascript\nvar scale2 = new xeogl.Scale({\n  parent: translate1,\n  xyz: [1, 1, 2] // Scale x2 on Z axis\n});\n\nEntity2.transform = scale2;\n````\n\nLet's spin the Quaternion:\n\n````javascript\n// Rotate 0.2 degrees about Y-axis on each frame\nscene.on(\"tick\", function(e) {\n       quaternion.rotate([0, 1, 0, 0.2]);\n   });\n````",
            "submodule": "transforms",
            "is_constructor": 1,
            "params": [
                {
                    "name": "scene",
                    "description": "Parent {{#crossLink \"Scene\"}}Scene{{/crossLink}} - creates this Quaternion in the default\n{{#crossLink \"Scene\"}}Scene{{/crossLink}} when omitted.",
                    "type": "Scene",
                    "optional": true
                },
                {
                    "name": "cfg",
                    "description": "Configs",
                    "type": "*",
                    "optional": true,
                    "props": [
                        {
                            "name": "id",
                            "description": "Optional ID, unique among all components in the parent scene, generated automatically when omitted.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "meta",
                            "description": "Optional map of user-defined metadata to attach to this Quaternion.",
                            "type": "String:Object",
                            "optional": true
                        },
                        {
                            "name": "parent",
                            "description": "ID or instance of a parent {{#crossLink \"Transform\"}}{{/crossLink}} within the same {{#crossLink \"Scene\"}}Scene{{/crossLink}}.",
                            "type": "String|Transform",
                            "optional": true
                        },
                        {
                            "name": "xyzw",
                            "description": "The initial Quaternion elements.",
                            "type": "Array(Number)",
                            "optional": true,
                            "optdefault": "[0,0,0,1]"
                        }
                    ]
                }
            ],
            "extends": "Transform"
        },
        "Rotate": {
            "name": "Rotate",
            "shortname": "Rotate",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "xeogl",
            "namespace": "",
            "file": "src/transforms/rotate.js",
            "line": 1,
            "description": "A **Rotate** is a {{#crossLink \"Transform\"}}{{/crossLink}} that rotates associated {{#crossLink \"Entity\"}}Entities{{/crossLink}} or {{#crossLink \"Model\"}}Models{{/crossLink}} about an axis vector.\n\n## Overview\n\n* Instances of {{#crossLink \"Transform\"}}{{/crossLink}} and its sub-classes may be connected into hierarchies.\n* When an {{#crossLink \"Entity\"}}{{/crossLink}} or {{#crossLink \"Model\"}}{{/crossLink}} is connected to a leaf {{#crossLink \"Transform\"}}{{/crossLink}}\nwithin a {{#crossLink \"Transform\"}}{{/crossLink}} hierarchy, it will be transformed by each {{#crossLink \"Transform\"}}{{/crossLink}}\non the path up to the root, in that order.\n\n\n<img src=\"../../../assets/images/Rotate.png\"></img>\n\n## Examples\n\n* [Modeling transform hierarchy](../../examples/#transforms_entity_hierarchy)\n\n## Usage\n\nIn this example we have two {{#crossLink \"Entity\"}}Entities{{/crossLink}} that are transformed by a hierarchy that contains\nRotate, {{#crossLink \"Translate\"}}{{/crossLink}} and {{#crossLink \"Scale\"}}{{/crossLink}} transforms.\nThe Entities share the same {{#crossLink \"BoxGeometry\"}}{{/crossLink}}.<br>\n\n````javascript\nvar rotate = new xeogl.Rotate({\n   xyz: [0, 1, 0], // Rotate 30 degrees about Y axis\n   angle: 30\n});\n\nvar translate1 = new xeogl.Translate({\n   parent: rotate,\n   xyz: [-5, 0, 0] // Translate along -X axis\n});\n\nvar translate2 = new xeogl.Translate({\n   parent: rotate,\n   xyz: [5, 0, 0] // Translate along +X axis\n});\n\nvar scale = new xeogl.Scale({\n   parent: translate2,\n   xyz: [1, 2, 1] // Scale x2 on Y axis\n});\n\nvar geometry = new xeogl.Geometry(scene); // Defaults to a 2x2x2 box\n\nvar Entity1 = new xeogl.Entity({\n   transform: translate1,\n   geometry: geometry\n});\n\nvar Entity2 = new xeogl.Entity({\n   transform: scale,\n   geometry: geometry\n});\n````\n\nSince everything in xeogl is dynamically editable, we can restructure the transform hierarchy at any time.\n\nLet's insert a {{#crossLink \"Scale\"}}{{/crossLink}} between the first Translate and the first {{#crossLink \"Entity\"}}{{/crossLink}}:\n\n````javascript\nvar scale2 = new xeogl.Scale({\n   parent: translate1,\n   xyz: [1, 1, 2] // Scale x2 on Z axis\n});\n\nEntity2.transform = scale2;\n````\n\nLet's start spinning the {{#crossLink \"Rotate\"}}{{/crossLink}}:\n\n````javascript\n// Rotate 0.2 degrees on each frame\nscene.on(\"tick\", function(e) {\n   rotate.angle += 0.2;\n});\n````",
            "submodule": "transforms",
            "is_constructor": 1,
            "params": [
                {
                    "name": "scene",
                    "description": "Parent {{#crossLink \"Scene\"}}Scene{{/crossLink}} - creates this Rotate in the default\n{{#crossLink \"Scene\"}}Scene{{/crossLink}} when omitted.",
                    "type": "Scene",
                    "optional": true
                },
                {
                    "name": "cfg",
                    "description": "Configs",
                    "type": "*",
                    "optional": true,
                    "props": [
                        {
                            "name": "id",
                            "description": "Optional ID, unique among all components in the parent scene, generated automatically when omitted.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "meta",
                            "description": "Optional map of user-defined metadata to attach to this Rotate.",
                            "type": "String:Object",
                            "optional": true
                        },
                        {
                            "name": "parent",
                            "description": "ID or instance of a parent {{#crossLink \"Transform\"}}{{/crossLink}} within the same {{#crossLink \"Scene\"}}Scene{{/crossLink}}.",
                            "type": "String|Transform",
                            "optional": true
                        },
                        {
                            "name": "xyz",
                            "description": "Axis of rotation.",
                            "type": "Float32Array",
                            "optional": true,
                            "optdefault": "[0,1,0]"
                        },
                        {
                            "name": "angle",
                            "description": "Angle of rotation in degrees.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "0"
                        }
                    ]
                }
            ],
            "extends": "Transform"
        },
        "Scale": {
            "name": "Scale",
            "shortname": "Scale",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "xeogl",
            "namespace": "",
            "file": "src/transforms/scale.js",
            "line": 1,
            "description": "A **Scale** is a {{#crossLink \"Transform\"}}{{/crossLink}} that scales associated {{#crossLink \"Entity\"}}Entities{{/crossLink}} or {{#crossLink \"Model\"}}Models{{/crossLink}}.\n\n## Overview\n\n* Instances of {{#crossLink \"Transform\"}}{{/crossLink}} and its sub-classes may be connected into hierarchies.\n* When an {{#crossLink \"Entity\"}}{{/crossLink}} or {{#crossLink \"Model\"}}{{/crossLink}} is connected to a leaf {{#crossLink \"Transform\"}}{{/crossLink}}\nwithin a {{#crossLink \"Transform\"}}{{/crossLink}} hierarchy, it will be transformed by each {{#crossLink \"Transform\"}}{{/crossLink}}\non the path up to the root, in that order.\n\n<img src=\"../../../assets/images/Scale.png\"></img>\n\n## Examples\n\n* [Modeling transform hierarchy](../../examples/#transforms_entity_hierarchy)\n\n## Usage\n\nIn this example we have two {{#crossLink \"Entity\"}}Entities{{/crossLink}} that are transformed by a hierarchy that contains\n{{#crossLink \"Rotate\"}}{{/crossLink}}, {{#crossLink \"Translate\"}}{{/crossLink}} and Scale transforms.\nThe Entities share the same {{#crossLink \"BoxGeometry\"}}{{/crossLink}}.<br>\n\n````javascript\nvar rotate = new xeogl.Rotate({\n   xyz: [0, 1, 0], // Rotate 30 degrees about Y axis\n   angle: 30\n});\n\nvar translate1 = new xeogl.Translate({\n   parent: rotate,\n   xyz: [-5, 0, 0] // Translate along -X axis\n});\n\nvar translate2 = new xeogl.Translate({\n   parent: rotate,\n   xyz: [5, 0, 0] // Translate along +X axis\n});\n\nvar scale = new xeogl.Scale({\n   parent: translate2,\n   xyz: [1, 2, 1] // Scale x2 on Y axis\n});\n\nvar geometry = new xeogl.BoxGeometry();\n\nvar entity1 = new xeogl.Entity({\n   transform: translate1,\n   geometry: geometry\n});\n\nvar entity2 = new xeogl.Entity({\n   transform: scale,\n   geometry: geometry\n});\n````\n\nSince everything in xeogl is dynamically editable, we can restructure the transform hierarchy at any time.\n\nLet's insert a {{#crossLink \"Scale\"}}{{/crossLink}} between the first Translate and the first {{#crossLink \"Entity\"}}{{/crossLink}}:\n\n````javascript\nvar scale2 = new xeogl.Scale({\n   parent: translate1,\n   xyz: [1, 1, 2] // Scale x2 on Z axis\n});\n\nentity2.transform = scale2;\n````\n\nAnd just for fun, we'll start spinning the {{#crossLink \"Rotate\"}}{{/crossLink}}:\n\n````javascript\n// Rotate 0.2 degrees on each frame\nscene.on(\"tick\", function(e) {\n   rotate.angle += 0.2;\n});\n````",
            "submodule": "transforms",
            "is_constructor": 1,
            "params": [
                {
                    "name": "scene",
                    "description": "Parent {{#crossLink \"Scene\"}}Scene{{/crossLink}} - creates this Scale in the default\n{{#crossLink \"Scene\"}}Scene{{/crossLink}} when omitted.",
                    "type": "Scene",
                    "optional": true
                },
                {
                    "name": "cfg",
                    "description": "Configs",
                    "type": "*",
                    "optional": true,
                    "props": [
                        {
                            "name": "id",
                            "description": "Optional ID, unique among all components in the parent scene, generated automatically when omitted.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "meta",
                            "description": "Optional map of user-defined metadata to attach to this Scale.",
                            "type": "String:Object",
                            "optional": true
                        },
                        {
                            "name": "parent",
                            "description": "ID or instance of a parent {{#crossLink \"Transform\"}}{{/crossLink}} within the same {{#crossLink \"Scene\"}}Scene{{/crossLink}}.",
                            "type": "String|Transform",
                            "optional": true
                        },
                        {
                            "name": "xyz",
                            "description": "Scale factors.",
                            "type": "Float32Array",
                            "optional": true,
                            "optdefault": "[1,1,1]"
                        }
                    ]
                }
            ],
            "extends": "Transform"
        },
        "Transform": {
            "name": "Transform",
            "shortname": "Transform",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "xeogl",
            "namespace": "",
            "file": "src/transforms/transform.js",
            "line": 1,
            "description": "A **Transform** is a modelling, viewing or projection transformation.\n\n## Overview\n\n* Sub-classes of Transform include: {{#crossLink \"Translate\"}}{{/crossLink}},\n{{#crossLink \"Scale\"}}{{/crossLink}}, {{#crossLink \"Rotate\"}}{{/crossLink}}, {{#crossLink \"Quaternion\"}}{{/crossLink}},\n{{#crossLink \"Lookat\"}}{{/crossLink}}, {{#crossLink \"Perspective\"}}{{/crossLink}}, {{#crossLink \"Frustum\"}}{{/crossLink}}\nand {{#crossLink \"Ortho\"}}{{/crossLink}}.\n* Instances of {{#crossLink \"Transform\"}}{{/crossLink}} and its sub-classes may be connected into hierarchies.\n\n* When an {{#crossLink \"Entity\"}}{{/crossLink}} or {{#crossLink \"Model\"}}{{/crossLink}} is connected to a leaf {{#crossLink \"Transform\"}}{{/crossLink}}\nwithin a {{#crossLink \"Transform\"}}{{/crossLink}} hierarchy, it will be transformed by each {{#crossLink \"Transform\"}}{{/crossLink}}\non the path up to the root, in that order.\n\n<img src=\"../../../assets/images/Transform.png\"></img>\n\n## Examples\n\n* [Modelling transform hierarchy](../../examples/#transforms_entity_hierarchy)\n* [Attaching transforms to Models, via constructor](../../examples/#transforms_model_configureTransform)\n* [Attaching transforms to Models, via property](../../examples/#transforms_model_attachTransform)\n\n## Usage\n\nIn this example we'll create the table shown below, which consists of five {{#crossLink \"Entity\"}}Entities{{/crossLink}}\nthat share a {{#crossLink \"BoxGeometry\"}}{{/crossLink}} and each connect to a different leaf within a hierarchy of\n{{#crossLink \"Translate\"}}{{/crossLink}}, {{#crossLink \"Rotate\"}}{{/crossLink}} and {{#crossLink \"Scale\"}}{{/crossLink}}\ncomponents. Each {{#crossLink \"Entity\"}}{{/crossLink}} also has its own {{#crossLink \"PhongMaterial\"}}{{/crossLink}} to\ngive it a distinct color.\n\n<img src=\"../../../assets/images/transformHierarchy.png\"></img>\n\n````javascript\n// Shared Geometry\nvar boxGeometry = new xeogl.BoxGeometry();\n\n// Position of entire table\nvar tablePos = new xeogl.Translate({\n   xyz: [0, 6, 0]\n});\n\n// Orientation of entire table\nvar tableRotate = new xeogl.Rotate({\n   xyz: [1, 1, 1],\n   angle: 0,\n   parent: tablePos\n});\n\n// Red table leg\nvar tableLeg1 = new xeogl.Entity({\n   geometry: boxGeometry,\n   transform: new xeogl.Scale({\n       xyz: [1, 3, 1],\n       parent: new xeogl.Translate({\n           xyz: [-4, -6, -4],\n           parent: tableRotate\n       })\n   }),\n   material: new xeogl.PhongMaterial({\n       diffuse: [1, 0.3, 0.3]\n   })\n});\n\n// Green table leg\nvar tableLeg2 = new xeogl.Entity({\n   geometry: boxGeometry,\n   transform: new xeogl.Scale({\n       xyz: [1, 3, 1],\n       parent: new xeogl.Translate({\n           xyz: [4, -6, -4],\n           parent: tableRotate\n       })\n   }),\n   material: new xeogl.PhongMaterial({\n       diffuse: [0.3, 1.0, 0.3]\n   })\n});\n\n// Blue table leg\nvar tableLeg3 = new xeogl.Entity({\n   geometry: boxGeometry,\n   transform: new xeogl.Scale({\n       xyz: [1, 3, 1],\n       parent: new xeogl.Translate({\n           xyz: [4, -6, 4],\n           parent: tableRotate\n       })\n   }),\n   material: new xeogl.PhongMaterial({\n       diffuse: [0.3, 0.3, 1.0]\n   })\n});\n\n// Yellow table leg\nvar tableLeg4 = new xeogl.Entity({\n   geometry: boxGeometry,\n   transform: new xeogl.Scale({\n       xyz: [1, 3, 1],\n       parent: new xeogl.Translate({\n           xyz: [-4, -6, 4],\n           parent: tableRotate\n       })\n   }),\n   material: new xeogl.PhongMaterial({\n       diffuse: [1.0, 1.0, 0.0]\n   })\n});\n\n// Purple table top\nvar tableTop = new xeogl.Entity({\n   geometry: boxGeometry,\n   transform: new xeogl.Scale({\n       xyz: [6, 0.5, 6],\n       parent: new xeogl.Translate({\n           xyz: [0, -3, 0],\n           parent: tableRotate\n       })\n   }),\n   material: new xeogl.PhongMaterial({\n       diffuse: [1.0, 0.3, 1.0]\n   })\n});\n\n// Zoom camera out a bit\n// Get the Camera from one of the Entities\ntableTop.camera.view.zoom(10);\n\n// Spin the entire table\n\nvar angle = 0;\n\nscene.on(\"tick\", function () {\n   angle += 0.5;\n   tableRotate.angle = angle;\n});\n````",
            "submodule": "transforms",
            "is_constructor": 1,
            "params": [
                {
                    "name": "scene",
                    "description": "Parent {{#crossLink \"Scene\"}}Scene{{/crossLink}} - creates this Transform in the\ndefault {{#crossLink \"Scene\"}}Scene{{/crossLink}}  when omitted.",
                    "type": "Scene",
                    "optional": true
                },
                {
                    "name": "cfg",
                    "description": "Configs",
                    "type": "*",
                    "optional": true,
                    "props": [
                        {
                            "name": "id",
                            "description": "Optional ID, unique among all components in the parent {{#crossLink \"Scene\"}}Scene{{/crossLink}}, generated automatically when omitted.\nYou only need to supply an ID if you need to be able to find the Transform by ID within the {{#crossLink \"Scene\"}}Scene{{/crossLink}}.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "meta",
                            "description": "Optional map of user-defined metadata to attach to this Transform.",
                            "type": "String:Object",
                            "optional": true
                        },
                        {
                            "name": "parent",
                            "description": "ID or instance of a parent Transform within the same {{#crossLink \"Scene\"}}Scene{{/crossLink}}.",
                            "type": "String|Transform",
                            "optional": true
                        },
                        {
                            "name": "postMultiply",
                            "description": "Flag that indicates whether this Transform is post-multiplied (default) or\npre-multiplied by its {{#crossLink \"Transform/parent:property\"}}{{/crossLink}} Transform.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        },
                        {
                            "name": "matrix",
                            "description": "One-dimensional, sixteen element array of elements for the Transform, an identity matrix by default.",
                            "type": "Float32Array",
                            "optional": true,
                            "optdefault": "[1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1]"
                        }
                    ]
                }
            ],
            "extends": "Component"
        },
        "Translate": {
            "name": "Translate",
            "shortname": "Translate",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "xeogl",
            "namespace": "",
            "file": "src/transforms/translate.js",
            "line": 1,
            "description": "A **Translate** is a {{#crossLink \"Transform\"}}{{/crossLink}} that translates associated {{#crossLink \"Entity\"}}Entities{{/crossLink}} or {{#crossLink \"Model\"}}Models{{/crossLink}}.\n\n## Overview\n\n* Instances of {{#crossLink \"Transform\"}}{{/crossLink}} and its sub-classes may be connected into hierarchies.\n* When an {{#crossLink \"Entity\"}}{{/crossLink}} or {{#crossLink \"Model\"}}{{/crossLink}} is connected to a leaf {{#crossLink \"Transform\"}}{{/crossLink}}\nwithin a {{#crossLink \"Transform\"}}{{/crossLink}} hierarchy, it will be transformed by each {{#crossLink \"Transform\"}}{{/crossLink}}\non the path up to the root, in that order.\n\n<img src=\"../../../assets/images/Translate.png\"></img>\n\n## Examples\n\n* [Modeling transform hierarchy](../../examples/#transforms_entity_hierarchy)\n\n## Usage\n\nThis example has two {{#crossLink \"Entity\"}}Entities{{/crossLink}} that are transformed by a hierarchy that contains\n{{#crossLink \"Rotate\"}}{{/crossLink}}, Translate and {{#crossLink \"Scale\"}}{{/crossLink}} transforms.\nThe Entities share the same {{#crossLink \"BoxGeometry\"}}{{/crossLink}}.<br>\n\n````javascript\nvar rotate = new xeogl.Rotate({\n   xyz: [0, 1, 0], // Rotate 30 degrees about Y axis\n   angle: 30\n});\n\nvar translate1 = new xeogl.Translate({\n   parent: rotate,\n   xyz: [-5, 0, 0] // Translate along -X axis\n});\n\nvar translate2 = new xeogl.Translate({\n   parent: rotate,\n   xyz: [5, 0, 0] // Translate along +X axis\n});\n\nvar scale = new xeogl.Scale({\n   parent: translate2,\n   xyz: [1, 2, 1] // Scale x2 on Y axis\n});\n\nvar geometry = new xeogl.BoxGeometry();\n\nvar entity1 = new xeogl.Entity({\n   transform: translate1,\n   geometry: geometry\n});\n\nvar entity2 = new xeogl.Entity({\n   transform: scale,\n   geometry: geometry\n});\n````\n\nSince everything in xeogl is dynamically editable, we can restructure the transform hierarchy at any time.\n\nLet's insert a {{#crossLink \"Scale\"}}{{/crossLink}} between the first Translate and the first {{#crossLink \"Entity\"}}{{/crossLink}}:\n\n````javascript\nvar scale2 = new xeogl.Scale({\n   parent: translate1,\n   xyz: [1, 1, 2] // Scale x2 on Z axis\n});\n\nentity2.transform = scale2;\n````\n\nAnd just for fun, we'll start updating the second {{#crossLink \"Translate\"}}{{/crossLink}}:\n\n````javascript\n// Rotate 0.2 degrees on each frame\nscene.on(\"tick\", function(e) {\n   var xyz = translate2.xyz;\n   xyz[0] += 0.2;\n   translate2.xyz = xyz;\n});\n````",
            "submodule": "transforms",
            "is_constructor": 1,
            "params": [
                {
                    "name": "scene",
                    "description": "Parent {{#crossLink \"Scene\"}}Scene{{/crossLink}} - creates this Translate in the default\n{{#crossLink \"Scene\"}}Scene{{/crossLink}} when omitted.",
                    "type": "Scene",
                    "optional": true
                },
                {
                    "name": "cfg",
                    "description": "Configs",
                    "type": "*",
                    "optional": true,
                    "props": [
                        {
                            "name": "id",
                            "description": "Optional ID, unique among all components in the parent scene, generated automatically when omitted.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "meta",
                            "description": "Optional map of user-defined metadata to attach to this Translate.",
                            "type": "String:Object",
                            "optional": true
                        },
                        {
                            "name": "parent",
                            "description": "ID or instance of a parent {{#crossLink \"Transform\"}}{{/crossLink}} within the same {{#crossLink \"Scene\"}}Scene{{/crossLink}}.",
                            "type": "String|Transform",
                            "optional": true
                        },
                        {
                            "name": "xyz",
                            "description": "The translation vector",
                            "type": "Float32Array",
                            "optional": true,
                            "optdefault": "[0,0,0]"
                        }
                    ]
                }
            ],
            "extends": "Transform"
        },
        "Viewport": {
            "name": "Viewport",
            "shortname": "Viewport",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "xeogl",
            "namespace": "",
            "file": "src/viewport/viewport.js",
            "line": 1,
            "description": "A **Viewport** controls the canvas viewport for a {{#crossLink \"Scene\"}}{{/crossLink}}.\n\n<a href=\"../../examples/#effects_stereo_custom\"><img src=\"../../../assets/images/screenshots/StereoEffect.png\"></img></a>\n\n## Overview\n\n* One Viewport per scene.\n* You can configure a Scene to render multiple times per frame, while setting the Viewport to different extents on each render.\n* Make a Viewport automatically size to its {{#crossLink \"Scene\"}}Scene's{{/crossLink}} {{#crossLink \"Canvas\"}}{{/crossLink}}\nby setting its {{#crossLink \"Viewport/autoBoundary:property\"}}{{/crossLink}} property ````true```` (default is ````false````).\n\n## Examples\n\n* [Stereo effect using alternating viewports](../../examples/#effects_stereo_custom)\n\n## Usage\n\nConfiguring the Scene to render twice on each frame, each time to a separate viewport:\n\n````Javascript\n// Load glTF model\nvar model = new xeogl.GLTFModel({\n   src: \"models/gltf/GearboxAssy/glTF-MaterialsCommon/GearboxAssy.gltf\"\n});\n\nvar scene = model.scene;\nvar viewport = scene.viewport;\n\n// Configure Scene to render twice for each frame\nscene.passes = 2; // Default is 1\nscene.clearEachPass = false; // Default is false\n\n// Render to a separate viewport on each render\n\nvar viewport = scene.viewport;\nviewport.autoBoundary = false;\n\nscene.on(\"rendering\", function (e) {\n    switch (e.pass) {\n        case 0:\n            viewport.boundary = [0, 0, 200, 200]; // xmin, ymin, width, height\n            break;\n\n        case 1:\n            viewport.boundary = [200, 0, 200, 200];\n            break;\n    }\n});\n````",
            "submodule": "rendering",
            "is_constructor": 1,
            "params": [
                {
                    "name": "scene",
                    "description": "Parent {{#crossLink \"Scene\"}}{{/crossLink}}, creates this Viewport within the\ndefault {{#crossLink \"Scene\"}}{{/crossLink}} when omitted.",
                    "type": "Scene",
                    "optional": true
                },
                {
                    "name": "cfg",
                    "description": "Viewport configuration",
                    "type": "*",
                    "optional": true,
                    "props": [
                        {
                            "name": "id",
                            "description": "Optional ID, unique among all components in the parent\n{{#crossLink \"Scene\"}}Scene{{/crossLink}}, generated automatically when omitted.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "meta",
                            "description": "Optional map of user-defined metadata to attach to this Viewport.",
                            "type": "String:Object",
                            "optional": true
                        },
                        {
                            "name": "boundary",
                            "description": "Canvas-space Viewport boundary, given as\n(min, max, width, height). Defaults to the size of the parent\n{{#crossLink \"Scene\"}}Scene's{{/crossLink}} {{#crossLink \"Canvas\"}}{{/crossLink}}.",
                            "type": "Array of Number",
                            "optional": true
                        },
                        {
                            "name": "autoBoundary",
                            "description": "Indicates whether this Viewport's {{#crossLink \"Viewport/boundary:property\"}}{{/crossLink}}\nautomatically synchronizes with the size of the parent {{#crossLink \"Scene\"}}Scene's{{/crossLink}} {{#crossLink \"Canvas\"}}{{/crossLink}}.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        }
                    ]
                }
            ],
            "extends": "Component"
        },
        "Component": {
            "name": "Component",
            "shortname": "Component",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "xeogl",
            "namespace": "",
            "file": "src/component.js",
            "line": 1,
            "description": "The **Component** class is the base class for all xeogl components.\n\n## Usage\n\n* [Component IDs](#component-ids)\n* [Metadata](#metadata)\n* [Logging](#logging)\n* [Destruction](#destruction)\n* [Creating custom Components](#creating-custom-components)\n\n### Component IDs\n\nEvery Component has an ID that's unique within the parent {{#crossLink \"Scene\"}}{{/crossLink}}. xeogl generates\nthe IDs automatically by default, however you can also specify them yourself. In the example below, we're creating a\nscene comprised of {{#crossLink \"Scene\"}}{{/crossLink}}, {{#crossLink \"Material\"}}{{/crossLink}}, {{#crossLink \"Geometry\"}}{{/crossLink}} and\n{{#crossLink \"Entity\"}}{{/crossLink}} components, while letting xeogl generate its own ID for\nthe {{#crossLink \"Geometry\"}}{{/crossLink}}:\n\n````javascript\n// The Scene is a Component too\nvar scene = new xeogl.Scene({\n   id: \"myScene\"\n});\n\nvar material = new xeogl.PhongMaterial(scene, {\n   id: \"myMaterial\"\n});\n\nvar geometry = new xeogl.Geometry(scene, {\n   id: \"myGeometry\"\n});\n\n// Let xeogl automatically generate the ID for our Entity\nvar entity = new xeogl.Entity(scene, {\n   material: material,\n   geometry: geometry\n});\n````\n\nWe can then find those components like this:\n\n````javascript\n// Find the Scene\nvar theScene = xeogl.scenes[\"myScene\"];\n\n// Find the Material\nvar theMaterial = theScene.components[\"myMaterial\"];\n\n// Find all PhongMaterials in the Scene\nvar phongMaterials = theScene.types[\"xeogl.PhongMaterial\"];\n\n// Find our Material within the PhongMaterials\nvar theMaterial = phongMaterials[\"myMaterial\"];\n````\n\n### Component inheritance\n\n\nTODO\n\nAll xeogl components extend the Component base type. Each component\n\nFor example, if this component is a {{#crossLink \"Rotate\"}}{{/crossLink}}, which\nextends {{#crossLink \"Transform\"}}{{/crossLink}}, which in turn extends {{#crossLink \"Component\"}}{{/crossLink}},\nthen this property will have the value:\n\n````json\n[\"xeogl.Component\", \"xeogl.Transform\"]\n````\n\nTODO\n\n````javascript\n// Evaluates true:\nvar isComponent = theMaterial.isType(\"xeogl.Component\");\n\n// Evaluates true:\nvar isMaterial = theMaterial.isType(\"xeogl.Material\");\n\n// Evaluates true:\nvar isPhongMaterial = theMaterial.isType(\"xeogl.PhongMaterial\");\n\n// Evaluates false:\nvar isMetallicMaterial = theMaterial.isType(\"xeogl.MetallicMaterial\");\n````\nNote that the chain is ordered downwards in the hierarchy, ie. from super-class down towards sub-class.\n\n### Metadata\n\nYou can set optional **metadata** on your Components, which can be anything you like. These are intended\nto help manage your components within your application code or content pipeline. You could use metadata to attach\nauthoring or version information, like this:\n\n````javascript\n// Scene with authoring metadata\nvar scene = new xeogl.Scene({\n   id: \"myScene\",\n   meta: {\n       title: \"My bodacious 3D scene\",\n       author: \"@xeographics\",\n       date: \"February 30 2018\"\n   }\n});\n\n// Material with descriptive metadata\nvar material = new xeogl.PhongMaterial(scene, {\n   id: \"myMaterial\",\n   diffuse: [1, 0, 0],\n   meta: {\n       description: \"Bright red color with no textures\",\n       version: \"0.1\",\n       foo: \"bar\"\n   }\n});\n````\n\n### Logging\n\nComponents have methods to log ID-prefixed messages to the JavaScript console:\n\n````javascript\nmaterial.log(\"Everything is fine, situation normal.\");\nmaterial.warn(\"Wait, whats that red light?\");\nmaterial.error(\"Aw, snap!\");\n````\n\nThe logged messages will look like this in the console:\n\n````text\n[LOG]   myMaterial: Everything is fine, situation normal.\n[WARN]  myMaterial: Wait, whats that red light..\n[ERROR] myMaterial: Aw, snap!\n````\n\n### Destruction\n\nGet notification of destruction directly on the Components:\n\n````javascript\nmaterial.on(\"destroyed\", function() {\n   this.log(\"Component was destroyed: \" + this.id);\n});\n````\n\nOr get notification of destruction of any Component within its {{#crossLink \"Scene\"}}{{/crossLink}}, indiscriminately:\n\n````javascript\nscene.on(\"componentDestroyed\", function(component) {\n   this.log(\"Component was destroyed: \" + component.id);\n});\n````\n\nThen destroy a component like this:\n\n````javascript\nmaterial.destroy();\n````\n\n### Creating custom Components\n\nSubclassing a Component to create a new ````xeogl.ColoredTorus```` type:\n\n````javascript\nxeogl.ColoredTorus = xeogl.Component.extend({\n\n    type: \"xeogl.ColoredTorus\",\n\n    _init: function (cfg) { // Constructor\n\n        this._torus = new xeogl.Entity({\n            geometry: new xeogl.TorusGeometry({radius: 2, tube: .6}),\n            material: new xeogl.MetallicMaterial({\n                baseColor: [1.0, 0.5, 0.5],\n                roughness: 0.4,\n                metallic: 0.1\n            })\n        });\n\n        this.color = cfg.color;\n    },\n\n    _props: {\n\n        // The color of this ColoredTorus.\n        color: {\n            set: function (color) {\n                this._torus.material.baseColor = color;\n            },\n            get: function () {\n                return this._torus.material.baseColor;\n            }\n        }\n    },\n\n    _destroy: function () {\n        this._torus.geometry.destroy();\n        this._torus.material.destroy();\n        this._torus.destroy();\n    }\n});\n````\n\n#### Examples\n\n* [Custom component definition](../../examples/#extending_component_basic)\n* [Custom component that fires events](../../examples/#extending_component_changeEvents)\n* [Custom component that manages child components](../../examples/#extending_component_childCleanup)\n* [Custom component that schedules asynch tasks](../../examples/#extending_component_update)",
            "is_constructor": 1,
            "params": [
                {
                    "name": "scene",
                    "description": "Parent {{#crossLink \"Scene\"}}Scene{{/crossLink}} - creates this Component\nwithin the default {{#crossLink \"Scene\"}}Scene{{/crossLink}} when omitted.",
                    "type": "Scene",
                    "optional": true
                },
                {
                    "name": "cfg",
                    "description": "DepthBuf configuration",
                    "type": "*",
                    "optional": true,
                    "props": [
                        {
                            "name": "id",
                            "description": "Optional ID, unique among all components in the parent {{#crossLink \"Scene\"}}Scene{{/crossLink}}, generated automatically when omitted.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "meta",
                            "description": "Optional map of user-defined metadata to attach to this Component.",
                            "type": "String:Object",
                            "optional": true
                        },
                        {
                            "name": "isDefault",
                            "description": "Set true when this is one of xeogl's default components.",
                            "type": "Boolean",
                            "optional": true
                        }
                    ]
                }
            ]
        },
        "Scene": {
            "name": "Scene",
            "shortname": "Scene",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "xeogl",
            "namespace": "",
            "file": "src/scene.js",
            "line": 1,
            "description": "A Scene represents a 3D world.\n\n## Usage\n\n* [Creating a Scene](#creating-a-scene)\n* [Creating entities](#creating-entities)\n* [Loading models](#loading-models)\n* [Accessing content](#accessing-content)\n* [Controlling the camera](#controlling-the-camera)\n* [Taking snapshots](#taking-snapshots)\n* [Lighting](#lighting)\n* [Clipping](#clipping)\n* [Emphasis effects](#emphasis-effects)\n* [Picking](#picking)\n* [Pick masking](#pick-masking)\n* [Getting the World-space boundary](#getting-the-world-space-boundary)\n* [Controlling the viewport](#controlling-the-viewport)\n* [Controlling rendering](#controlling-rendering)\n* [Gamma correction](#gamma-correction)\n\n### Creating a Scene\n\nCreating a Scene with its own default canvas:\n\n````javascript\nvar scene = new xeogl.Scene();\n````\n\nCreating a Scene with an existing canvas.\n\n````javascript\nvar scene2 = new xeogl.Scene({\n   canvas: \"myCanvas\"\n});\n\nvar scene3 = new xeogl.Scene({\n   canvas: document.getElementById(\"myCanvas\");\n});\n````\n\n### Creating entities\n\nCreating an {{#crossLink \"Entity\"}}{{/crossLink}} within a Scene:\n\n<a href=\"../../examples/#geometry_primitives_teapot\"><img src=\"../../assets/images/screenshots/Scene/teapot.png\"></img></a>\n\n````javascript\nvar entity = new xeogl.Entity(scene, {\n   geometry: new xeogl.TeapotGeometry(scene),\n   material: new xeogl.PhongMaterial(scene, {\n       diffuse: [0.2, 0.2, 1.0]\n   })\n});\n````\n\nCreating an entity within the default Scene (which will be automatically created if not yet existing):\n````javascript\nentity = new xeogl.Entity({\n   geometry: new xeogl.TeapotGeometry(),\n   material: new xeogl.PhongMaterial({\n       diffuse: [0.2, 0.2, 1.0]\n   })\n});\n\nentity.scene.camera.eye = [45, 45, 45];\n````\n\nThe default Scene can be got from either the Entity or the xeogl namespace:\n\n````javascript\nscene = entity.scene;\nscene = xeogl.scene;\n````\n\n### Loading models\n\nUse {{#crossLink \"GLTFModel\"}}{{/crossLink}} components to load glTF models into a Scene:\n\n````javascript\nvar model = new xeogl.GLTFModel(scene, { // If we don't provide the Scene, will create in default Scene\n   id: \"gearbox\",\n   src: \"models/gltf/gearbox/gearbox_assy.gltf\"\n});\n````\n\n### Accessing content\n\nFind components by ID in their Scene's {{#crossLink \"Scene/components:property\"}}{{/crossLink}} map:\n\n````javascript\nvar gear1 = scene.components[\"gearbox#gear99\"];\ngear1.visible = false;\n//...\n````\n\nA Scene also has a map of component instances for each {{#crossLink \"Component\"}}{{/crossLink}} subtype:\n\n````javascript\nvar entities = scene.types[\"xeogl.Entity\"];\nvar gear = entities[\"gearbox#gear99\"];\ngear.ghost = true;\n//...\n\nvar glTFModels = scene.types[\"xeogl.GLTFModel\"];\nvar gearbox = glTFModels[\"gearbox\"];\ngearbox.visible = false;\n//...\n````\na map containing just the {{#crossLink \"Model\"}}{{/crossLink}} instances:\n\n````javascript\ngearbox = scene.models[\"gearbox\"];\n````\n\nand a map containing just the {{#crossLink \"Entity\"}}{{/crossLink}} instances:\n\n````javascript\ngear = scene.entities[\"gearbox#gear99\"];\n````\n\n### Controlling the camera\n\nUse the Scene's {{#crossLink \"Camera\"}}{{/crossLink}} to control the current viewpoint and projection:\n\n````javascript\nvar camera = myScene.camera;\n\ncamera.eye = [-10,0,0];\ncamera.look = [-10,0,0];\ncamera.up = [0,1,0];\n\ncamera.projection = \"perspective\";\ncamera.perspective.fov = 45;\n//...\n````\n\n### Managing the canvas, taking snapshots\n\nThe Scene's {{#crossLink \"Canvas\"}}{{/crossLink}} component provides various conveniences relevant to the WebGL canvas, such\nas getting getting snapshots, firing resize events etc:\n\n````javascript\nvar canvas = scene.canvas;\n\ncanvas.on(\"boundary\", function(boundary) {\n   //...\n});\n\nvar imageData = canvas.getSnapshot({\n   width: 500,\n   height: 500,\n   format: \"png\"\n});\n````\n\n### Lighting\n\nThe Scene's {{#crossLink \"Lights\"}}{{/crossLink}} component manages lighting:\n\n````javascript\nvar lights = scene.lights;\nlights[1].color = [0.9, 0.9, 0.9];\n//...\n````\n\n### Clipping\n\nThe Scene's {{#crossLink \"Clips\"}}{{/crossLink}} component manages clipping planes for custom cross-sections:\n\n````javascript\nvar clips = scene.clips;\nclips.clips = [\nnew xeogl.Clip({  // Clip plane on negative diagonal\n       pos: [1.0, 1.0, 1.0],\n       dir: [-1.0, -1.0, -1.0],\n       active: true\n   }),\nnew xeogl.Clip({ // Clip plane on positive diagonal\n       pos: [-1.0, -1.0, -1.0],\n       dir: [1.0, 1.0, 1.0],\n       active: true\n   }),\n//...\n];\n````\n\n### Emphasis effects\n\nThe Scene's {{#crossLink \"Scene/ghostMaterial:property\"}}{{/crossLink}} provides the default {{#crossLink \"EmphasisMaterial\"}}{{/crossLink}}\nfor controlling ghost effects:\n\n````javascript\nvar ghostMaterial = scene.ghostMaterial;\nghostMaterial.edgeColor = [0.9, 0.9, 0.0];\n//...\n````\n\nThe Scene's {{#crossLink \"Scene/highlightMaterial:property\"}}{{/crossLink}} provides the default {{#crossLink \"EmphasisMaterial\"}}{{/crossLink}}\nfor controlling highlight effects:\n\n````javascript\nvar highlightMaterial = scene.highlightMaterial;\nhighlightMaterial.color = [0.9, 0.9, 0.0];\n//...\n````\n\nThe Scene's {{#crossLink \"Scene/outlineMaterial:property\"}}{{/crossLink}} provides the default {{#crossLink \"OutlineMaterial\"}}{{/crossLink}}\nfor controlling outline effects:\n\n\n````javascript\nvar outlineMaterial = scene.outlineMaterial;\noutlineMaterial.edgeWidth = 6;\n````\n\n### Picking entities\n\nUse the Scene's {{#crossLink \"Scene/pick:method\"}}pick(){{/crossLink}} method to pick and raycast entities.\n\nFor example, to pick a point on the surface of the closest entity at the given canvas coordinates:\n\n````javascript\nvar hit = scene.pick({\n    pickSurface: true,\n    canvasPos: [23, 131]\n});\n\nif (hit) { // Picked an Entity\n\n     var entity = hit.entity;\n\n     var primitive = hit.primitive; // Type of primitive that was picked, usually \"triangles\"\n     var primIndex = hit.primIndex; // Position of triangle's first index in the picked Entity's Geometry's indices array\n     var indices = hit.indices; // UInt32Array containing the triangle's vertex indices\n     var localPos = hit.localPos; // Float32Array containing the picked Local-space position on the triangle\n     var worldPos = hit.worldPos; // Float32Array containing the picked World-space position on the triangle\n     var viewPos = hit.viewPos; // Float32Array containing the picked View-space position on the triangle\n     var bary = hit.bary; // Float32Array containing the picked barycentric position within the triangle\n     var normal = hit.normal; // Float32Array containing the interpolated normal vector at the picked position on the triangle\n     var uv = hit.uv; // Float32Array containing the interpolated UV coordinates at the picked position on the triangle\n}\n````\n\n### Pick masking\n\nWe can use the {{#crossLink \"Scene/pick:method\"}}pick(){{/crossLink}} method's ````include```` and ````exclude````\noptions to mask which Entities we attempt to pick.\n\nThis is useful for picking <em>through</em> things, to pick only the Entities of interest.\n\n#### Including entities\n\nTo pick only Entities ````\"gearbox#77.0\"```` and ````\"gearbox#79.0\"````, picking through any other Entities that are\nin the way, as if they weren't there:\n\n````javascript\nvar hit = scene.pick({\n    canvasPos: [23, 131],\n    include: [\"gearbox#77.0\", \"gearbox#79.0\"]\n});\n\nif (hit) {\n     // Entity will always be either \"gearbox#77.0\" or \"gearbox#79.0\"\n     var entity = hit.entity;\n}\n````\n\n#### Excluding entities\n\nTo pick any pickable Entity, except for ````\"gearbox#77.0\"```` and ````\"gearbox#79.0\"````, picking through those\nEntities if they happen to be in the way:\n\n````javascript\nvar hit = scene.pick({\n    canvasPos: [23, 131],\n    exclude: [\"gearbox#77.0\", \"gearbox#79.0\"]\n});\n\nif (hit) {\n     // Entity will never be \"gearbox#77.0\" or \"gearbox#79.0\"\n     var entity = hit.entity;\n}\n````\n\nSee {{#crossLink \"Scene/pick:method\"}}pick(){{/crossLink}} for more info on picking.\n\n### Getting the World-space boundary\n\nGetting a Scene's World-space boundary as an AABB:\n\n````javascript\nvar aabb = scene.aabb; // [xmin, ymin, zmin, xmax, ymax, zmax]\n````\n\nSubscribing to updates to the World-space boundary, which occur whenever Entities are Transformed, or their Geometries have been updated.\n\n````javascript\nscene.on(\"boundary\", function() {\n    var aabb = scene.aabb;\n    var obb = scene.obb;\n});\n````\n\nGetting the collective World-space axis-aligned boundary of the {{#crossLink \"Entity\"}}Entities{{/crossLink}}\nand/or {{#crossLink \"Model\"}}Models{{/crossLink}} with the given IDs:\n\n````JavaScript\nscene.getAABB(); // Gets collective boundary of all entities in the scene\nscene.getAABB(\"saw\"); // Gets collective boundary of all entities in saw model\nscene.getAABB([\"saw\", \"gearbox\"]); // Gets collective boundary of all entities in saw and gearbox models\nscene.getAABB(\"saw#0.1\"); // Get boundary of an entity in the saw model\nscene.getAABB([\"saw#0.1\", \"saw#0.2\"]); // Get collective boundary of two entities in saw model\n````\n\n### Managing the viewport\n\nThe Scene's {{#crossLink \"Viewport\"}}{{/crossLink}} component manages the WebGL viewport:\n\n````javascript\nvar viewport = scene.viewport\nviewport.boundary = [0, 0, 500, 400];;\n````\n\n### Controlling rendering\n\nYou can configure a Scene to perform multiple \"passes\" (renders) per frame. This is useful when we want to render the\nscene to multiple viewports, such as for stereo effects.\n\nIn the example, below, we'll configure the Scene to render twice on each frame, each time to different viewport. We'll do this\nwith a callback that intercepts the Scene before each render and sets its {{#crossLink \"Viewport\"}}{{/crossLink}} to a\ndifferent portion of the canvas. By default, the Scene will clear the canvas only before the first render, allowing the\ntwo views to be shown on the canvas at the same time.\n\n````Javascript\n// Load glTF model\nvar model = new xeogl.GLTFModel({\n   src: \"models/gltf/GearboxAssy/glTF-MaterialsCommon/GearboxAssy.gltf\"\n});\n\nvar scene = model.scene;\nvar viewport = scene.viewport;\n\n// Configure Scene to render twice for each frame\nscene.passes = 2; // Default is 1\nscene.clearEachPass = false; // Default is false\n\n// Render to a separate viewport on each render\n\nvar viewport = scene.viewport;\nviewport.autoBoundary = false;\n\nscene.on(\"rendering\", function (e) {\n    switch (e.pass) {\n        case 0:\n            viewport.boundary = [0, 0, 200, 200]; // xmin, ymin, width, height\n            break;\n\n        case 1:\n            viewport.boundary = [200, 0, 200, 200];\n            break;\n    }\n});\n\n// We can also intercept the Scene after each render,\n// (though we're not using this for anything here)\nscene.on(\"rendered\", function (e) {\n    switch (e.pass) {\n        case 0:\n            break;\n\n        case 1:\n            break;\n    }\n});\n````\n\n### Gamma correction\n\nWithin its shaders, xeogl performs shading calculations in linear space.\n\nBy default, the Scene expects color textures (ie. {{#crossLink \"PhongMaterial/diffuseMap:property\"}}{{/crossLink}},\n{{#crossLink \"MetallicMaterial/baseColorMap:property\"}}{{/crossLink}} and {{#crossLink \"SpecularMaterial/diffuseMap:property\"}}{{/crossLink}}) to\nbe in pre-multipled gamma space, so will convert those to linear space before they are used in shaders. Other textures are\nalways expected to be in linear space.\n\nBy default, the Scene will also gamma-correct its rendered output.\n\nYou can configure the Scene to expect all those color textures to be linear space, so that it does not gamma-correct them:\n\n````javascript\nscene.gammaInput = false;\n````\n\nYou would still need to gamma-correct the output, though, if it's going straight to the canvas, so normally we would\nleave that enabled:\n\n````javascript\nscene.gammaOutput = true;\n````\n\nSee {{#crossLink \"Texture\"}}{{/crossLink}} for more information on texture encoding and gamma.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "cfg",
                    "description": "Scene parameters",
                    "optional": true,
                    "props": [
                        {
                            "name": "id",
                            "description": "Optional ID, unique among all Scenes in xeogl, generated automatically when omitted.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "meta",
                            "description": "Optional map of user-defined metadata to attach to this Scene.",
                            "type": "String:Object",
                            "optional": true
                        },
                        {
                            "name": "canvasId",
                            "description": "ID of existing HTML5 canvas in the DOM - creates a full-page canvas automatically if this is omitted",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "webgl2",
                            "description": "Set this false when we **don't** want to use WebGL 2 for our Scene; the Scene will fall\nback on WebGL 1 if not available. This property will be deprecated when WebGL 2 is supported everywhere.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        },
                        {
                            "name": "components",
                            "description": "JSON array containing parameters for {{#crossLink \"Component\"}}Component{{/crossLink}} subtypes to immediately create within the Scene.",
                            "type": "Array(Object)",
                            "optional": true
                        },
                        {
                            "name": "ticksPerRender",
                            "description": "The number of {{#crossLink \"Scene/tick:event\"}}{{/crossLink}} that happen between each render or this Scene.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "1"
                        },
                        {
                            "name": "passes",
                            "description": "The number of times this Scene renders per frame.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "1"
                        },
                        {
                            "name": "clearEachPass",
                            "description": "When doing multiple passes per frame, specifies whether to clear the\ncanvas before each pass (true) or just before the first pass (false).",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "transparent",
                            "description": "Whether or not the canvas is transparent.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "backgroundColor",
                            "description": "RGBA color for canvas background, when canvas is not transparent. Overridden by backgroundImage.",
                            "type": "Float32Array",
                            "optional": true
                        },
                        {
                            "name": "backgroundImage",
                            "description": "URL of an image to show as the canvas background, when canvas is not transparent. Overrides backgroundImage.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "gammaInput",
                            "description": "When true, expects that all textures and colors are premultiplied gamma.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "gammaOutput",
                            "description": "Whether or not to render with pre-multiplied gama.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        },
                        {
                            "name": "gammaFactor",
                            "description": "The gamma factor to use when rendering with pre-multiplied gamma.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "2.2"
                        }
                    ]
                }
            ],
            "extends": "Component"
        },
        "xeogl": {
            "name": "xeogl",
            "shortname": "xeogl",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "xeogl",
            "namespace": "xeogl",
            "file": "src/xeogl.js",
            "line": 1,
            "description": "The xeogl namespace.",
            "mainName": "xeogl",
            "tag": "main",
            "itemtype": "main",
            "_main": true,
            "static": 1,
            "author": "xeolabs / http://xeolabs.com/"
        },
        "CameraFollowAnimation": {
            "name": "CameraFollowAnimation",
            "shortname": "CameraFollowAnimation",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "xeogl",
            "namespace": "",
            "file": "examples/js/animation/cameraFollowAnimation.js",
            "line": 1,
            "description": "A **CameraFollowAnimation** makes the {{#crossLink \"Scene\"}}{{/crossLink}}'s {{#crossLink \"Camera\"}}{{/crossLink}} dynamically follow a\ntarget component in order to keep it entirely in camera.\n\n<a href=\"../../examples/#animation_camera_follow_entity\"><img src=\"http://i.giphy.com/l0HlHcuzAjhMQ8YSY.gif\"></img></a>\n\n## Overview\n\n* A target can be an instance or ID of any {{#crossLink \"Component\"}}{{/crossLink}} subtype that provides a World-space AABB.\n* Can be configured to either fly or jump to each updated position of the target.\n* Can be configured to automatically adjust the distance between the {{#crossLink \"Camera\"}}{{/crossLink}}'s {{#crossLink \"Lookat\"}}{{/crossLink}}'s {{#crossLink \"Lookat/eye:property\"}}{{/crossLink}} and {{#crossLink \"Lookat/look:property\"}}{{/crossLink}} to keep the target fitted to the view volume.\n\n## Examples\n\n* [Following an Entity with the Camera](../../examples/#animation_camera_follow_entity)\n* [Following an Entity with the Camera, keeping Entity fitted to view volume](../../examples/#animation_camera_follow_entity_fitToView)\n\n## Usage\n\nIn the example below, we'll use a CameraFollowAnimation to automatically follow an {{#crossLink \"Entity\"}}{{/crossLink}}. Our CameraFollowAnimation's\n{{#crossLink \"CameraFollowAnimation/fit:property\"}}{{/crossLink}} property is set ````true````, which causes it to automatically\nkeep the {{#crossLink \"Entity\"}}{{/crossLink}} fitted to the view volume. Although we can orbit the\n{{#crossLink \"Entity\"}}{{/crossLink}} using the {{#crossLink \"CameraControl\"}}{{/crossLink}}, we you can't control the\ndistance of the {{#crossLink \"Camera\"}}{{/crossLink}} from the {{#crossLink \"Entity\"}}{{/crossLink}} because our CameraFollowAnimation\nautomatically controls that distance in order to do the automatic fitting.\n\n````javascript\n// Create a red torus Entity with a Translate modelling transform\n// that allows it to move around in World-space\nvar entity = new xeogl.Entity({\n    geometry: new xeogl.TorusGeometry(),\n    material: new xeogl.PhongMaterial({\n         diffuse: [1, 0.3, 0.3]\n    }),\n    transform: new xeogl.Translate({\n        xyz: [0,0,0]\n    })\n});\n\n// Create a CameraFollowAnimation that makes the Scene's Camera's Lookat follow the Entity while keeping it\n// fitted to the view volume. The CameraFollowAnimation will jump to each new location, and since an update will occur on every frame,\n// the effect will be as if we're smoothly flying after the Entity. If the updates occur sporadically,\n// then we would probably instead configure it to fly to each update, to keep the animation smooth.\nvar cameraFollowAnimation = new xeogl.CameraFollowAnimation({\n    target: entity,\n    fit: true,   // Fit target to view volume\n    fitFOV: 35,  // Target will occupy 35 degrees of the field-of-view\n    fly: false // Jump to each updated boundary extents\n});\n\n// Create a SplineCurve along which we'll animate our Entity\nvar curve = new xeogl.SplineCurve({\n    points: [\n        [-10, 0, 0],\n        [-5, 15, 0],\n        [20, 15, 0],\n        [10, 0, 0]\n    ]\n});\n\n// Bind the Entity Translate to a point on the SplineCurve\ncurve.on(\"point\", function(point) {\n    entity.transform.xyz = point;\n});\n\n// Animate the point along the SplineCurve using the Scene clock\ncurve.scene.on(\"tick\", function(e) {\n    curve.t = (e.time - e.startTime) * 0.01;\n});\n\n// Allow user control of the Camera with mouse and keyboard\n// (zooming will be overridden by the auto-fitting configured on our CameraFollowAnimation)\nnew xeogl.CameraControl();\n````",
            "submodule": "animation",
            "is_constructor": 1,
            "params": [
                {
                    "name": "scene",
                    "description": "Parent {{#crossLink \"Scene\"}}Scene{{/crossLink}} - creates this CameraFollowAnimation within xeogl's default {{#crossLink \"xeogl/scene:property\"}}scene{{/crossLink}} by default.",
                    "type": "Scene",
                    "optional": true
                },
                {
                    "name": "cfg",
                    "description": "Configs",
                    "type": "*",
                    "optional": true,
                    "props": [
                        {
                            "name": "id",
                            "description": "Optional ID, unique among all components in the parent {{#crossLink \"Scene\"}}Scene{{/crossLink}}, generated automatically when omitted.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "meta",
                            "description": "Optional map of user-defined metadata to attach to this CameraFollowAnimation.",
                            "type": "*",
                            "optional": true
                        },
                        {
                            "name": "target",
                            "description": "ID or instance of a {{#crossLink \"Component\"}}{{/crossLink}} to follow.\nMust be within the same {{#crossLink \"Scene\"}}Scene{{/crossLink}} as this CameraFollowAnimation. Defaults to the\nparent {{#crossLink \"Scene\"}}Scene{{/crossLink}}.",
                            "type": "Number|String|Camera",
                            "optional": true
                        },
                        {
                            "name": "fly",
                            "description": "Indicates whether this CameraFollowAnimation will either fly or jump to each updated position of the\ntarget {{#crossLink \"CameraFollowAnimation/target:property\"}}{{/crossLink}}.",
                            "type": "Boolean",
                            "optional": true
                        },
                        {
                            "name": "fit",
                            "description": "When true, will ensure that this CameraFollowAnimation automatically adjusts the distance between the {{#crossLink \"Camera\"}}{{/crossLink}}'s {{#crossLink \"Lookat\"}}{{/crossLink}}'s {{#crossLink \"Lookat/eye:property\"}}{{/crossLink}} and {{#crossLink \"Lookat/look:property\"}}{{/crossLink}} to keep the target {{#crossLink \"Boundary3D\"}}{{/crossLink}} fitted to the view volume.",
                            "type": "Boolean",
                            "optional": true
                        },
                        {
                            "name": "fitFOV",
                            "description": "How much of field-of-view, in degrees, that a target {{#crossLink \"CameraFollowAnimation/target:property\"}}{{/crossLink}} should\nfill the canvas when fitting to camera.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "45"
                        },
                        {
                            "name": "trail",
                            "description": "When true, will cause this CameraFollowAnimation to point the camera in the direction that it is travelling.",
                            "type": "Boolean",
                            "optional": true
                        }
                    ]
                }
            ],
            "extends": "Component"
        },
        "CameraPath": {
            "name": "CameraPath",
            "shortname": "CameraPath",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "xeogl",
            "namespace": "",
            "file": "examples/js/animation/cameraPath.js",
            "line": 1,
            "description": "A **CameraPath** defines a spline curve along which the {{#crossLink \"Scene\"}}{{/crossLink}}'s {{#crossLink \"Camera\"}}{{/crossLink}} can be animated.\n\n* See {{#crossLink \"CameraPathAnimation\"}}{{/crossLink}} for usage.",
            "submodule": "animation",
            "is_constructor": 1,
            "params": [
                {
                    "name": "scene",
                    "description": "Parent {{#crossLink \"Scene\"}}{{/crossLink}}.",
                    "type": "Scene",
                    "optional": true
                },
                {
                    "name": "cfg",
                    "description": "Configuration",
                    "type": "*",
                    "optional": true,
                    "props": [
                        {
                            "name": "id",
                            "description": "Optional ID, unique among all components in the parent {{#crossLink \"Scene\"}}{{/crossLink}}, generated automatically when omitted.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "meta",
                            "description": "Optional map of user-defined metadata to attach to this CameraPath.",
                            "type": "String:Object",
                            "optional": true
                        },
                        {
                            "name": "eyeCurve",
                            "description": "ID or instance of a {{#crossLink \"SplineCurve\"}}{{/crossLink}} to animate the {{#crossLink \"Camera/eye:property\"}}Camera's eye{{/crossLink}} property along.",
                            "type": "String|SplineCurve",
                            "optional": true
                        },
                        {
                            "name": "lookCurve",
                            "description": "ID or instance of a {{#crossLink \"SplineCurve\"}}{{/crossLink}} to animate the {{#crossLink \"Camera/look:property\"}}Camera's look{{/crossLink}} property along.",
                            "type": "String|SplineCurve",
                            "optional": true
                        }
                    ]
                }
            ],
            "extends": "Component"
        },
        "CameraPathAnimation": {
            "name": "CameraPathAnimation",
            "shortname": "CameraPathAnimation",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "xeogl",
            "namespace": "",
            "file": "examples/js/animation/cameraPathAnimation.js",
            "line": 1,
            "description": "A **CameraPathAnimation** animates the {{#crossLink \"Scene\"}}{{/crossLink}}'s {{#crossLink \"Camera\"}}{{/crossLink}} along a {{#crossLink \"CameraPath\"}}{{/crossLink}}.\n\n## Examples\n\n* [Interpolating the Camera along a path](../../examples/#camera_path_interpolation)\n* [Flying directly to each frame on a path](../../examples/#camera_path_flyToFrame)\n* [Jumping directly to each frame on a path](../../examples/#camera_path_scrubToFrame)\n* [A menu of Camera waypoints to fly to](../../examples/#camera_path_frameMenu)\n\n## Usage\n\n### Interpolating the Camera along a path\n\nIn this example we'll use the CameraPathAnimation's\n{{#crossLink \"CameraPathAnimation/play\"}}{{/crossLink}} method to smoothly <b>interpolate</b>\nthe {{#crossLink \"Scene\"}}Scene{{/crossLink}}'s {{#crossLink \"Camera\"}}{{/crossLink}} along a {{#crossLink \"CameraPath\"}}{{/crossLink}}:\n\n<a href=\"../../examples/#camera_path_interpolation\"><img src=\"http://i.giphy.com/l0MYDGMYzdFf6TqRW.gif\"></img></a>\n\n````Javascript\n// Load a model from glTF\n\nvar gearbox = new xeogl.GLTFModel({\n        src: \"models/gltf/GearboxAssy/glTF-MaterialsCommon/GearboxAssy.gltf\"\n});\n\n// Define a CameraPath\n\nvar cameraPath = new xeogl.CameraPath({\n    frames: [\n        {t: 0, eye: [184.21, 10.54, -7.03], look: [159.2, 17.02, 3.21], up: [-0.15, 0.97, 0.13]},\n        {t: 1, eye: [184.91, 10.10, -11.26], look: [171.03, 13.69, -5.57], up: [-0.15, 0.97, 0.12]},\n        {t: 2, eye: [181.37, 12.35, -16.93], look: [171.03, 13.69, -5.57], up: [-0.17, 0.93, 0.28]},\n        {t: 2, eye: [174.01, 13.55, -20.70], look: [171.03, 13.69, -5.57], up: [-0.01, 0.90, 0.40]},\n        {t: 4, eye: [166.48, 14.36, -20.30], look: [171.03, 13.69, -5.57], up: [0.19, 0.88, 0.40]},\n        {t: 5, eye: [160.32, 14.69, -16.63], look: [171.03, 13.69, -5.57], up: [0.36, 0.87, 0.29]},\n        {t: 6, eye: [156.67, 17.97, -4.77], look: [162.53, 17.42, 1.28], up: [0.36, 0.87, 0.29]},\n        {t: 7, eye: [151.14, 16.68, -10.04], look: [158.94, 15.95, -1.99], up: [0.36, 0.87, 0.29]},\n        {t: 8, eye: [146.26, 17.56, -4.77], look: [152.13, 17.05, 1.28], up: [0.36, 0.87, 0.28]},\n        {t: 9, eye: [137.26, 18.36, -9.65], look: [149.76, 17.27, 3.24], up: [0.36, 0.87, 0.28]},\n        {t: 10, eye: [139.04, 18.29, -11.17], look: [149.76, 17.27, 3.24], up: [0.32, 0.87, 0.33]},\n        {t: 11, eye: [140.66, 18.13, -12.26], look: [149.76, 17.27, 3.24], up: [0.28, 0.87, 0.35]},\n        {t: 12, eye: [147.18, 17.66, -14.56], look: [149.76, 17.27, 3.24], up: [0.12, 0.89, 0.41]},\n        {t: 13, eye: [158.05, 16.33, -12.69], look: [149.76, 17.27, 3.24], up: [-0.11, 0.91, 0.34]},\n        {t: 14, eye: [150.11, 13.26, -6.69], look: [147.95, 13.50, -2.52], up: [-0.11, 0.91, 0.34]},\n        {t: 15, eye: [149.27, 13.00, -3.34], look: [148.72, 13.05, -2.29], up: [-0.11, 0.91, 0.35]},\n        {t: 16, eye: [152.62, 11.65, -4.87], look: [148.47, 12.08, 3.08], up: [-0.11, 0.91, 0.35]},\n        {t: 17, eye: [153.35, 12.24, -1.84], look: [148.69, 12.72, 7.01], up: [-0.11, 0.91, 0.35]},\n        {t: 18, eye: [156.49, 12.11, 0.74], look: [148.69, 12.72, 7.012], up: [-0.23, 0.92, 0.26]},\n        {t: 19, eye: [158.52, 11.98, 5.21], look: [148.69, 12.72, 7.01], up: [-0.32, 0.92, 0.12]},\n        {t: 20, eye: [158.60, 11.50, 7.91], look: [148.69, 12.72, 7.01], up: [-0.30, 0.94, 0.035]},\n        {t: 21, eye: [157.60, 11.76, 11.51], look: [148.69, 12.72, 7.01], up: [-0.31, 0.93, -0.089]},\n        {t: 22, eye: [152.67, 18.35, 14.29], look: [148.69, 12.72, 7.01], up: [-0.46, 0.51, -0.70]},\n        {t: 23, eye: [148.79, 21.67, 11.52], look: [148.69, 12.72, 7.01], up: [-0.15, 0.036, -0.97]},\n        {t: 24, eye: [147.11, 22.40, 9.07], look: [148.69, 12.72, 7.01], up: [0.38, -0.16, -0.89]},\n        {t: 25, eye: [144.80, 21.92, 6.23], look: [148.69, 12.72, 7.01], up: [0.98, -0.02, 0.03]},\n        {t: 26, eye: [144.11, 20.18, 2.13], look: [148.69, 12.72, 7.01], up: [0.71, 0.29, 0.62]},\n        {t: 27, eye: [145.87, 17.37, -1.40], look: [148.69, 12.72, 7.01], up: [0.31, 0.60, 0.71]},\n        {t: 28, eye: [144.37, 19.17, -7.33], look: [146.13, 16.27, -2.08], up: [0.31, 0.60, 0.71]},\n        {t: 29, eye: [142.54, 21.91, -17.26], look: [146.89, 14.81, -4.28], up: [0.31, 0.60, 0.71]}\n    ]\n});\n\n// Once the model has loaded, animate the\n// (default Scene's default Camera) along the CameraPath\n\nvar cameraPathAnimation = new xeogl.CameraPathAnimation({\n    cameraPath: cameraPath\n});\n\ngearbox.on(\"loaded\", function () {\n    cameraPathAnimation.play();\n});\n````\n\n<br>\n### Flying directly to each frame on a path\n\nIn this example, we'll use the CameraPathAnimation's {{#crossLink \"CameraPathAnimation/flyToFrame\"}}{{/crossLink}} method\nto <b>fly</b> the {{#crossLink \"Camera\"}}{{/crossLink}} directly to each frame on the {{#crossLink \"CameraPath\"}}{{/crossLink}}:\n\n<a href=\"../../examples/#camera_path_flyToFrame\"><img src=\"http://i.giphy.com/l3vQYNjsnAQwPBeYU.gif\"></img></a>\n\n````javascript\nvar i = 0;\nvar dir = 1;\n\ngearbox.on(\"loaded\", function () {\n    function nextFrame() {\n        cameraPathAnimation.flyToFrame(i += dir, function() { setTimeout(nextFrame, 1000); });\n\n        if (i <= 0 || i >= 29) {\n            dir = -dir;\n        }\n    }\n    nextFrame();\n});\n````\n<br>\n### Jumping directly to each frame on a path\n\nIn this example, we'll use the CameraPathAnimation's {{#crossLink \"CameraPathAnimation/scrubToFrame\"}}{{/crossLink}} method\nto <b>jump</b> the {{#crossLink \"Camera\"}}{{/crossLink}} directly to each frame on the {{#crossLink \"CameraPath\"}}{{/crossLink}}:\n\n<a href=\"../../examples/#camera_path_scrubToFrame\"><img src=\"http://i.giphy.com/l0Hlyqk7kewTjSBZ6.gif\"></img></a>\n\n````javascript\nvar i = 0;\nvar dir = 1;\n\ngearbox.on(\"loaded\", function () {\n    function nextFrame() {\n        cameraPathAnimation.scrubToFrame(i += dir);\n\n        if (i <= 0 || i >= 29) {\n            dir = -dir;\n        }\n        setTimeout(nextFrame, 1000);\n    }\n    nextFrame();\n});\n````",
            "submodule": "animation",
            "is_constructor": 1,
            "params": [
                {
                    "name": "scene",
                    "description": "Parent {{#crossLink \"Scene\"}}Scene{{/crossLink}}.",
                    "type": "Scene",
                    "optional": true
                },
                {
                    "name": "cfg",
                    "description": "Configuration",
                    "type": "*",
                    "optional": true,
                    "props": [
                        {
                            "name": "id",
                            "description": "Optional ID, unique among all components in the parent {{#crossLink \"Scene\"}}Scene{{/crossLink}}, generated automatically when omitted.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "meta",
                            "description": "Optional map of user-defined metadata to attach to CameraPathAnimation.",
                            "type": "String:Object",
                            "optional": true
                        },
                        {
                            "name": "cameraPath",
                            "description": "ID or instance of a {{#crossLink \"CameraPath\"}}{{/crossLink}} to animate the {{#crossLink \"Camera\"}}{{/crossLink}} along.\nMust be within the same {{#crossLink \"Scene\"}}{{/crossLink}} as CameraPathAnimation. .",
                            "type": "Number|String|CameraPath",
                            "optional": true
                        }
                    ]
                }
            ],
            "extends": "Component"
        },
        "Annotation": {
            "name": "Annotation",
            "shortname": "Annotation",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "xeogl",
            "namespace": "",
            "file": "examples/js/annotations/annotation.js",
            "line": 1,
            "description": "An **Annotation** is a labeled {{#crossLink \"Pin\"}}{{/crossLink}} that's attached to the surface of an {{#crossLink \"Entity\"}}{{/crossLink}}.\n\n<a href=\"../../examples/#annotations_tronTank\"><img src=\"../../assets/images/screenshots/annotationsTank.png\"></img></a>\n\n## Overview\n\n#### Position\n\nAn Annotation is positioned within one of the triangles of its {{#crossLink \"Entity\"}}Entity's{{/crossLink}} {{#crossLink \"Geometry\"}}{{/crossLink}}. Wherever that triangle goes within the 3D view, the Annotation will automatically follow. An Annotation specifies its position with two properties:\n\n* {{#crossLink \"Pin/primIndex:property\"}}{{/crossLink}}, which indicates the index of the triangle within the {{#crossLink \"Geometry\"}}{{/crossLink}} {{#crossLink \"Geometry/indices:property\"}}{{/crossLink}}, and\n* {{#crossLink \"Pin/bary:property\"}}{{/crossLink}}, the barycentric coordinates of the position within the triangle.\n\nFrom these, an Annotation dynamically calculates its Cartesian coordinates, which it provides in each xeogl coordinate space:\n\n* {{#crossLink \"Pin/localPos:property\"}}{{/crossLink}} - 3D position local to the coordinate space of the {{#crossLink \"Geometry\"}}{{/crossLink}},\n* {{#crossLink \"Pin/worldPos:property\"}}{{/crossLink}} - 3D World-space position,\n* {{#crossLink \"Pin/viewPos:property\"}}{{/crossLink}} - 3D View-space position, and\n* {{#crossLink \"Pin/canvasPos:property\"}}{{/crossLink}} - 2D Canvas-space position.\n\nAn Annotation automatically recalculates these coordinates whenever its {{#crossLink \"Entity\"}}{{/crossLink}} is replaced or transformed, the {{#crossLink \"Geometry\"}}{{/crossLink}} is replaced or modified, or the {{#crossLink \"Camera\"}}{{/crossLink}} is moved.\n\n#### Appearance\n\nAs shown in the screen shot above, an Annotation is rendered as a dot with a label attached to it, using HTML elements.\n\n* {{#crossLink \"Annotation/glyph:property\"}}{{/crossLink}} specifies a character to appear in the dot,\n* {{#crossLink \"Annotation/title:property\"}}{{/crossLink}} and {{#crossLink \"Annotation/desc:property\"}}{{/crossLink}} specify a title and description to appear in the label, and\n* {{#crossLink \"Annotation/pinShown:property\"}}{{/crossLink}} and {{#crossLink \"Annotation/labelShown:property\"}}{{/crossLink}} specify whether the pin and label are shown.\n\nUse the stylesheet in <a href=\"/examples/js/annotations/annotation-style.css\">annotation-style.css</a> to set the default appearance for Annotations. Use that stylesheet as a guide for your own custom styles.\n\n#### Visibility\n\n* {{#crossLink \"Pin/occludable:property\"}}{{/crossLink}} specifies whether the Annotation becomes invisible whenever its occluded by other objects in the 3D view, and\n* {{#crossLink \"Pin/visible:property\"}}{{/crossLink}} indicates if the Annotations is currently visible.\n\n#### Vantage points\n\nEach Annotation may be configured with a vantage point from which to view it, given as {{#crossLink \"Annotation/eye:property\"}}{{/crossLink}}, {{#crossLink \"Annotation/look:property\"}}{{/crossLink}} and {{#crossLink \"Annotation/up:property\"}}{{/crossLink}} properties.  To focus attention on an Annotation, you could set the {{#crossLink \"Camera\"}}Camera's{{/crossLink}} {{#crossLink \"Lookat\"}}{{/crossLink}} to that\nvantage point, or even fly to the vantage point using a {{#crossLink \"CameraFlightAnimation\"}}{{/crossLink}} (which we'll demonstrate in the usage example below).\n\n#### Interaction\n\nAn Annotation fires a {{#crossLink \"Annotation/pinClicked:event\"}}\"pinClicked\"{{/crossLink}} event whenever you click its dot. In the usage example, we make that event show the Annotation's label and set the {{#crossLink \"Camera\"}}{{/crossLink}} to the vantage point.\n\n## Examples\n\n* [Annotation demo](../../examples/#annotations_tronTank)\n* [AnnotationStory demo](../../examples/#annotations_annotationStory_tronTank)\n\n## Usage\n\nIn the example below, we use a {{#crossLink \"GLTFModel\"}}{{/crossLink}} to load a glTF model of a\nreciprocating saw. Once the {{#crossLink \"GLTFModel\"}}{{/crossLink}} has loaded, we'll then create Annotations on three of its {{#crossLink \"Entity\"}}Entities{{/crossLink}}. Finally, we wire\na callback to the {{#crossLink \"Annotation/pinClicked:event\"}}\"pinClicked\"{{/crossLink}} event from\neach Annotation, so that when you click its {{#crossLink \"Pin\"}}{{/crossLink}}, its label is shown and the {{#crossLink \"Camera\"}}{{/crossLink}} is positioned at its vantage point.\n\n````javascript\n<script src=\"../build/xeogl.js\"></script>\n<script src=\"js/annotations/pin.js\"></script>\n<script src=\"js/annotations/annotation.js\"></script>\n\n<link href=\"js/annotations/annotation-style.css\" rel=\"stylesheet\"/>\n\n<script>\n\nvar model = new xeogl.GLTFModel({\n   src: \"models/gltf/ReciprocatingSaw/PBR-SpecGloss/Reciprocating_Saw.gltf\",\n   transform: new xeogl.Rotate({\n       xyz: [1, 0, 0],\n       angle: 90\n   })\n});\n\nmodel.on(\"loaded\", function () {\n\n   // Position the camera to look at the model\n\n   var camera = model.scene.camera;\n   camera.eye = [-110.89, -44.85, 276.65];\n   camera.look = [-110.89, -44.85, -0.46];\n   camera.up = [0, 1, 0];\n   camera.zoom(20);\n\n   // Create three annotations on entities\n   // within the model\n\n   var a1 = new xeogl.Annotation({\n       entity: model.entities[156], // Red handle\n       primIndex: 125,\n       bary: [0.3, 0.3, 0.3],\n       occludable: true,\n       glyph: \"1\",\n       title: \"Handle\",\n       desc: \"This is the handle. It allows us to grab onto the saw so we can hold it and make things with it.\",\n       eye: [-355.481, -0.871, 116.711],\n       look: [-227.456, -57.628, 5.428],\n       up: [0.239, 0.948, -0.208],\n       pinShown: true,\n       labelShown: false\n   });\n\n   var a2 = new xeogl.Annotation({\n       entity: model.entities[156], // Red handle and cover\n       primIndex: 10260,\n       bary: [0.333, 0.333, 0.333],\n       occludable: true,\n       glyph: \"2\",\n       title: \"Handle and cover\",\n       desc: \"This is the handle and cover. It provides something grab the saw with, and covers the things inside.\",\n       eye: [-123.206, -4.094, 169.849],\n       look: [-161.838, -37.875, 37.313],\n       up: [-0.066, 0.971, -0.228],\n       pinShown: true,\n       labelShown: false\n   });\n\n   var a3 = new xeogl.Annotation({\n       entity: modelentities[796], // Barrel\n       primIndex: 3783,\n       bary: [0.3, 0.3, 0.3],\n       occludable: true,\n       glyph: \"3\",\n       title: \"Barrel\",\n       desc: \"This is the barrel\",\n       eye: [80.0345, 38.255, 60.457],\n       look: [35.023, -0.166, 8.679],\n       up: [-0.320, 0.872, -0.368],\n       pinShown: true,\n       labelShown: false\n   });\n\n   // When each annotation's pin is clicked, we'll show the\n   // annotation's label and fly the camera to the\n   // annotation's vantage point\n\n   var cameraFlight = new xeogl.CameraFlightAnimation();\n   var lastAnnotation;\n\n   function pinClicked(annotation) {\n       if (lastAnnotation) {\n           annotation.labelShown = false;\n       }\n       annotation.labelShown = true;\n       cameraFlight.flyTo(annotation);\n       lastAnnotation = annotation;\n   }\n\n   a1.on(\"pinClicked\", pinClicked);\n   a2.on(\"pinClicked\", pinClicked);\n   a3.on(\"pinClicked\", pinClicked);\n\n   // If desired, we can also dynamically track the Cartesian coordinates\n   // of each annotation in Local and World coordinate spaces\n\n   a1.on(\"localPos\", function(localPos) {\n       console.log(\"Local pos changed: \" + JSON.stringify(localPos, null, \"\\t\"));\n   });\n\n   a1.on(\"worldPos\", function(worldPos) {\n       console.log(\"World pos changed: \" + JSON.stringify(worldPos, null, \"\\t\"));\n   });\n});\n</script>\n````",
            "submodule": "annotations",
            "is_constructor": 1,
            "params": [
                {
                    "name": "scene",
                    "description": "Parent {{#crossLink \"Scene\"}}Scene{{/crossLink}} - creates this Pin in the default\n{{#crossLink \"Scene\"}}Scene{{/crossLink}} when omitted.",
                    "type": "Scene",
                    "optional": true
                },
                {
                    "name": "cfg",
                    "description": "Configs",
                    "type": "*",
                    "optional": true,
                    "props": [
                        {
                            "name": "id",
                            "description": "Optional ID, unique among all components in the parent {{#crossLink \"Scene\"}}Scene{{/crossLink}},\ngenerated automatically when omitted.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "meta",
                            "description": "Optional map of user-defined metadata to attach to the Annotation.",
                            "type": "String:Object",
                            "optional": true
                        },
                        {
                            "name": "entity",
                            "description": "ID or instance of the {{#crossLink \"Entity\"}}{{/crossLink}} the Annotation is attached to.",
                            "type": "Number|String|Entity",
                            "optional": true
                        },
                        {
                            "name": "bary",
                            "description": "Barycentric coordinates of the Annotation within its triangle.",
                            "type": "Float32Array",
                            "optional": true,
                            "optdefault": "[0.3,0.3,0.3]"
                        },
                        {
                            "name": "primIndex",
                            "description": "Index of the triangle containing the Annotation. Within the {{#crossLink \"Entity\"}}{{/crossLink}} {{#crossLink \"Geometry\"}}{{/crossLink}}\n{{#crossLink \"Geometry/indices:property\"}}{{/crossLink}}, this is the index of the first\nelement for that triangle.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "0"
                        },
                        {
                            "name": "offset",
                            "description": "How far the Annotation is lifted out of its triangle, along the surface normal vector. This is used when occlusion culling, to ensure that the Annotation is not lost inside the surface it's attached to.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "0.2"
                        },
                        {
                            "name": "occludable",
                            "description": "Indicates whether occlusion testing is performed for the Annotation, where it will be flagged invisible whenever it's hidden by something else in the 3D camera.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        },
                        {
                            "name": "glyph",
                            "description": "Short piece of text to show inside the pin for the Annotation. Automatically truncated to 2 characters.",
                            "type": "String",
                            "optional": true,
                            "optdefault": "\"\""
                        },
                        {
                            "name": "title",
                            "description": "Title text for the Annotation's label. Automatically truncated to 64 characters.",
                            "type": "String",
                            "optional": true,
                            "optdefault": "\"\""
                        },
                        {
                            "name": "desc",
                            "description": "Description text for the Annotation's label. Automatically truncated to 1025 characters.",
                            "type": "String",
                            "optional": true,
                            "optdefault": "\"\""
                        },
                        {
                            "name": "eye",
                            "description": "Position of the eye when looking at the Annotation.",
                            "type": "Float32Array",
                            "optional": true,
                            "optdefault": "[0,0,-10]"
                        },
                        {
                            "name": "look",
                            "description": "Position of the look when looking at the Annotation.",
                            "type": "Float32Array",
                            "optional": true,
                            "optdefault": "[0,0,0]"
                        },
                        {
                            "name": "up",
                            "description": "Direction of the \"up\" vector when looking at the Annotation.",
                            "type": "Float32Array",
                            "optional": true,
                            "optdefault": "[0,1,0]"
                        },
                        {
                            "name": "pinShown",
                            "description": "Specifies whether a UI element is shown at the Annotation's pin position (typically a circle).",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        },
                        {
                            "name": "labelShown",
                            "description": "Specifies whether the Annotation's label is shown.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        }
                    ]
                }
            ],
            "extends": "Pin"
        },
        "Pin": {
            "name": "Pin",
            "shortname": "Pin",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "xeogl",
            "namespace": "",
            "file": "examples/js/annotations/pin.js",
            "line": 1,
            "description": "A **Pin** is a pinned position on the surface of an {{#crossLink \"Entity\"}}{{/crossLink}}.\n\n## Overview\n\n#### Position\n\nA Pin is positioned within one of the triangles of its {{#crossLink \"Entity\"}}Entity's{{/crossLink}} {{#crossLink \"Geometry\"}}{{/crossLink}}. Wherever that triangles goes within the 3D view, the Pin will automatically follow. An Pin specifies its position with two properties:\n\n* {{#crossLink \"Pin/primIndex:property\"}}{{/crossLink}}, which indicates the index of the triangle within the {{#crossLink \"Geometry\"}}{{/crossLink}} {{#crossLink \"Geometry/indices:property\"}}{{/crossLink}}, and\n* {{#crossLink \"Pin/bary:property\"}}{{/crossLink}}, the barycentric coordinates of the position within the triangle.\n\nFrom these, an Pin dynamically calculates its Cartesian coordinates, which it provides in each xeogl coordinate space:\n\n* {{#crossLink \"Pin/localPos:property\"}}{{/crossLink}} - 3D position local to the coordinate space of the {{#crossLink \"Geometry\"}}{{/crossLink}},\n* {{#crossLink \"Pin/worldPos:property\"}}{{/crossLink}} - 3D World-space position,\n* {{#crossLink \"Pin/viewPos:property\"}}{{/crossLink}} - 3D View-space position, and\n* {{#crossLink \"Pin/canvasPos:property\"}}{{/crossLink}} - 2D Canvas-space position.\n\nAn Pin automatically recalculates these coordinates whenever its {{#crossLink \"Entity\"}}{{/crossLink}} is replaced or transformed, the {{#crossLink \"Geometry\"}}{{/crossLink}} is replaced or modified, or the {{#crossLink \"Camera\"}}{{/crossLink}} is moved.\n\n#### Visibility\n\n* {{#crossLink \"Pin/occludable:property\"}}{{/crossLink}} specifies whether the Pin becomes invisible whenever its occluded by other objects in the 3D view, and\n* {{#crossLink \"Pin/visible:property\"}}{{/crossLink}} indicates if the Pins is currently visible.\n\n* To determine if each Pin is occluded, xeogl renders the scene to a hidden framebuffer, along with a colored point for each Pin's position. Then xeogl determines each Pin to be occluded if the pixel at its position does not match the special pin color. The color is configured as some unusual color that is not used elsewhere in the scene.\n\n## Example\n\nIn the example below we'll create an {{#crossLink \"Entity\"}}{{/crossLink}} with a {{#crossLink \"TorusGeometry\"}}{{/crossLink}}, then attach a Pin to it. Then we'll subscribe to changes to the Pin's position and visibility status.\n````javascript\nvar entity = new xeogl.Entity({\n   geometry: new xeogl.TorusGeometry(),\n   transform: new xeogl.Translate({\n       xyz: [0,0,0]\n   });\n});\n\nvar pin = new xeogl.Pin({\n   entity: entity,\n   primIndex: 12,              // Triangle index in Geometry indices array\n   bary: [0.11, 0.79, 0.08]    // Barycentric coordinates in the triangle\n});\n\nvar localPos   = pin.localPos;     // 3D Local-space position\nvar worldPos   = pin.worldPos;     // 3D World-space position\nvar viewPos    = pin.viewPos;      // 3D View-space position\nvar canvasPos  = pin.canvasPos;    // 2D Canvas-space position\n\n// Listen for change of the Pin's Local-space cartesian position,\n// which is caused by modification of Pin's Geometry or update to\n// the Pin's 'primIndex' or 'bary' properties.\npin.on(\"localPos\", function() {\n   //...\n});\n\n// Listen for change of the Pin's World-space cartesian position,\n// which is caused by update of Pin's Local-space position or by\n// animation of the Entity by its modelling Transform.\npin.on(\"worldPos\", function() {\n   //...\n});\n\n// Listen for change of Pin visibility. The Pin becomes invisible when it\n// falls outside the canvas, or when an object occludes the Pin's position\n// in the 3D view.\npin.on(\"visible\", function(visible) { // Pin visibility has changed\n   if (visible) {\n       this.log(\"Pin is not occluded and within canvas.\");\n   } else {\n       this.log(\"Pin is either occluded or is off the canvas.\");\n   }\n});\n````",
            "submodule": "annotations",
            "is_constructor": 1,
            "params": [
                {
                    "name": "scene",
                    "description": "Parent {{#crossLink \"Scene\"}}Scene{{/crossLink}} - creates this Pin in the default\n{{#crossLink \"Scene\"}}Scene{{/crossLink}} when omitted.",
                    "type": "Scene",
                    "optional": true
                },
                {
                    "name": "cfg",
                    "description": "Configs",
                    "type": "*",
                    "optional": true,
                    "props": [
                        {
                            "name": "id",
                            "description": "Optional ID, unique among all components in the parent {{#crossLink \"Scene\"}}Scene{{/crossLink}},\ngenerated automatically when omitted.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "meta",
                            "description": "Optional map of user-defined metadata to attach to this Pin.",
                            "type": "String:Object",
                            "optional": true
                        },
                        {
                            "name": "entity",
                            "description": "ID or instance of the {{#crossLink \"Entity\"}}{{/crossLink}} the Pin is attached to.",
                            "type": "Number|String|Entity",
                            "optional": true
                        },
                        {
                            "name": "primIndex",
                            "description": "Index of the triangle containing the Pin. Within the {{#crossLink \"Entity\"}}Entity's{{/crossLink}} {{#crossLink \"Geometry/indices:property\"}}Geometry indices{{/crossLink}}, this is the index of the first vertex for the triangle.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "0"
                        },
                        {
                            "name": "bary",
                            "description": "Barycentric coordinates of the Pin within its triangle.",
                            "type": "Float32Array",
                            "optional": true,
                            "optdefault": "[0.3,0.3,0.3]"
                        },
                        {
                            "name": "offset",
                            "description": "How far the Pin is lifted out of its triangle, along the surface normal vector. This is used when occlusion culling, to ensure that the Pin is not lost inside the surface it's attached to.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "0.2"
                        },
                        {
                            "name": "occludable",
                            "description": "Indicates whether occlusion testing is performed for the Pin, where it will be flagged invisible whenever it's hidden by something else in the 3D view.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        }
                    ]
                }
            ],
            "extends": "Component"
        },
        "LoadingEffect": {
            "name": "LoadingEffect",
            "shortname": "LoadingEffect",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "xeogl",
            "namespace": "",
            "file": "examples/js/effects/loadingEffect.js",
            "line": 1,
            "description": "A **LoadingEffect** TODO}.",
            "submodule": "effects",
            "is_constructor": 1,
            "params": [
                {
                    "name": "scene",
                    "description": "Parent {{#crossLink \"Scene\"}}Scene{{/crossLink}} - creates this LoadingEffect in the default\n{{#crossLink \"Scene\"}}Scene{{/crossLink}} when omitted.",
                    "type": "Scene",
                    "optional": true
                },
                {
                    "name": "cfg",
                    "description": "Configs",
                    "type": "*",
                    "optional": true,
                    "props": [
                        {
                            "name": "id",
                            "description": "Optional ID, unique among all components in the parent {{#crossLink \"Scene\"}}Scene{{/crossLink}},\ngenerated automatically when omitted.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "meta",
                            "description": "Optional map of user-defined metadata to attach to this LoadingEffect.",
                            "type": "String:Object",
                            "optional": true
                        }
                    ]
                }
            ],
            "extends": "Entity"
        },
        "StereoEffect": {
            "name": "StereoEffect",
            "shortname": "StereoEffect",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "xeogl",
            "namespace": "",
            "file": "examples/js/effects/stereoEffect.js",
            "line": 1,
            "description": "A **StereoEffect** sets up a stereo view for its {{#crossLink \"Scene\"}}Scene{{/crossLink}}.\n\n<a href=\"../../examples/#effects_stereo\"><img src=\"../../assets/images/screenshots/StereoEffect.png\"></img></a>\n\n## Overview\n\n* Based on technique described in [this article by Paul Bourke](http://paulbourke.net/stereographics/stereorender/).\n\n## Examples\n\n* [Stereo view using a StereoEffect](../../examples/#effects_stereo)\n\n## Usage\n\nStereo view of an {{#crossLink \"Entity\"}}{{/crossLink}} using the {{#crossLink \"Scene\"}}Scene{{/crossLink}}'s default {{#crossLink \"Camera\"}}{{/crossLink}} and {{#crossLink \"Viewport\"}}{{/crossLink}}:\n\n````javascript\n// Both the Entity and the StereoEffect use their Scene's default Camera and Viewport\n\nvar entity = new xeogl.Entity({\n    geometry: new xeogl.TorusGeometry()\n});\n\nvar stereoEffect = new xeogl.StereoEffect({\n    fov: 45, // Default\n    active: true // Default\n});\n````",
            "submodule": "effects",
            "is_constructor": 1,
            "params": [
                {
                    "name": "scene",
                    "description": "Parent {{#crossLink \"Scene\"}}Scene{{/crossLink}} - creates this StereoEffect in the default\n{{#crossLink \"Scene\"}}Scene{{/crossLink}} when omitted.",
                    "type": "Scene",
                    "optional": true
                },
                {
                    "name": "cfg",
                    "description": "Configs",
                    "type": "*",
                    "optional": true,
                    "props": [
                        {
                            "name": "id",
                            "description": "Optional ID, unique among all components in the parent {{#crossLink \"Scene\"}}Scene{{/crossLink}},\ngenerated automatically when omitted.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "meta",
                            "description": "Optional map of user-defined metadata to attach to this StereoEffect.",
                            "type": "String:Object",
                            "optional": true
                        },
                        {
                            "name": "fov",
                            "description": "Field-of-view angle in degrees.",
                            "optional": true,
                            "optdefault": "45"
                        },
                        {
                            "name": "active",
                            "description": "Whether or not this StereoEffect is active.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        }
                    ]
                }
            ],
            "extends": "Entity"
        },
        "CubicBezierCurve": {
            "name": "CubicBezierCurve",
            "shortname": "CubicBezierCurve",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "xeogl",
            "namespace": "",
            "file": "examples/js/curves/cubicBezierCurve.js",
            "line": 1,
            "description": "A **CubicBezierCurve** is a {{#crossLink \"Curve\"}}{{/crossLink}} along which a 3D position can be animated.\n\n## Overview\n\n<ul>\n<li>As shown in the diagram below, a CubicBezierCurve is defined by four control points.</li>\n<li>You can sample a {{#crossLink \"CubicBezierCurve/point:property\"}}{{/crossLink}} and a {{#crossLink \"CubicBezierCurve/tangent:property\"}}{{/crossLink}}\nvector on a CubicBezierCurve for any given value of {{#crossLink \"CubicBezierCurve/t:property\"}}{{/crossLink}} in the range [0..1].</li>\n<li>When you set {{#crossLink \"CubicBezierCurve/t:property\"}}{{/crossLink}} on a CubicBezierCurve, its\n{{#crossLink \"CubicBezierCurve/point:property\"}}{{/crossLink}} and {{#crossLink \"CubicBezierCurve/tangent:property\"}}{{/crossLink}} properties\nwill update accordingly.</li>\n<li>To build a complex path, you can combine an unlimited combination of CubicBezierCurves,\n{{#crossLink \"QuadraticBezierCurve\"}}QuadraticBezierCurves{{/crossLink}} and {{#crossLink \"SplineCurve\"}}SplineCurves{{/crossLink}}\ninto a {{#crossLink \"Path\"}}{{/crossLink}}.</li>\n</ul>\n\n<img style=\"border:1px solid;\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/d/db/B%C3%A9zier_3_big.gif/240px-B%C3%A9zier_3_big.gif\"/><br>\n*[Cubic Bezier Curve from WikiPedia](https://en.wikipedia.org/wiki/B%C3%A9zier_curve)*\n\n## Examples\n\n<ul>\n<li>[CubicBezierCurve example](../../examples/#animation_curves_cubicBezier)</li>\n</ul>\n\n## Usage\n\n#### Animation along a CubicBezierCurve\n\nLet's create a CubicBezierCurve, subscribe to updates on its {{#crossLink \"CubicBezierCurve/point:property\"}}{{/crossLink}},\n{{#crossLink \"Curve/tangent:property\"}}{{/crossLink}} and {{#crossLink \"Curve/t:property\"}}{{/crossLink}} properties,\nthen vary its {{#crossLink \"CubicBezierCurve/t:property\"}}{{/crossLink}}\nproperty over time:\n\n````javascript\nvar curve = new xeogl.CubicBezierCurve({\n    v0: [-10, 0, 0],\n    v1: [-5, 15, 0],\n    v2: [20, 15, 0],\n    v3: [10, 0, 0]\n});\n\ncurve.on(\"point\", function(point) {\n    this.log(\"curve.point=\" + JSON.stringify(point));\n});\n\ncurve.on(\"tangent\", function(tangent) {\n    this.log(\"curve.tangent=\" + JSON.stringify(tangent));\n});\n\ncurve.on(\"t\", function(t) {\n    this.log(\"curve.t=\" + t);\n});\n\ncurve.scene.on(\"tick\", function(e) {\n    curve.t = (e.time - e.startTime) * 0.01;\n});\n````\n\n#### Randomly sampling points\n\nUse CubicBezierCurve's {{#crossLink \"CubicBezierCurve/getPoint:method\"}}{{/crossLink}} and\n{{#crossLink \"Curve/getTangent:method\"}}{{/crossLink}} methods to sample the point and vector\nat a given **t**:\n\n````javascript\ncurve.scene.on(\"tick\", function(e) {\n\n    var t = (e.time - e.startTime) * 0.01;\n\n    var point = curve.getPoint(t);\n    var tangent = curve.getTangent(t);\n\n    this.log(\"t=\" + t + \", point=\" + JSON.stringify(point) + \", tangent=\" + JSON.stringify(tangent));\n});\n````\n\n#### Sampling multiple points\n\nUse CubicBezierCurve's {{#crossLink \"Curve/getPoints:method\"}}{{/crossLink}} method to sample a list of equidistant points\nalong it. In the snippet below, we'll build a {{#crossLink \"Geometry\"}}{{/crossLink}} that renders a line along the\ncurve.  Note that we need to flatten the points array for consumption by the {{#crossLink \"Geometry\"}}{{/crossLink}}.\n\n````javascript\nvar geometry = new xeogl.Geometry({\n    positions: xeogl.math.flatten(curve.getPoints(50))\n});\n````",
            "submodule": "curves",
            "is_constructor": 1,
            "params": [
                {
                    "name": "scene",
                    "description": "Parent {{#crossLink \"Scene\"}}Scene{{/crossLink}}.",
                    "type": "Scene",
                    "optional": true
                },
                {
                    "name": "cfg",
                    "description": "Configuration",
                    "type": "*",
                    "optional": true,
                    "props": [
                        {
                            "name": "id",
                            "description": "Optional ID, unique among all components in the parent {{#crossLink \"Scene\"}}Scene{{/crossLink}}, generated automatically when omitted.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "meta",
                            "description": "Optional map of user-defined metadata to attach to this CubicBezierCurve.",
                            "type": "String:Object",
                            "optional": true
                        },
                        {
                            "name": "v0",
                            "description": "The starting point.",
                            "optional": true,
                            "optdefault": "[0,0,0]"
                        },
                        {
                            "name": "v1",
                            "description": "The first control point.",
                            "optional": true,
                            "optdefault": "[0,0,0]"
                        },
                        {
                            "name": "v2",
                            "description": "The middle control point.",
                            "optional": true,
                            "optdefault": "[0,0,0]"
                        },
                        {
                            "name": "v3",
                            "description": "The ending point.",
                            "optional": true,
                            "optdefault": "[0,0,0]"
                        },
                        {
                            "name": "t",
                            "description": "Current position on this CubicBezierCurve, in range between 0..1.",
                            "optional": true,
                            "optdefault": "0"
                        }
                    ]
                }
            ],
            "extends": "Curve"
        },
        "Curve": {
            "name": "Curve",
            "shortname": "Curve",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "xeogl",
            "namespace": "",
            "file": "examples/js/curves/curve.js",
            "line": 1,
            "description": "**Curve** is the abstract base class for {{#crossLink \"SplineCurve\"}}{{/crossLink}},\n {{#crossLink \"CubicBezierCurve\"}}{{/crossLink}}, {{#crossLink \"QuadraticBezierCurve\"}}{{/crossLink}} and {{#crossLink \"Path\"}}{{/crossLink}}.\n## Examples\n<ul>\n <li>[CubicBezierCurve example](../../examples/#animation_curves_cubicBezier)</li>\n <li>[Tweening position along a QuadraticBezierCurve](../../examples/#animation_curves_quadraticBezier)</li>\n <li>[Tweening color along a QuadraticBezierCurve](../../examples/#animation_curves_quadraticBezier_color)</li>\n <li>[Simple SplineCurve example](../../examples/#animation_curves_spline)</li>\n <li>[Moving a PointLight along a SplineCurve](../../examples/#animation_lights_point_world)</li>\n <li>[Path example](../../examples/#curves_Path)</li>\n </ul>",
            "submodule": "curves",
            "is_constructor": 1,
            "params": [
                {
                    "name": "scene",
                    "description": "Parent {{#crossLink \"Scene\"}}Scene{{/crossLink}}.",
                    "type": "Scene",
                    "optional": true
                },
                {
                    "name": "cfg",
                    "description": "Configuration",
                    "type": "*",
                    "optional": true,
                    "props": [
                        {
                            "name": "id",
                            "description": "Optional ID, unique among all components in the parent {{#crossLink \"Scene\"}}Scene{{/crossLink}}, generated automatically when omitted.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "meta",
                            "description": "Optional map of user-defined metadata to attach to this Curve.",
                            "type": "String:Object",
                            "optional": true
                        },
                        {
                            "name": "t",
                            "description": "Current position on this Curve, in range between 0..1.",
                            "optional": true,
                            "optdefault": "0"
                        }
                    ]
                }
            ],
            "extends": "Component"
        },
        "Path": {
            "name": "Path",
            "shortname": "Path",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "xeogl",
            "namespace": "",
            "file": "examples/js/curves/path.js",
            "line": 1,
            "description": "A **Path** is a complex curved path constructed from various {{#crossLink \"Curve\"}}{{/crossLink}} subtypes.\n\n## Overview\n\n\n* A Path can be constructed from these {{#crossLink \"Curve\"}}{{/crossLink}} subtypes: {{#crossLink \"SplineCurve\"}}{{/crossLink}},\n{{#crossLink \"CubicBezierCurve\"}}{{/crossLink}} and {{#crossLink \"QuadraticBezierCurve\"}}{{/crossLink}}.\n* You can sample a {{#crossLink \"Path/point:property\"}}{{/crossLink}} and a {{#crossLink \"Curve/tangent:property\"}}{{/crossLink}}\nvector on a Path for any given value of {{#crossLink \"Path/t:property\"}}{{/crossLink}} in the range [0..1].\n* When you set {{#crossLink \"Path/t:property\"}}{{/crossLink}} on a Path, its\n{{#crossLink \"Path/point:property\"}}{{/crossLink}} and {{#crossLink \"Curve/tangent:property\"}}{{/crossLink}} properties\nwill update accordingly.\n\n## Examples\n\n* [CubicBezierCurve example](../../examples/#animation_curves_cubicBezier)\n* [Tweening position along a QuadraticBezierCurve](../../examples/#animation_curves_quadraticBezier)\n* [Tweening color along a QuadraticBezierCurve](../../examples/#animation_curves_quadraticBezier_color)\n* [SplineCurve example](../../examples/#animation_curves_spline)\n* [Path example](../../examples/#curves_Path)\n\n## Usage\n\n#### Animation along a SplineCurve\n\nCreate a Path containing a {{#crossLink \"CubicBezierCurve\"}}{{/crossLink}}, a {{#crossLink \"QuadraticBezierCurve\"}}{{/crossLink}}\nand a {{#crossLink \"SplineCurve\"}}{{/crossLink}}, subscribe to updates on its {{#crossLink \"Path/point:property\"}}{{/crossLink}} and\n{{#crossLink \"Curve/tangent:property\"}}{{/crossLink}} properties, then vary its {{#crossLink \"Path/t:property\"}}{{/crossLink}}\nproperty over time:\n\n````javascript\nvar path = new xeogl.Path({\n    curves: [\n        new xeogl.CubicBezierCurve({\n            v0: [-10, 0, 0],\n            v1: [-5, 15, 0],\n            v2: [20, 15, 0],\n            v3: [10, 0, 0]\n        }),\n        new xeogl.QuadraticBezierCurve({\n            v0: [10, 0, 0],\n            v1: [20, 15, 0],\n            v2: [10, 0, 0]\n        }),\n        new xeogl.SplineCurve({\n            points: [\n                [10, 0, 0],\n                [-5, 15, 0],\n                [20, 15, 0],\n                [10, 0, 0]\n            ]\n        })\n    ]\n});\n\npath.on(\"point\", function(point) {\n    this.log(\"path.point=\" + JSON.stringify(point));\n});\n\npath.on(\"tangent\", function(tangent) {\n    this.log(\"path.tangent=\" + JSON.stringify(tangent));\n});\n\npath.on(\"t\", function(t) {\n    this.log(\"path.t=\" + t);\n});\n\npath.scene.on(\"tick\", function(e) {\n    path.t = (e.time - e.startTime) * 0.01;\n});\n````\n\n#### Randomly sampling points\n\nUse Path's {{#crossLink \"Path/getPoint:method\"}}{{/crossLink}} and\n{{#crossLink \"path/getTangent:method\"}}{{/crossLink}} methods to sample the point and vector\nat a given **t**:\n\n````javascript\npath.scene.on(\"tick\", function(e) {\n\n    var t = (e.time - e.startTime) * 0.01;\n\n    var point = path.getPoint(t);\n    var tangent = path.getTangent(t);\n\n    this.log(\"t=\" + t + \", point=\" + JSON.stringify(point) + \", tangent=\" + JSON.stringify(tangent));\n});\n````\n\n#### Sampling multiple points\n\nUse Path's {{#crossLink \"path/getPoints:method\"}}{{/crossLink}} method to sample a list of equidistant points\nalong it. In the snippet below, we'll build a {{#crossLink \"Geometry\"}}{{/crossLink}} that renders a line along the\npath.  Note that we need to flatten the points array for consumption by the {{#crossLink \"Geometry\"}}{{/crossLink}}.\n\n````javascript\nvar geometry = new xeogl.Geometry({\n    positions: xeogl.math.flatten(path.getPoints(50))\n});\n````",
            "submodule": "curves",
            "is_constructor": 1,
            "params": [
                {
                    "name": "scene",
                    "description": "Parent {{#crossLink \"Scene\"}}Scene{{/crossLink}}.",
                    "type": "Scene",
                    "optional": true
                },
                {
                    "name": "cfg",
                    "description": "Fly configuration",
                    "type": "*",
                    "optional": true,
                    "props": [
                        {
                            "name": "id",
                            "description": "Optional ID, unique among all components in the parent {{#crossLink \"Scene\"}}Scene{{/crossLink}}, generated automatically when omitted.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "meta",
                            "description": "Optional map of user-defined metadata to attach to this Path.",
                            "type": "String:Object",
                            "optional": true
                        },
                        {
                            "name": "paths",
                            "description": "IDs or instances of }{{/crossLink}} subtypes to add to this Path.",
                            "type": "#crossLink \"path\"",
                            "optional": true,
                            "optdefault": "[]"
                        },
                        {
                            "name": "t",
                            "description": "Current position on this Path, in range between 0..1.",
                            "optional": true,
                            "optdefault": "0"
                        }
                    ]
                }
            ],
            "extends": "path"
        },
        "QuadraticBezierCurve": {
            "name": "QuadraticBezierCurve",
            "shortname": "QuadraticBezierCurve",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "xeogl",
            "namespace": "",
            "file": "examples/js/curves/quadraticBezierCurve.js",
            "line": 1,
            "description": "A **QuadraticBezierCurve** is a {{#crossLink \"Curve\"}}{{/crossLink}} along which a 3D position can be animated.\n\n## Overview\n\n<ul>\n   <li>As shown in the diagram below, a QuadraticBezierCurve is defined by three control points.</li>\n<li>You can sample a {{#crossLink \"QuadraticBezierCurve/point:property\"}}{{/crossLink}} and a {{#crossLink \"Curve/tangent:property\"}}{{/crossLink}}\nvector on a QuadraticBezierCurve for any given value of {{#crossLink \"QuadraticBezierCurve/t:property\"}}{{/crossLink}} in the range [0..1].</li>\n<li>When you set {{#crossLink \"QuadraticBezierCurve/t:property\"}}{{/crossLink}} on a QuadraticBezierCurve, its\n{{#crossLink \"QuadraticBezierCurve/point:property\"}}{{/crossLink}} and {{#crossLink \"Curve/tangent:property\"}}{{/crossLink}} properties\nwill update accordingly.</li>\n   <li>To build a complex path, you can combine an unlimited combination of QuadraticBezierCurves,\n{{#crossLink \"CubicBezierCurve\"}}CubicBezierCurves{{/crossLink}} and {{#crossLink \"SplineCurve\"}}SplineCurves{{/crossLink}}\ninto a {{#crossLink \"Path\"}}{{/crossLink}}.</li>\n</ul>\n\n<img style=\"border:1px solid;\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/3/3d/B%C3%A9zier_2_big.gif/240px-B%C3%A9zier_2_big.gif\"/><br>\n*[Quadratic Bezier Curve from WikiPedia](https://en.wikipedia.org/wiki/B%C3%A9zier_curve)*\n\n## Examples\n\n<ul>\n<li>[Tweening position along a QuadraticBezierCurve](../../examples/#animation_curves_quadraticBezier)</li>\n<li>[Tweening color along a QuadraticBezierCurve](../../examples/#animation_curves_quadraticBezier_color)</li>\n<li>[Path example](../../examples/#curves_Path)</li>\n</ul>\n\n## Usage\n\n#### Animation along a QuadraticBezierCurve\n\nLet's create a QuadraticBezierCurve, subscribe to updates on its {{#crossLink \"QuadraticBezierCurve/point:property\"}}{{/crossLink}},\n{{#crossLink \"Curve/tangent:property\"}}{{/crossLink}} and {{#crossLink \"Curve/t:property\"}}{{/crossLink}} properties,\nthen vary its {{#crossLink \"QuadraticBezierCurve/t:property\"}}{{/crossLink}}\nproperty over time:\n\n````javascript\nvar curve = new xeogl.QuadraticBezierCurve({\n    v0: [10, 0, 0],\n    v1: [20, 15, 0],\n    v2: [10, 0, 0]\n});\n\ncurve.on(\"point\", function(point) {\n    this.log(\"curve.point=\" + JSON.stringify(point));\n});\n\ncurve.on(\"tangent\", function(tangent) {\n    this.log(\"curve.tangent=\" + JSON.stringify(tangent));\n});\n\ncurve.on(\"t\", function(t) {\n    this.log(\"curve.t=\" + t);\n});\n\ncurve.scene.on(\"tick\", function(e) {\n    curve.t = (e.time - e.startTime) * 0.01;\n});\n````\n\n#### Randomly sampling points\n\nUse QuadraticBezierCurve's {{#crossLink \"QuadraticBezierCurve/getPoint:method\"}}{{/crossLink}} and\n{{#crossLink \"Curve/getTangent:method\"}}{{/crossLink}} methods to sample the point and vector\nat a given **t**:\n\n````javascript\ncurve.scene.on(\"tick\", function(e) {\n\n    var t = (e.time - e.startTime) * 0.01;\n\n    var point = curve.getPoint(t);\n    var tangent = curve.getTangent(t);\n\n    this.log(\"t=\" + t + \", point=\" + JSON.stringify(point) + \", tangent=\" + JSON.stringify(tangent));\n});\n````\n\n#### Sampling multiple points\n\nUse QuadraticBezierCurve's {{#crossLink \"Curve/getPoints:method\"}}{{/crossLink}} method to sample a list of equidistant points\nalong it. In the snippet below, we'll build a {{#crossLink \"Geometry\"}}{{/crossLink}} that renders a line along the\ncurve.  Note that we need to flatten the points array for consumption by the {{#crossLink \"Geometry\"}}{{/crossLink}}.\n\n````javascript\nvar geometry = new xeogl.Geometry({\n    positions: xeogl.math.flatten(curve.getPoints(50))\n});\n````",
            "submodule": "curves",
            "is_constructor": 1,
            "params": [
                {
                    "name": "scene",
                    "description": "Parent {{#crossLink \"Scene\"}}Scene{{/crossLink}}.",
                    "type": "Scene",
                    "optional": true
                },
                {
                    "name": "cfg",
                    "description": "Configuration",
                    "type": "*",
                    "optional": true,
                    "props": [
                        {
                            "name": "id",
                            "description": "Optional ID, unique among all components in the parent {{#crossLink \"Scene\"}}Scene{{/crossLink}}, generated automatically when omitted.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "meta",
                            "description": "Optional map of user-defined metadata to attach to this QuadraticBezierCurve.",
                            "type": "String:Object",
                            "optional": true
                        },
                        {
                            "name": "v0",
                            "description": "The starting point.",
                            "optional": true,
                            "optdefault": "[0,0,0]"
                        },
                        {
                            "name": "v1",
                            "description": "The middle control point.",
                            "optional": true,
                            "optdefault": "[0,0,0]"
                        },
                        {
                            "name": "v2",
                            "description": "The end point.",
                            "optional": true,
                            "optdefault": "[0,0,0]"
                        },
                        {
                            "name": "t",
                            "description": "Current position on this QuadraticBezierCurve, in range between 0..1.",
                            "optional": true,
                            "optdefault": "0"
                        }
                    ]
                }
            ],
            "extends": "Curve"
        },
        "SplineCurve": {
            "name": "SplineCurve",
            "shortname": "SplineCurve",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "xeogl",
            "namespace": "",
            "file": "examples/js/curves/splineCurve.js",
            "line": 1,
            "description": "A **SplineCurve** is a {{#crossLink \"Curve\"}}{{/crossLink}} along which a 3D position can be animated.\n\n## Overview\n\n<ul>\n<li>As shown in the diagram below, a SplineCurve is defined by three or more control points.</li>\n<li>You can sample a {{#crossLink \"SplineCurve/point:property\"}}{{/crossLink}} and a {{#crossLink \"Curve/tangent:property\"}}{{/crossLink}}\nvector on a SplineCurve for any given value of {{#crossLink \"SplineCurve/t:property\"}}{{/crossLink}} in the range [0..1].</li>\n<li>When you set {{#crossLink \"SplineCurve/t:property\"}}{{/crossLink}} on a SplineCurve, its {{#crossLink \"SplineCurve/point:property\"}}{{/crossLink}} and {{#crossLink \"Curve/tangent:property\"}}{{/crossLink}} properties will update accordingly.</li>\n<li>To build a complex path, you can combine an unlimited combination of SplineCurves,\n{{#crossLink \"CubicBezierCurve\"}}CubicBezierCurves{{/crossLink}} and {{#crossLink \"QuadraticBezierCurve\"}}QuadraticBezierCurves{{/crossLink}}\ninto a {{#crossLink \"Path\"}}{{/crossLink}}.</li>\n</ul>\n\n<img style=\"border:1px solid; background: white;\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/7/72/Quadratic_spline_six_segments.svg/200px-Quadratic_spline_six_segments.svg.png\"/><br>\n*<a href=\"https://en.wikipedia.org/wiki/Spline_(mathematics)\">Spline Curve from Wikipedia</a>*\n\n## Examples\n\n<ul>\n<li>[Simple SplineCurve example](../../examples/#animation_curves_spline)</li>\n<li>[Moving a PointLight along a SplineCurve](../../examples/#animation_curves_spline_pointLight)</li>\n<li>[Path example](../../examples/#animation_curves_path)</li>\n</ul>\n\n## Usage\n\n#### Animation along a SplineCurve\n\nLet's create a SplineCurve, subscribe to updates on its {{#crossLink \"SplineCurve/point:property\"}}{{/crossLink}},\n{{#crossLink \"Curve/tangent:property\"}}{{/crossLink}} and {{#crossLink \"Curve/t:property\"}}{{/crossLink}} properties,\nthen vary its {{#crossLink \"SplineCurve/t:property\"}}{{/crossLink}}\nproperty over time:\n\n````javascript\nvar curve = new xeogl.SplineCurve({\n    points: [\n        [-10, 0, 0],\n        [-5, 15, 0],\n        [20, 15, 0],\n        [10, 0, 0]\n    ]\n});\n\ncurve.on(\"point\", function(point) {\n    this.log(\"curve.point=\" + JSON.stringify(point));\n});\n\ncurve.on(\"tangent\", function(tangent) {\n    this.log(\"curve.tangent=\" + JSON.stringify(tangent));\n});\n\ncurve.on(\"t\", function(t) {\n    this.log(\"curve.t=\" + t);\n});\n\ncurve.scene.on(\"tick\", function(e) {\n    curve.t = (e.time - e.startTime) * 0.01;\n});\n````\n\n#### Randomly sampling points\n\nUse SplineCurve's {{#crossLink \"SplineCurve/getPoint:method\"}}{{/crossLink}} and\n{{#crossLink \"Curve/getTangent:method\"}}{{/crossLink}} methods to sample the point and vector\nat a given **t**:\n\n````javascript\ncurve.scene.on(\"tick\", function(e) {\n\n    var t = (e.time - e.startTime) * 0.01;\n\n    var point = curve.getPoint(t);\n    var tangent = curve.getTangent(t);\n\n    this.log(\"t=\" + t + \", point=\" + JSON.stringify(point) + \", tangent=\" + JSON.stringify(tangent));\n});\n````\n\n#### Sampling multiple points\n\nUse SplineCurve's {{#crossLink \"Curve/getPoints:method\"}}{{/crossLink}} method to sample a list of equidistant points\nalong it. In the snippet below, we'll build a {{#crossLink \"Geometry\"}}{{/crossLink}} that renders a line along the\ncurve.  Note that we need to flatten the points array for consumption by the {{#crossLink \"Geometry\"}}{{/crossLink}}.\n\n````javascript\nvar geometry = new xeogl.Geometry({\n    positions: xeogl.math.flatten(curve.getPoints(50))\n});\n````",
            "submodule": "curves",
            "is_constructor": 1,
            "params": [
                {
                    "name": "scene",
                    "description": "Parent {{#crossLink \"Scene\"}}Scene{{/crossLink}}.",
                    "type": "Scene",
                    "optional": true
                },
                {
                    "name": "cfg",
                    "description": "Configuration",
                    "type": "*",
                    "optional": true,
                    "props": [
                        {
                            "name": "id",
                            "description": "Optional ID, unique among all components in the parent {{#crossLink \"Scene\"}}Scene{{/crossLink}}, generated automatically when omitted.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "meta",
                            "description": "Optional map of user-defined metadata to attach to this SplineCurve.",
                            "type": "String:Object",
                            "optional": true
                        },
                        {
                            "name": "points",
                            "description": "Control points on this SplineCurve.",
                            "optional": true,
                            "optdefault": "[]"
                        },
                        {
                            "name": "t",
                            "description": "Current position on this SplineCurve, in range between 0..1.",
                            "optional": true,
                            "optdefault": "0"
                        }
                    ]
                }
            ],
            "extends": "Curve"
        },
        "GeometryBuilder": {
            "name": "GeometryBuilder",
            "shortname": "GeometryBuilder",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "xeogl",
            "namespace": "",
            "file": "examples/js/generation/geometryBuilder.js",
            "line": 1,
            "description": "A **GeometryBuilder** is a builder that you can use to procedurally generate {{#crossLink \"Geometry\"}}Geometries{{/crossLink}}.\n\n<a href=\"../../examples/#geometry_generation_wavyBlocks\"><img src=\"http://i.giphy.com/26gJAMkOxAW5fWlb2.gif\"></img></a>\n\n## Overview\n\n* Implements the [Builder pattern](https://en.wikipedia.org/wiki/Builder_pattern).\n* Helps us improve WebGL performance by combining many shapes into the same {{#crossLink \"Geometry\"}}Geometries{{/crossLink}},\nthus reducing the number of draw calls.\n* A plain JavaScript class, ie. not a xeogl {{#crossLink \"Component\"}}{{/crossLink}} subclass.\n\n## Examples\n\n* [Generating a 3D sine wave from boxes](../../examples/#geometry_generation_wavyBlocks)\n\n## Usage\n\n* Works by accumulating additions to an internal buffer of geometry vertex and index arrays.\n* Call {{#crossLink \"GeometryBuilder/setShape:method\"}}setShape(){{/crossLink}} to set its current mesh, and\n{{#crossLink \"GeometryBuilder/setMatrix:method\"}}setMatrix(){{/crossLink}} to set its current modelling transform.\n* Then, whenever you call {{#crossLink \"GeometryBuilder/addShape:method\"}}addShape(){{/crossLink}}, it appends the shape, transformed\nby the matrix, to its internal buffer.\n* Finally, call {{#crossLink \"GeometryBuilder/build:method\"}}build(){{/crossLink}} to dump its buffer into a target {{#crossLink \"Geometry\"}}{{/crossLink}}.\n* Retains its buffer so that you can call {{#crossLink \"GeometryBuilder/build:method\"}}build(){{/crossLink}} again, to dump its\nbuffer into other {{#crossLink \"Geometry\"}}Geometries{{/crossLink}} as needed.\n* Call {{#crossLink \"GeometryBuilder/reset:method\"}}reset(){{/crossLink}} to empty its buffer.\n\nIn the example below we'll use a GeometryBuilder to create something like the screen capture shown above.\n\n````javascript\n// Intatiate a GeometryBuilder; note that it's a\n// plain JavaScript object, not a xeogl Component subtype\nvar geometryBuilder = new xeogl.GeometryBuilder();\n\n// Set the current shape we'll be adding to our GeometryBuilder;\n// this can be a Geometry, or just an object containing vertex and indices arrays.\ngeometryBuilder.setShape(new xeogl.BoxGeometry());\n\n// Now add that shape many times, each time setting a different modelling matrix\n// on the GeometryBuilder. As we do this, we are accumulating geometry in a buffer\n// within the GeometryBuilder.\n\nvar matrix = xeogl.math.mat4();\nvar height = 3;\nvar height2 = height * 2;\nvar x;\nvar y;\nvar z;\nvar size = 200;\n\nfor (x = -size; x <= size; x += 2) {\n    for (z = -size; z <= size; z += 2) {\n\n       y = ((Math.sin(x * 0.05) * height + Math.sin(z * 0.05) * height)) + height2;\n\n       xeogl.math.identityMat4(matrix);            // Fresh matrix\n       xeogl.math.scaleMat4c(.90, y, .90, matrix); // Post-concatenate scaling\n       xeogl.math.translateMat4c(x, y, z, matrix); // Post-concatenate translation\n\n       geometryBuilder.setMatrix(matrix);          // Set the current modeling transform matrix\n\n       geometryBuilder.addShape();                 // Add current shape to the buffer, transformed by the matrix\n    }\n}\n\nvar geometry = new xeogl.Geometry();               // Dump the buffer into a Geometry component\n\ngeometryBuilder.build(geometry);\n\nvar entity = new xeogl.Entity({                    // Create an Entity with our Geometry attached\n   geometry: geometry,\n   material: new xeogl.PhongMaterial({\n       diffuse: [0.6, 0.6, 0.7]\n   })\n});\n\nentity.scene.camera.eye = [-200, 50, -200];   // Set initial Camera position\n\nnew xeogl.CameraControl();                         // Allow camera interaction\n````",
            "submodule": "generation",
            "is_constructor": 1
        },
        "Skybox": {
            "name": "Skybox",
            "shortname": "Skybox",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "xeogl",
            "namespace": "",
            "file": "examples/js/skyboxes/skybox.js",
            "line": 1,
            "description": "A **Skybox** is a textured box that does not translate with respect to the\n{{#crossLink \"Lookat\"}}viewing transform{{/crossLink}}, to a provide the appearance of a background\nfor associated {{#crossLink \"Entities\"}}Entities{{/crossLink}}.\n\n<a href=\"../../examples/#skyboxes_skybox\"><img src=\"http://i.giphy.com/3o7TKIBOOCEC5gJ224.gif\"></img></a>\n\n## Examples\n\n<ul>\n<li>[Basic Skybox](../../examples/#skyboxes_skybox)</li>\n<li>[Custom Skybox](../../examples/#skyboxes_skybox_custom)</li>\n</ul>\n\n## Usage\n\nIn the example below we're going to create twenty randomly-positioned and colored {{#crossLink \"Entity\"}}Entities{{/crossLink}}\nand wrap them in a Skybox. The Skybox will use the texture image shown below, and the result will appear like the screen capture shown above.\n\n<img src=\"../../assets/images/skyboxMiramarClouds.jpg\">\n\n````javascript\n// A bunch of random cube Entities\n\n// Share this BoxGeometry among the Entities\nvar boxGeometry = new BoxGeometry();\n\nfor (var i = 0; i < 20; i++) {\n       new xeogl.Entity({\n           geometry: boxGeometry,\n           transform: new xeogl.Translate({\n               xyz: [\n                   Math.random() * 15 - 7,\n                   Math.random() * 15 - 7,\n                   Math.random() * 15 - 7\n               ]\n           }),\n           material: new xeogl.PhongMaterial({\n               diffuse: [\n                   Math.random(),\n                   Math.random(),\n                   Math.random()\n               ]\n           })\n       });\n   }\n\n// A Skybox that wraps our Entities in a cloudy background\nvar skybox = new xeogl.Skybox({\n       src: \"textures/skybox/miramarClouds.jpg\",\n       size: 1000 // Default\n   });\n\n// Get the default Scene off the Skybox\nvar scene = skybox.scene;\n\n// Move the camera back a bit\nscene.camera.eye = [0, 0, -30];\n\n// Slowly orbit the camera on each frame\nscene.on(\"tick\", function () {\n        scene.camera.orbitYaw(0.2);\n    });\n````",
            "submodule": "skyboxes",
            "is_constructor": 1,
            "params": [
                {
                    "name": "scene",
                    "description": "Parent {{#crossLink \"Scene\"}}Scene{{/crossLink}}, creates this Skybox within the\ndefault {{#crossLink \"Scene\"}}Scene{{/crossLink}} when omitted",
                    "type": "Scene",
                    "optional": true
                },
                {
                    "name": "cfg",
                    "description": "Skybox configuration",
                    "type": "*",
                    "optional": true,
                    "props": [
                        {
                            "name": "id",
                            "description": "Optional ID, unique among all components in the parent {{#crossLink \"Scene\"}}Scene{{/crossLink}}, generated automatically when omitted.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "meta",
                            "description": "Optional map of user-defined metadata to attach to this Skybox.",
                            "type": "String:Object",
                            "optional": true
                        },
                        {
                            "name": "src",
                            "description": "Path to skybox texture",
                            "type": "String",
                            "optional": true,
                            "optdefault": "[null]"
                        },
                        {
                            "name": "encoding",
                            "description": "Texture encoding format.  See the {{#crossLink \"Texture/encoding:property\"}}{{/crossLink}} property for more info.",
                            "type": "String",
                            "optional": true,
                            "optdefault": "\"linear\""
                        },
                        {
                            "name": "size",
                            "description": "to each face.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "1000]  Size of this Skybox, given as the distance from the center at [0,0,0"
                        },
                        {
                            "name": "active",
                            "description": "True when this Skybox is visible.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        }
                    ]
                }
            ],
            "extends": "Component"
        },
        "AnnotationStory": {
            "name": "AnnotationStory",
            "shortname": "AnnotationStory",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "xeogl",
            "namespace": "",
            "file": "examples/js/stories/annotationStory.js",
            "line": 44,
            "description": "An **AnnotationStory** is a  {{#crossLink \"Story\"}}{{/crossLink}} that contains a list\nof {{#crossLink \"Annotation\"}}Annotations{{/crossLink}} accompanied by a panel of text containing links that activate them.\n\n<a href=\"../../examples/#annotations_stories_tronTank\"><img src=\"../../assets/images/screenshots/tronTankStory.jpg\"></img></a>\n\n* AnnotationStory text is provided as markdown.\n* Words in the text can be linked to xeogl storytelling functions, to fly the camera to Annotation vantage points, show labels etc.\n\n## Authoring Mode\n\n* SHIFT-click to place an Annotation\n* ESC to clear\n* ENTER to dump\n\n## Examples\n\n* [Tron Tank Program AnnotationStory](../../examples/#annotations_stories_tronTank)\n\n## Usage\n\n````javascript\n// Load a Tron Tank model from SceneJS format. Give the model an ID - this\n// gets prefixed to the IDs of it's Entities.\n\nvar model = new xeogl.SceneJSModel({\n       id: \"tank\",\n       src: \"models/scenejs/tronTank/tronTank.json\"\n   });\n\nmodel.scene.camera.eye = [15, 20, -25];\n\n// When the model has loaded, create a story with annotations\n\nmodel.on(\"loaded\", function () {\n\n   new xeogl.AnnotationStory({\n       speaking: false, // Set true to have a voice announce each annotation\n       authoring: true, // Set true to author the annotations\n       text: [\n           \"# [Stories](../docs/classes/AnnotationStory.html) : Tron Tank Program\",\n           \"This is a Light Tank from the 1982 Disney movie *Tron*.\",\n           \"The [orange tracks](focusAnnotation(0)) on this tank indicate that ....\",\n           \"![](./images/Clu_Program.png)\",\n           \"The [cannon](focusAnnotation(1)) is the tank's main armament, which  ....\",\n           \"The [pilot hatch](focusAnnotation(2)) is where Clu enters and exits the tank.\",\n           \"At the back of the tank is the [antenna](focusAnnotation(3)) through ....\",\n           \"*\\\"I fight for the users!\\\" -- Clu*\"\n       ],\n       annotations: [\n           {\n               primIndex: 204,\n               bary: [0.05, 0.16, 0.79],\n               occludable: true,\n               glyph: \"A\",\n               title: \"Orange tracks\",\n               desc: \"Indicates that the pilot is the rebel hacker, Clu\",\n               eye: [14.69, 17.89, -26.88],\n               look: [5.35, 4.14, -15.44],\n               up: [-0.09, 0.99, 0.11],\n               pinShown: true,\n               labelShown: true,\n               entity: \"tank.entity2\"\n           },\n           {\n               primIndex: 468,\n               bary: [0.05, 0.16, 0.79],\n               occludable: true,\n               glyph: \"B\",\n               title: \"Cannon\",\n               desc: \"Fires chevron-shaped bolts of de-rezzing energy\",\n               eye: [-0.66, 20.84, -21.59],\n               look: [-0.39, 6.84, -9.18],\n               up: [0.01, 0.97, 0.24],\n               pinShown: true,\n               labelShown: true,\n               entity: \"tank.entity9\"\n           },\n           {\n               primIndex: 216,\n               bary: [0.05, 0.16, 0.79],\n               occludable: true,\n               glyph: \"C\",\n               title: \"Pilot hatch\",\n               desc: \"Clu hops in and out of the tank program here\",\n               eye: [1.48, 11.79, -15.13],\n               look: [1.62, 5.04, -9.14],\n               up: [0.01, 0.97, 0.24],\n               pinShown: true,\n               labelShown: true,\n               entity: \"tank.entity6\"\n           },\n           {\n               primIndex: 4464,\n               bary: [0.05, 0.16, 0.79],\n               occludable: true,\n               glyph: \"D\",\n               title: \"Antenna\",\n               desc: \"Links the tank program to the Master Control Program\",\n               eye: [13.63, 16.79, 13.87],\n               look: [1.08, 7.72, 3.07],\n               up: [0.08, 0.99, 0.07],\n               pinShown: true,\n               labelShown: true,\n               entity: \"tank.entity9\"\n           }\n       ]\n   });\n});\n````",
            "submodule": "stories",
            "is_constructor": 1,
            "params": [
                {
                    "name": "scene",
                    "description": "Parent {{#crossLink \"Scene\"}}Scene{{/crossLink}} - creates this AnnotationStory in the default\n{{#crossLink \"Scene\"}}Scene{{/crossLink}} when omitted.",
                    "type": "Scene",
                    "optional": true
                },
                {
                    "name": "cfg",
                    "description": "Configs",
                    "type": "*",
                    "optional": true,
                    "props": [
                        {
                            "name": "id",
                            "description": "Optional ID, unique among all components in the parent {{#crossLink \"Scene\"}}Scene{{/crossLink}},\ngenerated automatically when omitted.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "meta",
                            "description": "Optional map of user-defined metadata to attach to this AnnotationStory.",
                            "type": "String:Object",
                            "optional": true
                        }
                    ]
                }
            ],
            "extends": "Story"
        },
        "Story": {
            "name": "Story",
            "shortname": "Story",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "xeogl",
            "namespace": "",
            "file": "examples/js/stories/story.js",
            "line": 5,
            "description": "A **Story** defines a panel of text generated from markdown.\n\nStory is the base class for:\n\n* {{#crossLink \"AnnotationStory\"}}{{/crossLink}} - a list of\n{{#crossLink \"Annotation\"}}Annotations{{/crossLink}} accompanied by a panel of text containing links\nthat activate them.",
            "submodule": "stories",
            "is_constructor": 1,
            "params": [
                {
                    "name": "scene",
                    "description": "Parent {{#crossLink \"Scene\"}}Scene{{/crossLink}} - creates this Story in the default\n{{#crossLink \"Scene\"}}Scene{{/crossLink}} when omitted.",
                    "type": "Scene",
                    "optional": true
                },
                {
                    "name": "cfg",
                    "description": "Configs",
                    "type": "*",
                    "optional": true,
                    "props": [
                        {
                            "name": "id",
                            "description": "Optional ID, unique among all components in the parent {{#crossLink \"Scene\"}}Scene{{/crossLink}},\ngenerated automatically when omitted.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "meta",
                            "description": "Optional map of user-defined metadata to attach to this Story.",
                            "type": "String:Object",
                            "optional": true
                        },
                        {
                            "name": "text",
                            "description": "Story text in markdown format.",
                            "type": "String",
                            "optional": true,
                            "optdefault": "\"\""
                        }
                    ]
                }
            ],
            "extends": "Component"
        },
        "HeightmapGeometry": {
            "name": "HeightmapGeometry",
            "shortname": "HeightmapGeometry",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "xeogl",
            "namespace": "",
            "file": "examples/js/geometry/heightmapGeometry.js",
            "line": 1,
            "description": "A **Heightmap** extends {{#crossLink \"Geometry\"}}{{/crossLink}} to define a height mapped geometry for attached {{#crossLink \"Entity\"}}Entities{{/crossLink}}.\n\n<a href=\"../../examples/#geometry_primitives_heightmap\"><img src=\"../../assets/images/screenshots/HeightmapGeometry.png\"></img></a>\n\n## Overview\n\n* A HeightmapGeometry is a grid shape, to which the Y-axis is perpendicular.\n* The height of each vertex on the Y-axis is determined by the image file referenced by the HeightmapGeometry's {{#crossLink \"HeightmapGeometry/src:property\"}}{{/crossLink}} property.\n* Set the {{#crossLink \"HeightmapGeometry/src:property\"}}{{/crossLink}} property to a different image file at any time, to regenerate the HeightmapGeometry's mesh from the new image.\n* Also dynamically modify it's shape at any time by updating its {{#crossLink \"HeightmapGeometry/center:property\"}}{{/crossLink}}, {{#crossLink \"HeightmapGeometry/xSize:property\"}}{{/crossLink}}, {{#crossLink \"HeightmapGeometry/ySize:property\"}}{{/crossLink}}, {{#crossLink \"HeightmapGeometry/zSize:property\"}}{{/crossLink}}, {{#crossLink \"HeightmapGeometry/xSegments:property\"}}{{/crossLink}},  {{#crossLink \"HeightmapGeometry/zSegments:property\"}}{{/crossLink}} and\n{{#crossLink \"Geometry/autoNormals:property\"}}{{/crossLink}} properties.\n* Dynamically switch its primitive type between ````\"points\"````, ````\"lines\"```` and ````\"triangles\"```` at any time by\nupdating its {{#crossLink \"Geometry/primitive:property\"}}{{/crossLink}} property.\n* Leave its {{#crossLink \"Geometry/autoNormals:property\"}}{{/crossLink}} property ````true```` to make it automatically generate its vertex normal vectors.\n\n## Examples\n\n* [Textured HeightmapGeometry](../../examples/#geometry_primitives_heightmap)\n\n## Usage\n\n````javascript\nnew xeogl.Entity({\n    geometry: new xeogl.HeightmapGeometry({\n        primitive: \"triangles\",\n        src: \"textures/height/mountain.png\",\n        center: [0,0,0],\n        xSize: 10,\n        ySize: 5,\n        zSize: 10,\n        xSegments: 70,\n        zSegments: 70,\n        lod: 1.0, // Default\n        autoNormals: true // Default\n    }),\n    material: new xeogl.PhongMaterial({\n        diffuseMap: new xeogl.Texture({\n            src: \"textures/diffuse/uvGrid2.jpg\"\n        }),\n        backfaces: true // So that we can see the faces from underneath\n    })\n});\n````",
            "submodule": "geometry",
            "is_constructor": 1,
            "params": [
                {
                    "name": "scene",
                    "description": "Parent {{#crossLink \"Scene\"}}Scene{{/crossLink}} - creates this Heightmap in the default\n{{#crossLink \"Scene\"}}Scene{{/crossLink}} when omitted.",
                    "type": "Scene",
                    "optional": true
                },
                {
                    "name": "cfg",
                    "description": "Configs",
                    "type": "*",
                    "optional": true,
                    "props": [
                        {
                            "name": "id",
                            "description": "Optional ID, unique among all components in the parent {{#crossLink \"Scene\"}}Scene{{/crossLink}},\ngenerated automatically when omitted.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "meta",
                            "description": "Optional map of user-defined metadata to attach to this Heightmap.",
                            "type": "String:Object",
                            "optional": true
                        },
                        {
                            "name": "primitive",
                            "description": "The primitive type. Accepted values are 'points', 'lines', 'line-loop', 'line-strip', 'triangles', 'triangle-strip' and 'triangle-fan'.",
                            "type": "String",
                            "optional": true,
                            "optdefault": "\"triangles\""
                        },
                        {
                            "name": "src",
                            "description": "Path to an image file to source this Heightmap from.",
                            "type": "String",
                            "optional": true,
                            "optdefault": "undefined"
                        },
                        {
                            "name": "image",
                            "description": "An HTML DOM Image object to source this Heightmap from.",
                            "type": "HTMLImageElement",
                            "optional": true,
                            "optdefault": "undefined"
                        },
                        {
                            "name": "center",
                            "description": "3D point indicating the center position of the BoxGeometry.",
                            "type": "Float32Array",
                            "optional": true
                        },
                        {
                            "name": "xSize",
                            "description": "Dimension on the X-axis.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "1"
                        },
                        {
                            "name": "ySize",
                            "description": "Dimension on the Y-axis.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "0.25"
                        },
                        {
                            "name": "zSize",
                            "description": "Dimension (height) on the Z-axis.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "1"
                        },
                        {
                            "name": "xSegments",
                            "description": "Number of segments on the X-axis (width).",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "1"
                        },
                        {
                            "name": "zSegments",
                            "description": "Number of segments on the Z-axis (depth).",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "1"
                        },
                        {
                            "name": "autoNormals",
                            "description": "Automatically generate vertex normal vectors when true.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        },
                        {
                            "name": "lod",
                            "description": ".",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "1]  Level-of-detail, in range [0..1"
                        }
                    ]
                }
            ],
            "extends": "Geometry"
        },
        "Nintendo3DSGeometry": {
            "name": "Nintendo3DSGeometry",
            "shortname": "Nintendo3DSGeometry",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "xeogl",
            "namespace": "",
            "file": "examples/js/geometry/nintendo3DSGeometry.js",
            "line": 1,
            "description": "A **Nintendo3DSGeometry** is a {{#crossLink \"Geometry\"}}{{/crossLink}} that's loaded from a\n<a href=\"https://en.wikipedia.org/wiki/Nintendo_3DS\">Nintendo 3DS</a> file.\n\n<a href=\"../../examples/#importing_3ds_lexus\"><img src=\"../../assets/images/screenshots/Nintendo3DSGeometry.png\"></img></a>\n\n## Overview\n\n* A Nintendo3DSGeometry mesh is defined by the .3DS file referenced by the Nintendo3DSGeometry's {{#crossLink \"Nintendo3DSGeometry/src:property\"}}{{/crossLink}} property.\n* Internally uses the <a href=\"http://k3d.ivank.net/\">k3d.js</a> library for parsing .3DS files.\n\n## Examples\n\n<ul>\n<li>[Importing a Lexus from 3DS](../../examples/#importing_3ds_lexus)</li>\n</ul>\n\n## Usage\n\n````javascript\nvar entity = new xeogl.Entity({\n\n    geometry: new xeogl.Nintendo3DSGeometry({\n        src: \"models/3ds/lexus.3ds\"\n    }),\n\n    material: new xeogl.PhongMaterial({\n        diffuseMap: new xeogl.Texture({\n            src: \"models/3ds/lexus.jpg\"\n        }),\n        specular: [0, 0, 0]\n    }),\n\n    // We need to rotate this particular .3DS model\n    transform: new xeogl.Rotate({\n        xyz: [1,0,0],\n        angle: -90,\n        parent: new xeogl.Rotate({\n            xyz: [0,1,0],\n            angle: 90\n        })\n    })\n});\n\n// When the Nintendo3DSGeometry has loaded,\n// fly the camera to fit the entity in view\n\nvar cameraFlight = new xeogl.CameraFlightAnimation();\n\nentity.geometry.on(\"loaded\", function () {\n    cameraFlight.flyTo({\n        aabb: entity.aabb\n    });\n});\n````",
            "submodule": "geometry",
            "is_constructor": 1,
            "params": [
                {
                    "name": "scene",
                    "description": "Parent {{#crossLink \"Scene\"}}Scene{{/crossLink}} - creates this Nintendo3DSGeometry in the default\n{{#crossLink \"Scene\"}}Scene{{/crossLink}} when omitted.",
                    "type": "Scene",
                    "optional": true
                },
                {
                    "name": "cfg",
                    "description": "Configs",
                    "type": "*",
                    "optional": true,
                    "props": [
                        {
                            "name": "id",
                            "description": "Optional ID, unique among all components in the parent {{#crossLink \"Scene\"}}Scene{{/crossLink}},\ngenerated automatically when omitted.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "meta",
                            "description": "Optional map of user-defined metadata to attach to this Nintendo3DSGeometry.",
                            "type": "String:Object",
                            "optional": true
                        },
                        {
                            "name": "src",
                            "description": "Path to the .3DS file.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "autoNormals",
                            "description": "Set true to automatically generate normal vectors from positions and indices.",
                            "type": "Boolean",
                            "optional": true
                        }
                    ]
                }
            ],
            "extends": "Geometry"
        },
        "OBJGeometry": {
            "name": "OBJGeometry",
            "shortname": "OBJGeometry",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "xeogl",
            "namespace": "",
            "file": "examples/js/geometry/objGeometry.js",
            "line": 1,
            "description": "An **OBJGeometry** is a {{#crossLink \"Geometry\"}}{{/crossLink}} that's loaded from a\n\n<a href=\"https://en.wikipedia.org/wiki/Wavefront_.obj_file\">Wavefront .OBJ</a> file.\n\n<a href=\"../../examples/#importing_obj_raptor\"><img src=\"../../assets/images/screenshots/OBJGeometry.png\"></img></a>\n\n## Overview\n\n* An OBJGeometry mesh is defined by the Wavefront .OBJ file referenced by the OBJGeometry's {{#crossLink \"OBJGeometry/src:property\"}}{{/crossLink}} property.\n* An OBJGeometry only parses the geometry data from the .OBJ file and ignores any associated .MTL file.\n* Internally uses the <a href=\"http://k3d.ivank.net/\">k3d.js</a> library for parsing .OBJ files.\n\n## Examples\n\n<ul>\n<li>[Importing a Raptor from OBJ](../../examples/#importing_obj_raptor)</li>\n</ul>\n\n## Usage\n\n````javascript\nvar entity = new xeogl.Entity({\n\n    geometry: new xeogl.OBJGeometry({\n        src: \"models/obj/raptor.obj\"\n    }),\n\n    material: new xeogl.PhongMaterial({\n        diffuseMap: new xeogl.Texture({\n            src: \"models/obj/raptor.jpg\"\n        })\n    }),\n\n    transform: new xeogl.Rotate({\n        xyz: [1, 0, 0],\n        angle: 0,\n\n        parent: new xeogl.Translate({\n            xyz: [10, 3, 10]\n        })\n    })\n});\n\n// When the OBJGeometry has loaded,\n// fly the camera to fit the entity in view\n\nvar cameraFlight = new xeogl.CameraFlightAnimation();\n\nentity.geometry.on(\"loaded\", function () {\n\n    cameraFlight.flyTo({\n        aabb: entity.aabb\n    });\n});\n````",
            "submodule": "geometry",
            "is_constructor": 1,
            "params": [
                {
                    "name": "scene",
                    "description": "Parent {{#crossLink \"Scene\"}}Scene{{/crossLink}} - creates this OBJGeometry in the default\n{{#crossLink \"Scene\"}}Scene{{/crossLink}} when omitted.",
                    "type": "Scene",
                    "optional": true
                },
                {
                    "name": "cfg",
                    "description": "Configs",
                    "type": "*",
                    "optional": true,
                    "props": [
                        {
                            "name": "id",
                            "description": "Optional ID, unique among all components in the parent {{#crossLink \"Scene\"}}Scene{{/crossLink}},\ngenerated automatically when omitted.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "meta",
                            "description": "Optional map of user-defined metadata to attach to this OBJGeometry.",
                            "type": "String:Object",
                            "optional": true
                        },
                        {
                            "name": "src",
                            "description": "Path to the .OBJ file.",
                            "type": "String",
                            "optional": true
                        }
                    ]
                }
            ],
            "extends": "Geometry"
        },
        "TeapotGeometry": {
            "name": "TeapotGeometry",
            "shortname": "TeapotGeometry",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "xeogl",
            "namespace": "",
            "file": "examples/js/geometry/teapotGeometry.js",
            "line": 1,
            "description": "A **TeapotGeometry** defines a [Utah Teapot](https://en.wikipedia.org/wiki/Utah_teapot) geometry for attached\n{{#crossLink \"Entity\"}}Entities{{/crossLink}}.\n\n<a href=\"../../examples/#geometry_primitives_teapot\"><img src=\"../../assets/images/screenshots/TeapotGeometry.png\"></img></a>\n\n## Examples\n\n<ul>\n<li>[TeapotGeometry example](../../examples/#geometry_primitives_teapot)</li>\n</ul>\n\n## Usage\n\nAn {{#crossLink \"Entity\"}}{{/crossLink}} with a TeapotGeometry, transformed with a {{#crossLink \"Rotate\"}}{{/crossLink}}\nand {{#crossLink \"Translate\"}}{{/crossLink}}, colored with a {{#crossLink \"PhongMaterial\"}}{{/crossLink}}, and with a\n{{#crossLink \"Camera\"}}{{/crossLink}} positioned to arrange it within the view:\n````javascript\nvar entity = new xeogl.Entity({\n    geometry: new xeogl.TeapotGeometry(),\n    material: new xeogl.PhongMaterial({\n        ambient: [0.9, 0.3, 0.9],\n        diffuse: [0.4, 0.4, 0.9],\n        shininess: 30\n    }),\n    transform: new xeogl.Rotate({\n        xyz: [1,0,0],\n        angle: -90,\n        parent: new xeogl.Translate({\n            xyz: [0,-20,0]\n        })\n    })\n});\n\nentity.scene.camera.eye = [0, 0, -80];\n````",
            "submodule": "geometry",
            "is_constructor": 1,
            "params": [
                {
                    "name": "scene",
                    "description": "Parent {{#crossLink \"Scene\"}}Scene{{/crossLink}} - creates this TeapotGeometry in the default\n{{#crossLink \"Scene\"}}Scene{{/crossLink}} when omitted.",
                    "type": "Scene",
                    "optional": true
                },
                {
                    "name": "cfg",
                    "description": "Configs",
                    "type": "*",
                    "optional": true,
                    "props": [
                        {
                            "name": "id",
                            "description": "Optional ID, unique among all components in the parent {{#crossLink \"Scene\"}}Scene{{/crossLink}},\ngenerated automatically when omitted.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "meta",
                            "description": "Optional map of user-defined metadata to attach to this TeapotGeometry.",
                            "type": "String:Object",
                            "optional": true
                        }
                    ]
                }
            ],
            "extends": "Geometry"
        },
        "VectorTextGeometry": {
            "name": "VectorTextGeometry",
            "shortname": "VectorTextGeometry",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "xeogl",
            "namespace": "",
            "file": "examples/js/geometry/vectorTextGeometry.js",
            "line": 1,
            "description": "A **VectorTextGeometry** extends {{#crossLink \"Geometry\"}}{{/crossLink}} to define vector text geometry for attached {{#crossLink \"Entity\"}}Entities{{/crossLink}}.\n\n<a href=\"../../examples/#geometry_primitives_vectorText\"><img src=\"../../assets/images/screenshots/VectorTextGeometry.png\"></img></a>\n\n## Overview\n\n* A VectorTextGeometry is a mesh of line segments in the X-Y plane  that is generated from the value of\nits {{#crossLink \"VectorTextGeometry/text:property\"}}{{/crossLink}} property.\n* Text is monospaced and each character occupies a square cell.\n* Set its {{#crossLink \"VectorTextGeometry/origin:property\"}}{{/crossLink}}, {{#crossLink \"VectorTextGeometry/size:property\"}}{{/crossLink}} or {{#crossLink \"VectorTextGeometry/text:property\"}}{{/crossLink}} properties to new values at any time to dynamically regenerate it.\n\n## Example\n\n````javascript\nnew xeogl.Entity({\n    geometry: new xeogl.VectorTextGeometry({\n        text: \"Attack ships on fire off the Shoulder of Orion\",\n        origin: [0,0,0],\n        size: 2 // Size of each square character cell\n    }),\n    material: new xeogl.PhongMaterial({\n        emissive: [0.5, 1.0, 1.0],\n        lineWidth: 2\n    }),\n    transform: new xeogl.Translate({\n        xyz: [0, 40, 0]\n    })\n});\n````",
            "submodule": "geometry",
            "is_constructor": 1,
            "params": [
                {
                    "name": "scene",
                    "description": "Parent {{#crossLink \"Scene\"}}Scene{{/crossLink}} - creates this VectorTextGeometry in the default\n{{#crossLink \"Scene\"}}Scene{{/crossLink}} when omitted.",
                    "type": "Scene",
                    "optional": true
                },
                {
                    "name": "cfg",
                    "description": "Configs",
                    "type": "*",
                    "optional": true,
                    "props": [
                        {
                            "name": "id",
                            "description": "Optional ID, unique among all components in the parent {{#crossLink \"Scene\"}}Scene{{/crossLink}},\ngenerated automatically when omitted.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "meta",
                            "description": "Optional map of user-defined metadata to attach to this VectorTextGeometry.",
                            "type": "String:Object",
                            "optional": true
                        },
                        {
                            "name": "origin",
                            "description": "3D point indicating the top left corner of the VectorTextGeometry.",
                            "type": "Float32Array",
                            "optional": true
                        },
                        {
                            "name": "size",
                            "description": "Size of each character.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "1"
                        },
                        {
                            "name": "text",
                            "description": "The text.",
                            "type": "String",
                            "optional": true,
                            "optdefault": "\"\""
                        }
                    ]
                }
            ],
            "extends": "Geometry"
        },
        "OBJModel": {
            "name": "OBJModel",
            "shortname": "OBJModel",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "xeogl",
            "namespace": "",
            "file": "examples/js/models/OBJModel.js",
            "line": 1,
            "description": "An **OBJModel** is a {{#crossLink \"Model\"}}{{/crossLink}} that loads itself from OBJ and MTL files.\n\n<a href=\"../../examples/#importing_obj_conferenceRoom\"><img src=\"../../../assets/images/screenshots/OBJModel.png\"></img></a>\n\n## Overview\n\n* Begins loading as soon as you set its {{#crossLink \"OBJModel/src:property\"}}{{/crossLink}} property to the location of an OBJ file.\n* Once loaded, contains an {{#crossLink \"Entity\"}}{{/crossLink}} for each object. The {{#crossLink \"Entity\"}}Entities{{/crossLink}} can then be independently shown, hidden, colored, transformed etc.\n* Set {{#crossLink \"OBJModel/src:property\"}}{{/crossLink}} to a new file path at any time, to clear the OBJModel and load components from the new file.\n\nOBJModel inherits these capabilities from its {{#crossLink \"Model\"}}{{/crossLink}} base class:\n\n* Allows you to access and manipulate the components within it (as mentioned).\n* Can be transformed as a unit within World-space by attaching it to a {{#crossLink \"Transform\"}}{{/crossLink}}.\n* Provides its World-space boundary as a {{#crossLink \"Boundary3D\"}}{{/crossLink}}.\n\n## Usage\n\nLet's load the conference room model (shown in the screenshot above):\n\n````javascript\nvar confRoom = new xeogl.OBJModel({\n    id: \"confRoom\",\n    src: \"models/obj/conference/conference.obj\"\n});\n````\n\nBind a callback to fire when the model has loaded:\n\n````javascript\nconfRoom.on(\"loaded\", function() {\n    // OBJModel has loaded!\n});\n````\n\nThat fires immediately if the OBJModel already happens to be loaded. You can also bind a callback to fire if loading fails:\n\n````javascript\nconfRoom.on(\"error\", function(msg) {\n    // Error occurred\n});\n````\n\nTo switch to a different OBJ file, simply update {{#crossLink \"OBJModel/src:property\"}}{{/crossLink}}:\n\n````javascript\nconfRoom.src = \"models/obj/female02/female02.obj\";\n````\n\n### Fitting to view\n\n````javascript\nvar cameraFlight = new xeogl.CameraFlightAnimation();\ncameraFlight.flyTo(confRoom);\n````\n\n### Accessing components\n\nLet's make everything  transparent, except for the conference table and chairs:\n\n````javascript\nfor (var id in confRoom.entities) {\n   var entity = confRoom.entities[id];\n   switch (id) {\n       case \"confRoom#mesh31\":\n       case \"confRoom#mesh29\":\n       case \"confRoom#mesh30\":\n           break;\n       default: // Not a chair entity\n           entity.material.alpha = 0.5;\n           entity.material.blendMode = \"blend\"\n   }\n}\n````\n\nNote the format of the {{#crossLink \"Entity\"}}{{/crossLink}} IDs - an OBJModel prefixes its own ID to the IDs of its components:\n\n````<OBJModel ID>#<OBJ object/group ID>````\n\n**Transforms**\n\nLet's move the white table top upwards:\n\n````javascript\nvar tableTop = confRoom.entities[\"confRoom#mesh29\"];\ntableTop.transform = new xeogl.Translate({\n   xyz: [0, 150, 0],\n   parent: tableTop.transform\n});\n````\n\n## Examples\n\n* [Conference room model](../../examples/#importing_obj_conferenceRoom)\n* [Two character models](../../examples/#importing_obj_people)",
            "submodule": "models",
            "is_constructor": 1,
            "params": [
                {
                    "name": "scene",
                    "description": "Parent {{#crossLink \"Scene\"}}Scene{{/crossLink}} - creates this OBJModel in the default\n{{#crossLink \"Scene\"}}Scene{{/crossLink}} when omitted.",
                    "type": "Scene",
                    "optional": true
                },
                {
                    "name": "cfg",
                    "description": "Configs",
                    "type": "*",
                    "optional": true,
                    "props": [
                        {
                            "name": "id",
                            "description": "Optional ID, unique among all components in the parent {{#crossLink \"Scene\"}}Scene{{/crossLink}},\ngenerated automatically when omitted.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "meta",
                            "description": "Optional map of user-defined metadata to attach to this OBJModel.",
                            "type": "String:Object",
                            "optional": true
                        },
                        {
                            "name": "src",
                            "description": "Path to an OBJ file. You can set this to a new file path at any time, which will cause the\nOBJModel to load components from the new file (after first destroying any components loaded from a previous file path).",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "transform",
                            "description": "A Local-to-World-space (modelling) {{#crossLink \"Transform\"}}{{/crossLink}} to attach to this OBJModel.\nMust be within the same {{#crossLink \"Scene\"}}{{/crossLink}} as this OBJModel. Internally, the given\n{{#crossLink \"Transform\"}}{{/crossLink}} will be inserted above each top-most {{#crossLink \"Transform\"}}Transform{{/crossLink}}\nthat the OBJModel attaches to its {{#crossLink \"Entity\"}}Entities{{/crossLink}}.",
                            "type": "Number|String|Transform",
                            "optional": true
                        }
                    ]
                }
            ],
            "extends": "Model"
        },
        "STLModel": {
            "name": "STLModel",
            "shortname": "STLModel",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "xeogl",
            "namespace": "",
            "file": "examples/js/models/STLModel.js",
            "line": 1,
            "description": "An **STLModel** is a {{#crossLink \"Model\"}}{{/crossLink}} that's loaded from an <a href=\"https://en.wikipedia.org/wiki/STL_(file_format)\">STL</a> file.\n\n<a href=\"../../examples/#importing_stl_shapes\"><img src=\"../../../assets/images/screenshots/STLModel.png\"></img></a>\n\n## Overview\n\n* An <a href=\"https://en.wikipedia.org/wiki/STL_(file_format)\">STL</a> (“StereoLithography”) file is a triangular representation of a 3-dimensional surface geometry. The surface is\ntessellated logically into a series of triangles. Each facet is described by a perpendicular\ndirection and three points representing the vertices (corners) of the triangle.\n* An STLModel is a container of {{#crossLink \"Component\"}}Components{{/crossLink}} that loads itself from an STL file.\n* It begins loading as soon as you set its {{#crossLink \"STLModel/src:property\"}}{{/crossLink}}\nproperty to the location of a valid STL file.\n* You can set {{#crossLink \"STLModel/src:property\"}}{{/crossLink}} to a new file path at any time, which causes\nthe STLModel to clear itself and load components from the new file.\n* For binary STL, has the option to create a separate {{#crossLink \"Entity\"}}{{/crossLink}} for each group of faces\nthat share the same vertex colors. This allows us to treat STL models as parts assemblies.\n* Can be configured to automatically smooth STL models by converting their face-oriented normals to vertex-oriented.\n\nIt inherits these capabilities from its {{#crossLink \"Model\"}}{{/crossLink}} base class:\n\n* Allows you to access and manipulate the components within it.\n* Can be transformed within World-space by attaching it to a {{#crossLink \"Transform\"}}{{/crossLink}}.\n* Provides its dynamic World-space axis-aligned boundary.\n\n## Examples\n\n* [Simple shapes with smoothing](../../examples/#importing_stl_shapes)\n* [F1 concept car with smoothing](../../examples/#importing_stl_F1Concept)\n\n## Usage\n\n* [Loading STL](#loading-stl)\n* [Parsing STL](#parsing-stl)\n* [Options](#options)\n* [Smoothing Normals](#smoothing-normals)\n* [Finding loaded Entities](#finding-loaded-entities)\n* [Transforming an STLModel](#transforming-a-gltfmodel)\n* [Getting the World-space boundary of an STLModel](#getting-the-world-space-boundary-of-a-gltfmodel)\n* [Clearing an STLModel](#clearing-a-gltfmodel)\n* [Destroying an STLModel](#destroying-a-gltfmodel)\n\n### Loading STL\n\nLoad an STL file by creating an STLModel:\n\n````javascript\nvar model = new xeogl.STLModel({\n    id: \"myModel\",\n    src: \"models/stl/F1Concept.stl\",\n\n    // Some example loading options (see \"Options\" below)\n    smoothNormals: true,\n    smoothNormalsAngleThreshold: 45\n});\n````\n\nAn STLModel prefixes its own ID to those of its components. The ID is optional, but in this example we're providing our own custom ID.\n\nThe STLModel begins loading the STL file immediately.\n\nTo bind a callback to be notified when the file has loaded (which fires immediately if already loaded):\n\n````javascript\nmodel.on(\"loaded\", function() {\n       // STLModel has loaded!\n   });\n````\n\nYou can also bind a callback to fire if loading fails:\n\n````javascript\nmodel.on(\"error\", function(msg) {\n       // Error occurred\n   });\n````\n\nTo switch to a different STL file, you can dynamically update {{#crossLink \"STLModel/src:property\"}}{{/crossLink}}:\n\n````javascript\nmodel.src = \"models/stl/F1Concept.stl\"\n````\n\nThat will apply whatever options were specified to the constructor.\n\n### Parsing STL\n\nIf we have STL data in memory, then we can parse it directly into an existing STLModel instance using the\nstatic {{#crossLink \"STLModel/parse:method\"}}{{/crossLink}} method:\n\n````javascript\nxeogl.STLModel.parse(model, stlData, {\n\n   // Some example parsing options (see \"Options\" below)\n    smoothNormals: true,\n    smoothNormalsAngleThreshold: 45,\n    combineGeometry: true,\n    quantizeGeometry: true\n});\n````\n\nThat's asynchronous because STL is self-contained and does not need to load any external assets.\n\n### Options\n\nThe following options may be specified when loading or parsing STL:\n\n| Option | Type | Range | Default Value | Description |\n|:--------:|:----:|:-----:|:-------------:|:-----:|:-----------:|\n| quantizeGeometry | Boolean |  | true | When true, quantizes geometry to reduce memory and GPU bus usage (see {{#crossLink \"Geometry\"}}{{/crossLink}}). |\n| combineGeometry | Boolean |  | true | When true, internally combines geometry vertex buffers to improve rendering performance (see {{#crossLink \"Geometry\"}}{{/crossLink}}). |\n| smoothNormals | Boolean |  | false | When true, automatically converts face-oriented normals to vertex normals for a smooth appearance. See [Smoothing Normals](#smoothing-normals). |\n| smoothNormalsAngleThreshold | Number (degrees) | [0..180] | 20 | See [Smoothing Normals](#smoothing-normals). |\n| backfaces | Boolean |  | true | When true, allows visible backfaces, wherever specified in the STL. When false, ignores backfaces. |\n| ghost | Boolean |  | false | When true, ghosts all the model's Entities (see {{#crossLink \"Entity\"}}{{/crossLink}} and {{#crossLink \"EmphasisMaterial\"}}{{/crossLink}}). |\n| outline | Boolean |  | false | When true, outlines all the model's Entities (see {{#crossLink \"Entity\"}}{{/crossLink}} and {{#crossLink \"OutlineMaterial\"}}{{/crossLink}}). |\n| highlight | Boolean |  | false | When true, highlights all the model's Entities (see {{#crossLink \"Entity\"}}{{/crossLink}} and {{#crossLink \"EmphasisMaterial\"}}{{/crossLink}}). |\n| ghostEdgeThreshold | Number | [0..180] | 2 | When ghosting, this is the threshold angle between normals of adjacent triangles, below which their shared wireframe edge is not drawn. |\n| splitEntities | Boolean |  | true | When true, creates a separate {{#crossLink \"Entity\"}}{{/crossLink}} for each group of faces that share the same vertex colors. Only works with binary STL.| |\n\n### Smoothing Normals\n\nAs mentioned above, providing a ````smoothNormals```` flag to the constructor gives our STLModel a smooth appearance. Triangles in STL\nare disjoint, where each triangle has its own separate vertex positions, normals and (optionally) colors. This means that you can\nhave gaps between triangles. Normals for each triangle are perpendicular to the triangle's surface, which gives the model a faceted appearance by default.\n\nThe ```smoothNormals``` flag causes the STLModel to recalculate its normals, so that each normal's direction is the average\nof the orientations of the triangles adjacent to its vertex. When smoothing, each vertex normal is set to the average of the\norientations of all other triangles that have a vertex at the same position, excluding those triangles whose direction deviates from\nthe direction of the vertice's triangle by a threshold given in ````smoothNormalsAngleThreshold````. This makes\nsmoothing robust for hard edges, which you can see on the cylindrical objects in one of the examples:\n\n<a href=\"../../examples/#importing_stl_shapes\"><img src=\"../../../assets/images/screenshots/STLModelHardEdges.png\"></img></a>\n\nNote how the rim is smooth, yet the there is still a sharp edge adjacent to the flat portions.\n\n### Finding STLModels in Scenes\n\nOur STLModel will now be registered by ID on its Scene, so we can now find it like this:\n\n````javascript\nmodel = xeogl.scene.models[\"myModel\"];\n````\n\nThat's assuming that we've created the STLModel in the default xeogl Scene, which we're doing in these examples.\n\nWe can also get all the STLModels in a Scene, using the Scene's {{#crossLink \"Scene/types:property\"}}{{/crossLink}} map:\n\n````javascript\nvar stlModels = xeogl.scene.types[\"xeogl.STLModel\"];\n\nmodel = stlModels[\"myModel\"];\n````\n\n### Finding loaded Entities\n\nOnce the STLModel has loaded, its {{#crossLink \"Scene\"}}{{/crossLink}} will contain various components that represent the elements of the STL file.\nWe'll now access some of those components by ID, to query and update them programmatically.\n\nLet's highlight an {{#crossLink \"Entity\"}}Entity{{/crossLink}} in our STLModel:\n\n````javascript\nvar entities = scene.entities;\n\nentities[\"myModel#1\"].highlighted = true;\n````\n\nAn STLModel also has an ID map of the components within it. Let's highlight an {{#crossLink \"Entity\"}}Entities{{/crossLink}}:\n\n````javascript\nmodel.components[\"myModel#1\"].highlighted = true;\n````\n\nAn STLModel also has a map containing just the {{#crossLink \"Entity\"}}Entities{{/crossLink}}:\n\n````javascript\nmodel.entities[\"myModel#1\"].highlighted = true;\n````\n\nTODO: ID format description\n\n### Transforming an STLModel\n\nAn STLModel lets us transform its Entities as a group.\n\nWe can attach a modeling {{#crossLink \"Transform\"}}{{/crossLink}}, as a either a\nconfiguration object or a component instance:\n\n```` Javascript\n// Attach transforms as a configuration object:\nmodel.transform = {\n       type: \"xeogl.Translate\",\n       xyz: [-35, 0, 0],\n       parent: {\n           type: \"xeogl.Rotate\",\n           xyz: [0, 1, 0],\n           angle: 45\n       }\n    };\n\n// Attach our own transform instances:\nmodel.transform = new xeogl.Translate({\n       xyz: [-35, 0, 0],\n       parent: new xeogl.Rotate({\n           xyz: [0, 1, 0],\n           angle: 45\n       })\n    });\n````\n\nWe can also provide the {{#crossLink \"Transform\"}}{{/crossLink}} to the STLModel constructor, as either configuration\nobjects or instances.\n\nHere we'll provide a Transform hierarchy as a configuration object:\n\n```` Javascript\n// Model internally instantiates our transform components:\nvar model = new xeogl.STLModel({\n    src: \"models/stl/F1Concept.stl\",\n    transform: {\n       type: \"xeogl.Translate\",\n       xyz: [-35, 0, 0],\n       parent: {\n           type: \"xeogl.Rotate\",\n           xyz: [0, 1, 0],\n           angle: 45\n       }\n    }\n});\n\n````\n\n### Getting the World-space boundary of an STLModel\n\nGet the World-space axis-aligned boundary like this:\n\n```` Javascript\nmodel.on(\"boundary\", function() {\n   var aabb = model.aabb; //  [xmin, ymin,zmin,xmax,ymax, zmax]\n   //...\n});\n````\n\nWe can also subscribe to changes to that boundary, which will happen whenever\n\n* the STLModel's {{#crossLink \"Transform\"}}{{/crossLink}} is updated,\n* components are added or removed, or\n* the STLModel is reloaded from a different source,\n* the {{#crossLink \"Geometry\"}}Geometries{{/crossLink}} or {{#crossLink \"Transform\"}}Transforms{{/crossLink}} of its {{#crossLink \"Entities\"}}Entities{{/crossLink}} are updated.\n\n````javascript\nmodel.on(\"boundary\", function() {\n   var aabb = model.aabb; // [xmin, ymin,zmin,xmax,ymax, zmax]\n});\n````\n\n### Clearing an STLModel\n\n```` Javascript\nmodel.clear();\n````\n\n### Destroying an STLModel\n\n```` Javascript\nmodel.destroy();\n````",
            "submodule": "models",
            "is_constructor": 1,
            "params": [
                {
                    "name": "scene",
                    "description": "Parent {{#crossLink \"Scene\"}}Scene{{/crossLink}} - creates this STLModel in the default\n{{#crossLink \"Scene\"}}Scene{{/crossLink}} when omitted.",
                    "type": "Scene",
                    "optional": true
                },
                {
                    "name": "cfg",
                    "description": "Configs",
                    "type": "*",
                    "optional": true,
                    "props": [
                        {
                            "name": "id",
                            "description": "Optional ID, unique among all components in the parent {{#crossLink \"Scene\"}}Scene{{/crossLink}},\ngenerated automatically when omitted.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "meta",
                            "description": "Optional map of user-defined metadata to attach to this STLModel.",
                            "type": "String:Object",
                            "optional": true
                        },
                        {
                            "name": "src",
                            "description": "Path to an STL file. You can set this to a new file path at any time, which will cause the",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "quantizeGeometry",
                            "description": "When true, quantizes geometry to reduce memory and GPU bus usage.",
                            "optional": true,
                            "optdefault": "true"
                        },
                        {
                            "name": "combineGeometry",
                            "description": "When true, combines geometry vertex buffers to improve rendering performance.",
                            "optional": true,
                            "optdefault": "true"
                        },
                        {
                            "name": "smoothNormals",
                            "description": "When true, automatically converts face-oriented normals to vertex normals for a smooth appearance - see <a href=\"#smoothing-normals\">Smoothing Normals</a>.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "smoothNormalsAngleThreshold",
                            "description": "See <a href=\"#smoothing-normals\">Smoothing Normals</a>.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "20"
                        },
                        {
                            "name": "backfaces",
                            "description": "When true, allows visible backfaces, wherever specified in the STL. When false, ignores backfaces.",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "ghosted",
                            "description": "When true, sets all the Model's Entities initially ghosted.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "highlighted",
                            "description": "When true, sets all the Model's Entities initially highlighted.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "outline",
                            "description": "When true, sets all the Model's Entities initially outlined.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "ghostEdgeThreshold",
                            "description": "When ghosting, this is the threshold angle between normals of adjacent triangles, below which their shared wireframe edge is not drawn.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "2"
                        },
                        {
                            "name": "transform",
                            "description": "A Local-to-World-space (modelling) {{#crossLink \"Transform\"}}{{/crossLink}} to attach to this STLModel.\nMust be within the same {{#crossLink \"Scene\"}}{{/crossLink}} as this STLModel. Internally, the given\n{{#crossLink \"Transform\"}}{{/crossLink}} will be inserted above each top-most {{#crossLink \"Transform\"}}Transform{{/crossLink}}\nthat the STLModel attaches to its {{#crossLink \"Entity\"}}Entities{{/crossLink}}.",
                            "type": "Number|String|Transform",
                            "optional": true
                        },
                        {
                            "name": "splitEntities",
                            "description": "When true, creates a separate {{#crossLink \"Entity\"}}{{/crossLink}} for each group of faces that share the same vertex colors. Only works with binary STL.|",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        }
                    ]
                }
            ],
            "extends": "Model"
        },
        "BuildableModel": {
            "name": "BuildableModel",
            "shortname": "BuildableModel",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "xeogl",
            "namespace": "",
            "file": "examples/js/models/buildableModel.js",
            "line": 1,
            "description": "A **BuildableModel** is a {{#crossLink \"Model\"}}{{/crossLink}} that provides a \"stateful builder\" API through which you can\nprocedurally generate xeogl content.\n\n<a href=\"../../examples/#models_generation_city\"><img src=\"http://i.giphy.com/l0HlPJO1AN01Lz27e.gif\"></img></a>\n\n## Overview\n\n* A BuilderModel implements the [Builder pattern](https://en.wikipedia.org/wiki/Builder_pattern).\n* Create various assets within a BuilderModel, such as {{#crossLink \"Geometry\"}}Geometries{{/crossLink}}\nand {{#crossLink \"Material\"}}Materials{{/crossLink}}, then create {{#crossLink \"Entity\"}}Entities{{/crossLink}} that use those assets.\n* The BuilderModel then owns those components and will destroy them when you\ncall its {{#crossLink \"BuildableModel/clear:method\"}}clear(){{/crossLink}} or {{#crossLink \"Component/destroy:method\"}}destroy(){{/crossLink}} methods.\n* A BuildableModel can be transformed within World space by attaching it to a {{#crossLink \"Transform\"}}{{/crossLink}}.\n* A BuildableModel provides its World-space boundary as a {{#crossLink \"Boundary3D\"}}{{/crossLink}}.\n\n## Examples\n\n* [Generating a city with a BuildableModel](../../examples/#models_generation_city)</li>\n\n## Usage\n\nA BuildableModel containing ten textured boxes with random sizes and positions:\n\n````javascript\nvar model = new xeogl.BuildableModel();\n\n// Add a BoxGeometry asset\nbuildableModel.asset(\"boxGeometry\", {\n    type: \"xeogl.BoxGeometry\"\n});\n\n// Add a PhongMaterial asset\nbuildableModel.asset(\"gridMaterial\", {\n    type: \"xeogl.PhongMaterial\",\n    ambient: [0.9, 0.3, 0.9],\n    shininess: 30,\n    diffuseMap: {\n        src: \"textures/diffuse/gridMaterial.jpg\"\n    }\n});\n\n// Set the BoxGeometry asset as the current geometry\nbuildableModel.geometry(\"boxGeometry\");\n\n// Set the PhongMaterial asset as the current material\nbuildableModel.material(\"gridMaterial\");\n\n// Build ten entities with random sizes and positions,\n// that each get the current geometry and material\nfor (var i = 0; i < 10; i++) {\n\n    buildableModel.scale(Math.random() * 10 + 1, Math.random() * 10 + 1, Math.random() * 10 + 1);\n    buildableModel.pos(Math.random() * 100 - 50, Math.random() * 100 - 50, Math.random() * 100 - 50);\n\n    buildableModel.entity();\n}\n````",
            "submodule": "models",
            "is_constructor": 1,
            "params": [
                {
                    "name": "scene",
                    "description": "Parent {{#crossLink \"Scene\"}}Scene{{/crossLink}} - creates this BuildableModel in the default\n{{#crossLink \"Scene\"}}Scene{{/crossLink}} when omitted.",
                    "type": "Scene",
                    "optional": true
                },
                {
                    "name": "cfg",
                    "description": "Configs",
                    "type": "*",
                    "optional": true,
                    "props": [
                        {
                            "name": "id",
                            "description": "Optional ID, unique among all components in the parent {{#crossLink \"Scene\"}}Scene{{/crossLink}},\ngenerated automatically when omitted.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "meta",
                            "description": "Optional map of user-defined metadata to attach to this BuildableModel.",
                            "type": "String:Object",
                            "optional": true
                        },
                        {
                            "name": "transform",
                            "description": "A Local-to-World-space (modelling) {{#crossLink \"Transform\"}}{{/crossLink}} to attach to this BuildableModel.\nMust be within the same {{#crossLink \"Scene\"}}{{/crossLink}} as this BuildableModel. Internally, the given\n{{#crossLink \"Transform\"}}{{/crossLink}} will be inserted above each top-most {{#crossLink \"Transform\"}}Transform{{/crossLink}}\nthat the BuildableModel attaches to its {{#crossLink \"Entity\"}}Entities{{/crossLink}}.",
                            "type": "Number|String|Transform",
                            "optional": true
                        }
                    ]
                }
            ],
            "extends": "Model"
        },
        "GLTFModel": {
            "name": "GLTFModel",
            "shortname": "GLTFModel",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "xeogl",
            "namespace": "",
            "file": "examples/js/models/glTFModel.js",
            "line": 1,
            "description": "A **GLTFModel** is a {{#crossLink \"Model\"}}{{/crossLink}} loaded from a <a href=\"https://github.com/KhronosGroup/glTF\" target = \"_other\">glTF</a> file.\n\n<a href=\"../../examples/#importing_gltf_GearboxAssy\"><img src=\"../../../assets/images/gltf/glTF_gearbox_squashed.png\"></img></a>\n\n## Overview\n\n* A GLTFModel is a container of {{#crossLink \"Component\"}}Components{{/crossLink}} that loads itself from a glTF file.\n* It begins loading as soon as you set its {{#crossLink \"GLTFModel/src:property\"}}{{/crossLink}}\nproperty to the location of a valid glTF file.\n* You can set {{#crossLink \"GLTFModel/src:property\"}}{{/crossLink}} to a new file path at any time, which causes\nthe GLTFModel to clear itself and load components from the new file.\n\nIt inherits these capabilities from its {{#crossLink \"Model\"}}{{/crossLink}} base class:\n\n* Allows you to access and manipulate the components within it.\n* Can be transformed within World-space by attaching it to a {{#crossLink \"Transform\"}}{{/crossLink}}.\n* Provides its dynamic World-space axis-aligned boundary.\n\n## Supported glTF 2.0 features\n\nSo far, GLTFModel loads only geometry, materials and modeling transform hierarchies, without animations. It does not\nload cameras or lights because its purpose is to import models into environments that have already been created using\nthe xeogl API.\n\nIn addition to glTF's core metal-roughness material workflow, GLTFModel also supports two material extensions:\n\n* [KHR_materials_pbrSpecularGlossiness](https://github.com/KhronosGroup/glTF/blob/master/extensions/Khronos/KHR_materials_pbrSpecularGlossiness/README.md)\n* [KHR_materials_common](https://github.com/KhronosGroup/glTF/blob/master/extensions/Khronos/KHR_materials_common/README.md)\n\n## Examples\n\n* [Damaged Helmet with metal/rough PBR materials](../../examples/#importing_gltf_DamagedHelmet)\n* [Hover bike with specular/glossiness PBR materials](../../examples/#importing_gltf_Hoverbike)\n* [Loading glTF with embedded assets](../../examples/#importing_gltf_embedded)\n* [Parsing glTF JSON with embedded assets](../../examples/#importing_gltf_parsing_embedded)\n* [Ignoring materials when loading](../../examples/#importing_gltf_options_ignoreMaterials)\n* [Baking transform hierarchies when loading](../../examples/#importing_gltf_options_flattenTransforms)\n* [Converting materials to simple Lambertian when loading](../../examples/#importing_gltf_options_lambertMaterials)\n* [All loading options for max performance](../../examples/#importing_gltf_options_maxPerformance)\n\n## Usage\n\n* [Loading glTF](#loading-gltf)\n* [Parsing glTF](#parsing-gltf)\n* [Loading options](#loading-options)\n* [Finding loaded Entities](#finding-loaded-entities)\n* [Transforming a GLTFModel](#transforming-a-gltfmodel)\n* [Getting the World-space boundary of a GLTFModel](#getting-the-world-space-boundary-of-a-gltfmodel)\n* [Clearing a GLTFModel](#clearing-a-gltfmodel)\n* [Destroying a GLTFModel](#destroying-a-gltfmodel)\n\n### Loading glTF\n\nLoad a glTF file by creating a GLTFModel:\n\n````javascript\nvar model = new xeogl.GLTFModel({\n    id: \"gearbox\",\n    src: \"models/gltf/gearbox_conical/scene.gltf\",\n});\n````\n\nA GLTFModel prefixes its own ID to those of its components. The ID is optional, but in this example we're providing our own custom ID.\n\nThe GLTFModel begins loading the glTF file immediately.\n\nTo bind a callback to be notified when the file has loaded (which fires immediately if already loaded):\n\n````javascript\nmodel.on(\"loaded\", function() {\n       // GLTFModel has loaded!\n   });\n````\n\nYou can also bind a callback to fire if loading fails:\n\n````javascript\nmodel.on(\"error\", function(msg) {\n       // Error occurred\n   });\n````\n\nTo switch to a different glTF file, simply update {{#crossLink \"GLTFModel/src:property\"}}{{/crossLink}}:\n\n````javascript\nmodel.src = \"models/gltf/Buggy/glTF/Buggy.gltf\"\n````\n\n### Parsing glTF\n\nIf we have a glTF JSON with embedded assets in memory, then we can parse it straight into a GLTFModel using the\nstatic {{#crossLink \"GLTFModel/parse:method\"}}{{/crossLink}} method:\n\n````javascript\nxeogl.GLTFModel.parse(model, json); // Clears the target model first\n````\n\n### Loading options\n\nThe following options may be specified when loading glTF:\n\n| Option | Type | Range | Default Value | Description |\n|:--------:|:----:|:-----:|:-------------:|:-----:|:-----------:|\n| flattenTransforms | Boolean |  | true | Flattens transform hierarchies to improve rendering performance. |\n| lambertMaterials | Boolean |  | false | When true, gives each {{#crossLink \"Entity\"}}{{/crossLink}} the same {{#crossLink \"LambertMaterial\"}}{{/crossLink}} and a {{#crossLink \"Entity/colorize:property\"}}{{/crossLink}} set the to diffuse color extracted from the glTF material. This is typically used for CAD models with huge amounts of objects, and will ignore textures.|\n| quantizeGeometry | Boolean |  | true | When true, quantizes geometry to reduce memory and GPU bus usage (see {{#crossLink \"Geometry\"}}{{/crossLink}}). |\n| combineGeometry | Boolean |  | true | When true, combines geometry vertex buffers to improve rendering performance (see {{#crossLink \"Geometry\"}}{{/crossLink}}). |\n| backfaces | Boolean |  | true | When true, allows visible backfaces, wherever specified in the glTF. When false, ignores backfaces. |\n| ghost | Boolean |  | false | When true, ghosts all the model's Entities (see {{#crossLink \"Entity\"}}{{/crossLink}} and {{#crossLink \"EmphasisMaterial\"}}{{/crossLink}}). |\n| outline | Boolean |  | false | When true, outlines all the model's Entities (see {{#crossLink \"Entity\"}}{{/crossLink}} and {{#crossLink \"OutlineMaterial\"}}{{/crossLink}}). |\n| highlight | Boolean |  | false | When true, highlights all the model's Entities (see {{#crossLink \"Entity\"}}{{/crossLink}} and {{#crossLink \"EmphasisMaterial\"}}{{/crossLink}}). |\n| ghostEdgeThreshold | Number | [0..180] | 2 | When ghosting, this is the threshold angle between normals of adjacent triangles, below which their shared wireframe edge is not drawn. |\n| maxEntities | Number | | | Optional maximum number of {{#crossLink \"Entity\"}}{{/crossLink}}'s to load. |\n| included | Function(entityId) | | null | Optional callback to mask which {{#crossLink \"Entity\"}}{{/crossLink}}'s are loaded. Entity will only be loaded when this callback returns ````true``` for the given Entity ID. |\n\nUsing the ````flattenTransforms```` option to load a glTF model while flattening its transform hierarchy:\n\n````javascript\nvar model = new xeogl.GLTFModel({\n    id: \"gearbox\",\n    src: \"models/gltf/gearbox_conical/scene.gltf\",\n    flattenTransforms: true\n});\n````\n\nUsing the ````included```` option to load all entities except for those with IDs \"gearbox#77.0\" and \"gearbox#79.0\":\n\n````javascript\nvar model = new xeogl.GLTFModel({\n    id: \"gearbox\",\n    src: \"models/gltf/gearbox_conical/scene.gltf\",\n    included: function(entityId) {\n       return id !== (\"gearbox#77.0\") &&  (id !== \"gearbox#79.0\");\n    }\n});\n````\n\n### Finding GLTFModels in Scenes\n\nOur GLTFModel will now be registered by ID on its Scene, so we can now find it like this:\n\n````javascript\nmodel = xeogl.scene.models[\"gearbox\"];\n````\n\nThat's assuming that we've created the GLTFModel in the default xeogl Scene, which we're doing in these examples.\n\nWe can also get all the GLTFModels in a Scene, using the Scene's {{#crossLink \"Scene/types:property\"}}{{/crossLink}} map:\n\n````javascript\nvar gltfModels = xeogl.scene.types[\"xeogl.GLTFModel\"];\n\nmodel = gltfModels[\"myModel\"];\n````\n\n### Finding loaded Entities\n\nOnce the GLTFModel has loaded, its {{#crossLink \"Scene\"}}{{/crossLink}} will contain various components that represent the elements of the glTF file.\nWe'll now access some of those components by ID, to query and update them programmatically.\n\nLet's highlight a couple of {{#crossLink \"Entity\"}}Entities{{/crossLink}} in our GLTFModel:\n\n````javascript\nvar entities = scene.entities;\n\nentities[\"gearbox77.0\"].highlighted = true;\nentities[\"gearbox79.0\"].highlighted = true;\n````\n\nA GLTFModel also has ID maps of the components within it. Its components map contains all\nits {{#crossLink \"Component\"}}Components{{/crossLink}} in one big map:\n\n````javascript\nmodel.components[\"gearbox77.0\"].highlighted = true;\n````\n\nwhile its entities map contains just the {{#crossLink \"Entity\"}}Entities{{/crossLink}}:\n\n````javascript\nmodel.entities[\"gearbox77.0\"].highlighted = true;\n````\n\nNote the format of the {{#crossLink \"Entity\"}}{{/crossLink}} IDs:\n\n````<GLTFModel ID>#<glTF node ID>.<glTF primitive index>````\n\nWithin the glTF, a node's mesh may contain multiple primitives. For each primitive, xeogl will create\na separate {{#crossLink \"Entity\"}}{{/crossLink}}. Within each Entity's ID, the part before the hash is the ID of the GLTFModel,\nfollowed by the ID of the node, then \".\", then the index of the primitive within the mesh.\n\n### Transforming a GLTFModel\n\nA GLTFModel lets us transform its Entities as a group.\n\nWe can attach a modeling {{#crossLink \"Transform\"}}{{/crossLink}} to our GLTFModel, as a either a\nconfiguration object or a component instance:\n\n```` Javascript\n// Attach transforms as a configuration object:\nmodel.transform = {\n       type: \"xeogl.Translate\",\n       xyz: [-35, 0, 0],\n       parent: {\n           type: \"xeogl.Rotate\",\n           xyz: [0, 1, 0],\n           angle: 45\n       }\n    };\n\n// Attach our own transform instances:\nmodel.transform = new xeogl.Translate({\n       xyz: [-35, 0, 0],\n       parent: new xeogl.Rotate({\n           xyz: [0, 1, 0],\n           angle: 45\n       })\n    });\n````\n\nWe can also provide the {{#crossLink \"Transform\"}}{{/crossLink}} to the GLTFModel constructor, as either configuration\nobjects or instances.\n\nHere we'll provide a Transform hierarchy as a configuration object:\n\n```` Javascript\n// Model internally instantiates our transform components:\nvar model = new xeogl.GLTFModel({\n    src: \"models/gltf/gearbox_conical/scene.gltf\",\n    transform: {\n       type: \"xeogl.Translate\",\n       xyz: [-35, 0, 0],\n       parent: {\n           type: \"xeogl.Rotate\",\n           xyz: [0, 1, 0],\n           angle: 45\n       }\n    }\n});\n\n````\n\n### Getting the World-space boundary of a GLTFModel\n\nGet the World-space axis-aligned boundary like this:\n\n```` Javascript\nmodel.on(\"boundary\", function() {\n   var aabb = model.aabb; //  [xmin, ymin,zmin,xmax,ymax, zmax]\n   //...\n});\n````\n\nWe can also subscribe to changes to that boundary, which will happen whenever\n\n* the GLTFModel's {{#crossLink \"Transform\"}}{{/crossLink}} is updated,\n* components are added or removed, or\n* the GLTF model is reloaded from a different source,\n* the {{#crossLink \"Geometry\"}}Geometries{{/crossLink}} or {{#crossLink \"Transform\"}}Transforms{{/crossLink}} of its {{#crossLink \"Entities\"}}Entities{{/crossLink}} are updated.\n\n````javascript\nmodel.on(\"boundary\", function() {\n   var aabb = model.aabb; // [xmin, ymin,zmin,xmax,ymax, zmax]\n});\n````\n\n### Clearing a GLTFModel\n\n```` Javascript\nmodel.clear();\n````\n\n### Destroying a GLTFModel\n\n```` Javascript\nmodel.destroy();\n````",
            "submodule": "models",
            "is_constructor": 1,
            "params": [
                {
                    "name": "scene",
                    "description": "Parent {{#crossLink \"Scene\"}}Scene{{/crossLink}} - creates this GLTFModel in the default\n{{#crossLink \"Scene\"}}Scene{{/crossLink}} when omitted.",
                    "type": "Scene",
                    "optional": true
                },
                {
                    "name": "cfg",
                    "description": "Configs",
                    "type": "*",
                    "optional": true,
                    "props": [
                        {
                            "name": "id",
                            "description": "Optional ID, unique among all components in the parent {{#crossLink \"Scene\"}}Scene{{/crossLink}},\ngenerated automatically when omitted.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "meta",
                            "description": "Optional map of user-defined metadata to attach to this GLTFModel.",
                            "type": "String:Object",
                            "optional": true
                        },
                        {
                            "name": "src",
                            "description": "Path to a glTF file. You can set this to a new file path at any time, which will cause the",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "flattenTransforms",
                            "description": "Flattens transform hierarchies to improve rendering performance.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        },
                        {
                            "name": "lambertMaterials",
                            "description": "When true, gives each }{{/crossLink}} the same {{#crossLink \"LambertMaterial\"}}{{/crossLink}} and a {{#crossLink \"Entity/colorize:property\"}}{{/crossLink}} set the to diffuse color extracted from the glTF material. This is typically used for CAD models with huge amounts of objects, and will ignore textures.|",
                            "type": "#crossLink \"Entity\"",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "quantizeGeometry",
                            "description": "When true, quantizes geometry to reduce memory and GPU bus usage. |",
                            "optional": true,
                            "optdefault": "true"
                        },
                        {
                            "name": "combineGeometry",
                            "description": "When true, combines geometry vertex buffers to improve rendering performance. |",
                            "optional": true,
                            "optdefault": "true"
                        },
                        {
                            "name": "backfaces",
                            "description": "When true, allows visible backfaces, wherever specified in the glTF. When false, ignores backfaces. |",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "ghosted",
                            "description": "When true, sets all the Model's Entities initially ghosted. |",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "highlighted",
                            "description": "When true, sets all the Model's Entities initially highlighted. |",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "outline",
                            "description": "When true, sets all the Model's Entities initially outlined. |",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "ghostEdgeThreshold",
                            "description": "When ghosting, this is the threshold angle between normals of adjacent triangles, below which their shared wireframe edge is not drawn. |",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "2"
                        },
                        {
                            "name": "maxEntities",
                            "description": "Optional maximum number of {{#crossLink \"Entity\"}}{{/crossLink}}'s to load. |",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "included",
                            "description": "Optional callback to mask which {{#crossLink \"Entity\"}}{{/crossLink}}'s are loaded. Entity will only be loaded when this callback returns ````true``` for the given Entity ID. |\nGLTFModel to load components from the new file (after first destroying any components loaded from a previous file path).",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "transform",
                            "description": "A Local-to-World-space (modelling) {{#crossLink \"Transform\"}}{{/crossLink}} to attach to this GLTFModel.\nMust be within the same {{#crossLink \"Scene\"}}{{/crossLink}} as this GLTFModel. Internally, the given\n{{#crossLink \"Transform\"}}{{/crossLink}} will be inserted above each top-most {{#crossLink \"Transform\"}}Transform{{/crossLink}}\nthat the GLTFModel attaches to its {{#crossLink \"Entity\"}}Entities{{/crossLink}}.",
                            "type": "Number|String|Transform",
                            "optional": true
                        }
                    ]
                }
            ],
            "extends": "Model"
        },
        "SceneJSModel": {
            "name": "SceneJSModel",
            "shortname": "SceneJSModel",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "xeogl",
            "namespace": "",
            "file": "examples/js/models/sceneJSModel.js",
            "line": 1,
            "description": "A **SceneJSModel** is a {{#crossLink \"Model\"}}{{/crossLink}} that\nimports content from the JSON-based <a href=\"http://scenejs.org\">SceneJS</a> scene definition format.\n\n<a href=\"../../examples/#importing_scenejs_tronTank\"><img src=\"http://i.giphy.com/l3vR50pFTpEbJTztS.gif\"></img></a>\n\n## Overview\n\n* A SceneJSModel is a container of {{#crossLink \"Component\"}}Components{{/crossLink}} that loads itself from a\nSceneJS scene definition, given as either a JSON file or a JavaScript object (POJO).\n* It begins loading as soon as you either set its {{#crossLink \"SceneJSModel/src:property\"}}{{/crossLink}}\nproperty to the location of a valid SceneJS JSON file, or set its {{#crossLink \"SceneJSModel/data:property\"}}{{/crossLink}} property to a\nvalid POJO.\n* You can set these properties to new values at any time, which causes\nthe SceneJSModel to clear itself and load fresh components.\n* Can be configured to do a best-effort conversion of SceneJS Phong materials into xeogl's PBR {{#crossLink \"PBRMetalness\"}}{{/crossLink}} or {{#crossLink \"SpecularMaterials\"}}{{/crossLink}}.\n\nIt inherits these capabilities from its {{#crossLink \"Model\"}}{{/crossLink}} base class:\n\n* Allows you to access and manipulate the components within it.\n* Can be transformed within World-space by attaching it to a {{#crossLink \"Transform\"}}{{/crossLink}}.\n* Provides its World-space boundary as a {{#crossLink \"Boundary3D\"}}{{/crossLink}}.\n\n<img src=\"../../../assets/images/SceneJSModel.png\"></img>\n\n## SceneJS Support\n\nSceneJSModel was developed to import the [Tron Tank model](../../examples/#importing_scenejs_tronTank). As such,\nit only imports a limited subset of the SceneJS scene definition API. <b>Use with caution</b> and be prepared to\nfix and contribute missing functionality!\n\nSceneJS nodes supported so far:\n\n* ````\"node\"````\n* ````\"rotate\"````\n* ````\"translate\"````\n* ````\"scale\"````\n* ````\"material\"````\n* ````\"texture\"````\n* ````\"fresnel\"````\n* ````\"flags\"````\n* ````\"geometry\"````\n* ````\"layer\"````\n* ````\"stage\"````\n\nUnsupported API features include:\n\n* Lights\n* Cameras\n* Shared node cores\n* SceneJS plugins\n\n## Examples\n\n* [Importing POJO defining geometry with diffuse, specular and normal maps](../../examples/#importing_scenejs_pojo_textures)\n* [Importing POJO defining transparent geometry](../../examples/#importing_scenejs_pojo_transparency)\n* [Importing JSON file defining geometry with diffuse, specular and normal maps](../../examples/#importing_scenejs_json_textures)\n* [Importing JSON file defining the SceneJS Tron Tank](../../examples/#importing_scenejs_tronTank)\n\n## Usage\n\n#### Loading a POJO scene definition\n\nThe simplest way to import SceneJS content is by setting a POJO on the SceneJSModel's {{#crossLink \"SceneJSModel/data:property\"}}data{{/crossLink}}\nproperty:\n\n````javascript\nvar pojoModel = new xeogl.SceneJSModel({\n       id: \"myModel\",\n\n       // Our POJO scene definition\n       data: {\n           type: \"node\",\n           nodes: [\n               {\n                   type: \"rotate\",\n                   id: \"myRotate\",\n                   nodes: [\n                       {\n                           type: \"geometry\",\n                           id: \"boxEntity\",\n                           primitive: \"triangles\",\n                           positions: [\n                               2, 2, 2, -2, 2, 2, -2, -2, 2, 2, -2, 2, 2, 2, 2, 2, -2,\n                               2, 2, -2, -2, 2, 2, -2, 2, 2, 2, 2, 2, -2, -2, 2, -2,\n                               -2, 2, 2, -2, 2, 2, -2, 2, -2, -2, -2, -2, -2, -2, 2,\n                               -2, -2, -2, 2, -2, -2, 2, -2, 2, -2, -2, 2, 2, -2, -2,\n                               -2, -2, -2, -2, 2, -2, 2, 2, -2\n                           ],\n                           normals: [\n                               0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1,\n                               0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, -1, 0,\n                               0, -1, 0, 0, -1, 0, 0, -1, 0, 0, 0, -1, 0, 0, -1, 0, 0,\n                              -1, 0, 0, -1, 0, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1\n                           ],\n                           uv: [\n                               5, 5, 0, 5, 0, 0, 5, 0, 0, 5, 0, 0, 5, 0, 5, 5,\n                               5, 0, 5, 5, 0, 5, 0, 0, 5, 5, 0, 5, 0, 0, 5, 0,\n                               0, 0, 5, 0, 5, 5, 0, 5, 0, 0, 5, 0, 5, 5, 0, 5\n                           ],\n                           indices: [\n                               0, 1, 2, 0, 2, 3, 4, 5, 6, 4, 6, 7, 8, 9, 10, 8, 10, 11,\n                               12, 13, 14, 12, 14, 15, 16, 17, 18, 16, 18, 19, 20, 21,\n                               22, 20, 22, 23\n                           ]\n                       }\n                   ]\n               }\n           ]\n       }\n    });\n\n// Set camera position\nvar camera = pojoModel.scene.camera;\ncamera.eye = [0, 0, -25];\ncamera.look = [0, 0, 0];\ncamera.up = [0, 1, 0];\n````\n\n#### Finding components\n\nOur SceneJSModel has now created various xeogl components\nwithin itself, which we can find by their IDs. In this particular example, our POJO has a SceneJS ````\"rotate\"```` node\nwith ID ````\"myRotate\"````. Our SceneJSModel parsed that into a {{#crossLink \"Rotate\"}}{{/crossLink}} component with\nID ````\"myModel.myRotate\"````.\n\nTo see what components our SceneJSModel created, we can drop this expression into the browser's JavaScript\ndebug console (we're using Chrome here):\n\n````\npojoModel.types;\n````\n\nThe result is the value of the SceneJSModel's {{#crossLink \"Model/types:property\"}}types{{/crossLink}} map, which\ncontains its xeogl components, mapped to their types:\n\n<img src=\"../../../assets/images/screenshots/SceneJSModel_console_tankModel.types.png\"></img>\n\nHere we've expanded the {{#crossLink \"Rotate\"}}{{/crossLink}} components, and we can see\nour {{#crossLink \"Rotate\"}}{{/crossLink}}. **Note that its ID is prefixed with the ID of the SceneJSModel.**\n\nLet's get that {{#crossLink \"Rotate\"}}{{/crossLink}} from our SceneJSModel's\n{{#crossLink \"Model/components:property\"}}{{/crossLink}} map and set it spinning:\n\n```` JavaScript\nvar rotate = pojoModel.components[\"myModel.myRotate\"];\n\npojoModel.scene.on(\"tick\", function() {\n   rotate.angle += 0.2;\n});\n````\n\n#### Loading a JSON scene definition\n\nAs shown in the example below, we can also import a SceneJS scene definition from a JSON file (eg. <a href=\"../../examples/models/scenejs/tronTank.json\">tronTank.json</a>).\nNote that we need to wait for the SceneJSModel's {{#crossLink \"SceneJSModel/loaded:event\"}}{{/crossLink}} event before we\ncan access its components. In this example we're also showing how a SceneJSModel can be attached to a modeling {{#crossLink \"Transform\"}}{{/crossLink}}\nhierarchy to transform it within World space (see {{#crossLink \"Model\"}}{{/crossLink}}).\n\n````javascript\n// Import SceneJS JSON model\nvar tankModel = new xeogl.SceneJSModel({\n       id: \"tankModel\",\n\n       // Path to our JSON scene definition file\n       src: \"models/scenejs/tronTank.json\",\n\n       // We can also bolt on a hierarchy of modeling transforms,\n       // to transform the entire SceneJSModel in World space\n       transform: new xeogl.Rotate({\n           xyz: [0, 1, 0],\n           angle: 0,\n           parent: new xeogl.Translate({\n               xyz: [0, 0, 0]\n           })\n       })\n    });\n\n// Once our SceneJSModel has loaded, we can access its components\ntankModel.on(\"loaded\", function() {\n\n       tankModel.components[\"tankModel.gunDir\"].angle = gunDir;\n\n       // Set camera position\n       var camera = tankModel.scene.camera;\n       camera.eye = [0, 0, -70];\n       camera.look = [0, 0, 0];\n       camera.up = [0, 1, 0];\n   });\n````\n\n#### Converting materials to PBR\n\n\n````javascript\nvar pbrSpecularTankModel = new xeogl.SceneJSModel({\n   src: \"models/scenejs/tronTank.json\",\n   materialWorkflow: \"SpecularMaterial\"\n});\n````\n\n````javascript\nvar pbrMetalnessTankModel = new xeogl.SceneJSModel({\n   src: \"models/scenejs/tronTank.json\",\n   materialWorkflow: \"MetallicMaterial\"\n});\n````",
            "submodule": "models",
            "is_constructor": 1,
            "params": [
                {
                    "name": "scene",
                    "description": "Parent {{#crossLink \"Scene\"}}Scene{{/crossLink}} - creates this SceneJSModel in the default\n{{#crossLink \"Scene\"}}Scene{{/crossLink}} when omitted.",
                    "type": "Scene",
                    "optional": true
                },
                {
                    "name": "cfg",
                    "description": "Configs",
                    "type": "*",
                    "optional": true,
                    "props": [
                        {
                            "name": "id",
                            "description": "Optional ID, unique among all components in the parent {{#crossLink \"Scene\"}}Scene{{/crossLink}},\ngenerated automatically when omitted.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "meta",
                            "description": "Optional map of user-defined metadata to attach to this SceneJSModel.",
                            "type": "String:Object",
                            "optional": true
                        },
                        {
                            "name": "materialWorkflow",
                            "description": "Selects material workflow - \"classic\" | \"pbrMatalness\" | \"pbrSpecular\"",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "src",
                            "description": "Path to a SceneJS JSON scene description file.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "data",
                            "description": "Path to a SceneJS JSON scene description file.",
                            "type": "String",
                            "optional": true
                        }
                    ]
                }
            ],
            "extends": "Geometry"
        },
        "TestModel": {
            "name": "TestModel",
            "shortname": "TestModel",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "xeogl",
            "namespace": "",
            "file": "examples/js/models/testModel.js",
            "line": 1,
            "description": "A **TestModel** is a procedurally-generated test {{#crossLink \"Model\"}}{{/crossLink}} containing {{#crossLink \"Entity\"}}Entities{{/crossLink}} that represent city buildings.\n\n<a href=\"../../examples/#models_generation_TestModel\"><img src=\"http://i.giphy.com/l0HlPJO1AN01Lz27e.gif\"></img></a>\n\n## Overview\n\n* Procedurally generates simple content for development and testing.\n* Allows you to develop some basic capabilities of your app without needing to load any models.\n\nIt inherits these capabilities from its {{#crossLink \"Model\"}}{{/crossLink}} base class:\n\n* Allows you to access and manipulate the components within it.\n* Can be transformed within World-space by attaching it to a {{#crossLink \"Transform\"}}{{/crossLink}}.\n* Provides its dynamic World-space axis-aligned boundary.\n\n## Examples\n\n* TODO\n\n## Usage\n\n````javascript\nvar model = new xeogl.TestModel({\n    id: \"myModel\",\n    size: 5000, // Width of each axis\n    density: 4 // How many buildings on each axis\n});\n````",
            "submodule": "models",
            "is_constructor": 1,
            "params": [
                {
                    "name": "scene",
                    "description": "Parent {{#crossLink \"Scene\"}}Scene{{/crossLink}} - creates this TestModel in the default\n{{#crossLink \"Scene\"}}Scene{{/crossLink}} when omitted.",
                    "type": "Scene",
                    "optional": true
                },
                {
                    "name": "cfg",
                    "description": "Configs",
                    "type": "*",
                    "optional": true,
                    "props": [
                        {
                            "name": "id",
                            "description": "Optional ID, unique among all components in the parent {{#crossLink \"Scene\"}}Scene{{/crossLink}},\ngenerated automatically when omitted.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "meta",
                            "description": "Optional map of user-defined metadata to attach to this TestModel.",
                            "type": "String:Object",
                            "optional": true
                        },
                        {
                            "name": "size",
                            "description": "World-space width of each axis.",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "density",
                            "description": "Number of buildings on each axis.",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "transform",
                            "description": "A Local-to-World-space (modelling) {{#crossLink \"Transform\"}}{{/crossLink}} to attach to this TestModel.\nMust be within the same {{#crossLink \"Scene\"}}{{/crossLink}} as this TestModel. Internally, the given\n{{#crossLink \"Transform\"}}{{/crossLink}} will be inserted above each top-most {{#crossLink \"Transform\"}}Transform{{/crossLink}}\nthat the TestModel attaches to its {{#crossLink \"Entity\"}}Entities{{/crossLink}}.",
                            "type": "Number|String|Transform",
                            "optional": true
                        }
                    ]
                }
            ],
            "extends": "Model"
        },
        "AABBHelper": {
            "name": "AABBHelper",
            "shortname": "AABBHelper",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "xeogl",
            "namespace": "",
            "file": "examples/js/helpers/aabbHelper.js",
            "line": 1,
            "description": "Helper that visualizes the boundary of a target {{#crossLink \"Component\"}}{{/crossLink}} subtype with a World-space axis-aligned boundary (AABB).",
            "is_constructor": 1,
            "params": [
                {
                    "name": "cfg",
                    "description": "Configuration",
                    "type": "*",
                    "props": [
                        {
                            "name": "target",
                            "description": "ID or instance of a {{#crossLink \"Component\"}}{{/crossLink}} subtype with a World-space axis-aligned boundary (AABB).",
                            "type": "Number|String|Component",
                            "optional": true
                        },
                        {
                            "name": "color",
                            "description": "Emmissive color",
                            "type": "Float32Array",
                            "optional": true,
                            "optdefault": "[0.4,0.4,0.4]"
                        },
                        {
                            "name": "visible",
                            "description": "Indicates whether or not this helper is visible.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        }
                    ]
                }
            ]
        },
        "AxisHelper": {
            "name": "AxisHelper",
            "shortname": "AxisHelper",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "xeogl",
            "namespace": "",
            "file": "examples/js/helpers/axisHelper.js",
            "line": 5,
            "description": "Helper widget that indicates the World coordinate axis.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "cfg",
                    "description": "Configuration",
                    "type": "*",
                    "props": [
                        {
                            "name": "size]  Pixel dimensions of helper's canvas, [250, 250",
                            "description": "by default.",
                            "type": "Int16Array",
                            "optional": true
                        }
                    ]
                }
            ]
        },
        "ClipHelper": {
            "name": "ClipHelper",
            "shortname": "ClipHelper",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "xeogl",
            "namespace": "",
            "file": "examples/js/helpers/clipHelper.js",
            "line": 1,
            "description": "Helper that visualizes the position and direction of a {{#crossLink \"Clip\"}}{{/crossLink}}.\nThe helper works by tracking updates to the {{#crossLink \"Clip\"}}{{/crossLink}}'s\n {{#crossLink \"Clip/pos:property\"}}{{/crossLink}} and {{#crossLink \"Clip/dir:property\"}}{{/crossLink}}.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "cfg",
                    "description": "Configuration",
                    "type": "*",
                    "props": [
                        {
                            "name": "clip",
                            "description": "A {{#crossLink \"Clip\"}}{{/crossLink}} to visualize.",
                            "type": "Clip"
                        },
                        {
                            "name": "solid",
                            "description": "Indicates whether or not this helper is filled with color or just wireframe.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        },
                        {
                            "name": "visible",
                            "description": "Indicates whether or not this helper is visible.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        },
                        {
                            "name": "planeSize",
                            "description": "The width and height of the ClipHelper plane indicator.",
                            "type": "Float32Array",
                            "optional": true
                        },
                        {
                            "name": "autoPlaneSize",
                            "description": "Indicates whether or not this ClipHelper's\n {{#crossLink \"ClipHelper/planeSize:property\"}}{{/crossLink}} is automatically sized to fit within\n the {{#crossLink \"Scene/aabb:property\"}}Scene's boundary{{/crossLink}}.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        }
                    ]
                }
            ]
        },
        "LabelHelper": {
            "name": "LabelHelper",
            "shortname": "LabelHelper",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "xeogl",
            "namespace": "",
            "file": "examples/js/helpers/labelHelper.js",
            "line": 5,
            "description": "Helper widget that shows a label.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "cfg",
                    "description": "Configuration",
                    "type": "*"
                }
            ]
        },
        "OBBHelper": {
            "name": "OBBHelper",
            "shortname": "OBBHelper",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "xeogl",
            "namespace": "",
            "file": "examples/js/helpers/obbHelper.js",
            "line": 1,
            "description": "Helper that visualizes the object-aligned boundary of a target {{#crossLink \"Component\"}}{{/crossLink}} subtype with a World-space object-aligned boundary (OBB).",
            "is_constructor": 1,
            "params": [
                {
                    "name": "cfg",
                    "description": "Configuration",
                    "type": "*",
                    "props": [
                        {
                            "name": "target",
                            "description": "ID or instance of a {{#crossLink \"Component\"}}{{/crossLink}} subtype with a World-space object-aligned boundary (OBB).",
                            "type": "Number|String|Component",
                            "optional": true
                        },
                        {
                            "name": "color",
                            "description": "Emmissive color",
                            "type": "Float32Array",
                            "optional": true,
                            "optdefault": "[0.4,0.4,0.4]"
                        },
                        {
                            "name": "visible",
                            "description": "Indicates whether or not this helper is visible.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        }
                    ]
                }
            ]
        },
        "PlaneHelper": {
            "name": "PlaneHelper",
            "shortname": "PlaneHelper",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "xeogl",
            "namespace": "",
            "file": "examples/js/helpers/planeHelper.js",
            "line": 1,
            "description": "Helper that visualizes the position and direction of a plane.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "cfg",
                    "description": "Configuration",
                    "type": "*",
                    "props": [
                        {
                            "name": "pos",
                            "description": "World-space position.",
                            "type": "Float32Array",
                            "optional": true,
                            "optdefault": "[0,0,0]"
                        },
                        {
                            "name": "dir",
                            "description": "World-space direction vector.",
                            "type": "Float32Array",
                            "optional": true,
                            "optdefault": "[0,0,1]"
                        },
                        {
                            "name": "color",
                            "description": "Emmissive color",
                            "type": "Float32Array",
                            "optional": true,
                            "optdefault": "[0.4,0.4,0.4]"
                        },
                        {
                            "name": "solid",
                            "description": "Indicates whether or not this helper is filled with color or just wireframe.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        },
                        {
                            "name": "visible",
                            "description": "Indicates whether or not this helper is visible.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        },
                        {
                            "name": "planeSize",
                            "description": "The width and height of the PlaneHelper plane indicator.",
                            "type": "Float32Array",
                            "optional": true
                        },
                        {
                            "name": "autoPlaneSize",
                            "description": "Indicates whether or not this PlaneHelper's\n {{#crossLink \"PlaneHelper/planeSize:property\"}}{{/crossLink}} is automatically sized to fit within\n the {{#crossLink \"Scene/aabb:property\"}}Scene's boundary{{/crossLink}}.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        }
                    ]
                }
            ]
        },
        "SplineCurveHelper": {
            "name": "SplineCurveHelper",
            "shortname": "SplineCurveHelper",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "entities",
            "namespace": "",
            "file": "examples/js/helpers/splineCurveHelper.js",
            "line": 1,
            "description": "Shows the shape and control points of {{#crossLink \"SplineCurve\"}}{{/crossLink}}",
            "extends": "Component"
        }
    },
    "classitems": [
        {
            "file": "src/_utils/inheritance.js",
            "line": 125,
            "description": "Returns a new UUID.",
            "itemtype": "method",
            "name": "createUUID",
            "static": 1,
            "return": {
                "description": "string The new UUID"
            },
            "class": "CameraFlightAnimation"
        },
        {
            "file": "src/_utils/map.js",
            "line": 3,
            "description": "Generic map of IDs to items - can generate own IDs or accept given IDs. IDs should be strings in order to not\nclash with internally generated IDs, which are numbers.",
            "class": "CameraFlightAnimation"
        },
        {
            "file": "src/_utils/map.js",
            "line": 14,
            "description": "Usage:\n\nid = myMap.addItem(\"foo\") // ID internally generated\nid = myMap.addItem(\"foo\", \"bar\") // ID is \"foo\"",
            "class": "CameraFlightAnimation"
        },
        {
            "file": "src/animation/cameraFlightAnimation.js",
            "line": 97,
            "description": "JavaScript class name for this Component.",
            "itemtype": "property",
            "name": "type",
            "type": "String",
            "final": 1,
            "class": "CameraFlightAnimation",
            "module": "xeogl",
            "submodule": "animation"
        },
        {
            "file": "src/animation/cameraFlightAnimation.js",
            "line": 177,
            "description": "Begins flying the {{#crossLink \"Camera\"}}{{/crossLink}}'s {{#crossLink \"Camera\"}}{{/crossLink}} to the given target.\n\n * When the target is a boundary, the {{#crossLink \"Camera\"}}{{/crossLink}} will fly towards the target\n   and stop when the target fills most of the canvas.\n * When the target is an explicit {{#crossLink \"Camera\"}}{{/crossLink}} position, given as ````eye````, ````look```` and ````up````\n   vectors, then this CameraFlightAnimation will interpolate the {{#crossLink \"Camera\"}}{{/crossLink}} to that target and stop there.",
            "itemtype": "method",
            "name": "flyTo",
            "params": [
                {
                    "name": "params",
                    "description": "Either a parameters object or a {{#crossLink \"Component\"}}{{/crossLink}} subtype that has an AABB.",
                    "type": "*|Component",
                    "optional": true,
                    "optdefault": "scene",
                    "props": [
                        {
                            "name": "arc",
                            "description": "indicating how much the\n{{#crossLink \"Lookat/eye:property\"}}Camera's eye{{/crossLink}} position will\nswing away from its {{#crossLink \"Lookat/eye:property\"}}look{{/crossLink}} position as it flies to the target.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "0]   Factor in range [0..1"
                        },
                        {
                            "name": "component",
                            "description": "ID or instance of a component to fly to. Defaults to the entire {{#crossLink \"Scene\"}}{{/crossLink}}.",
                            "type": "Number|String|Component",
                            "optional": true
                        },
                        {
                            "name": "aabb",
                            "description": "World-space axis-aligned bounding box (AABB) target to fly to.",
                            "type": "*",
                            "optional": true
                        },
                        {
                            "name": "eye",
                            "description": "Position to fly the eye position to.",
                            "type": "Float32Array",
                            "optional": true
                        },
                        {
                            "name": "look",
                            "description": "Position to fly the look position to.",
                            "type": "Float32Array",
                            "optional": true
                        },
                        {
                            "name": "up",
                            "description": "Position to fly the up vector to.",
                            "type": "Float32Array",
                            "optional": true
                        },
                        {
                            "name": "fit",
                            "description": "Whether to fit the target to the view volume. Overrides {{#crossLink \"CameraFlightAnimation/fit:property\"}}{{/crossLink}}.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        },
                        {
                            "name": "fitFOV",
                            "description": "How much of field-of-view, in degrees, that a target {{#crossLink \"Entity\"}}{{/crossLink}} or its AABB should\nfill the canvas on arrival. Overrides {{#crossLink \"CameraFlightAnimation/fitFOV:property\"}}{{/crossLink}}.",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "duration",
                            "description": "Flight duration in seconds.  Overrides {{#crossLink \"CameraFlightAnimation/duration:property\"}}{{/crossLink}}.",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "orthoScale",
                            "description": "TODO: document this",
                            "type": "Number",
                            "optional": true
                        }
                    ]
                },
                {
                    "name": "callback",
                    "description": "Callback fired on arrival",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "scope",
                    "description": "Optional scope for callback",
                    "type": "Object",
                    "optional": true
                }
            ],
            "class": "CameraFlightAnimation",
            "module": "xeogl",
            "submodule": "animation"
        },
        {
            "file": "src/animation/cameraFlightAnimation.js",
            "line": 375,
            "description": "Jumps the {{#crossLink \"Camera\"}}{{/crossLink}}'s {{#crossLink \"Camera\"}}{{/crossLink}} to the given target.\n\n * When the target is a boundary, this CameraFlightAnimation will position the {{#crossLink \"Camera\"}}{{/crossLink}}\n at where the target fills most of the canvas.\n * When the target is an explicit {{#crossLink \"Camera\"}}{{/crossLink}} position, given as ````eye````, ````look```` and ````up````\n vectors, then this CameraFlightAnimation will jump the {{#crossLink \"Camera\"}}{{/crossLink}} to that target.",
            "itemtype": "method",
            "name": "flyTo",
            "params": [
                {
                    "name": "params",
                    "description": "Either a parameters object or a {{#crossLink \"Component\"}}{{/crossLink}} subtype that has a World-space AABB.",
                    "type": "*|Component",
                    "props": [
                        {
                            "name": "arc",
                            "description": "indicating how much the\n{{#crossLink \"Camera/eye:property\"}}Camera's eye{{/crossLink}} position will\nswing away from its {{#crossLink \"Camera/eye:property\"}}look{{/crossLink}} position as it flies to the target.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "0]   Factor in range [0..1"
                        },
                        {
                            "name": "component",
                            "description": "ID or instance of a component to fly to.",
                            "type": "Number|String|Component",
                            "optional": true
                        },
                        {
                            "name": "aabb",
                            "description": "World-space axis-aligned bounding box (AABB) target to fly to.",
                            "type": "*",
                            "optional": true
                        },
                        {
                            "name": "eye",
                            "description": "Position to fly the eye position to.",
                            "type": "Float32Array",
                            "optional": true
                        },
                        {
                            "name": "look",
                            "description": "Position to fly the look position to.",
                            "type": "Float32Array",
                            "optional": true
                        },
                        {
                            "name": "up",
                            "description": "Position to fly the up vector to.",
                            "type": "Float32Array",
                            "optional": true
                        },
                        {
                            "name": "fitFOV",
                            "description": "How much of field-of-view, in degrees, that a target {{#crossLink \"Entity\"}}{{/crossLink}} or its AABB should\nfill the canvas on arrival. Overrides {{#crossLink \"CameraFlightAnimation/fitFOV:property\"}}{{/crossLink}}.",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "fit",
                            "description": "Whether to fit the target to the view volume. Overrides {{#crossLink \"CameraFlightAnimation/fit:property\"}}{{/crossLink}}.",
                            "type": "Boolean",
                            "optional": true
                        }
                    ]
                }
            ],
            "class": "CameraFlightAnimation",
            "module": "xeogl",
            "submodule": "animation"
        },
        {
            "file": "src/animation/cameraFlightAnimation.js",
            "line": 602,
            "description": "Stops an earlier flyTo, fires arrival callback.",
            "itemtype": "method",
            "name": "stop",
            "class": "CameraFlightAnimation",
            "module": "xeogl",
            "submodule": "animation"
        },
        {
            "file": "src/animation/cameraFlightAnimation.js",
            "line": 635,
            "description": "Cancels an earlier flyTo without calling the arrival callback.",
            "itemtype": "method",
            "name": "cancel",
            "class": "CameraFlightAnimation",
            "module": "xeogl",
            "submodule": "animation"
        },
        {
            "file": "src/animation/cameraFlightAnimation.js",
            "line": 661,
            "description": "Flight duration, in seconds, when calling {{#crossLink \"CameraFlightAnimation/flyTo:method\"}}{{/crossLink}}.\n\nStops any flight currently in progress.",
            "itemtype": "property",
            "name": "duration",
            "default": "0.5",
            "type": "Number",
            "class": "CameraFlightAnimation",
            "module": "xeogl",
            "submodule": "animation"
        },
        {
            "file": "src/animation/cameraFlightAnimation.js",
            "line": 683,
            "description": "When true, will ensure that this CameraFlightAnimation is flying to a boundary it will always adjust the distance between the\n{{#crossLink \"CameraFlightAnimation/camera:property\"}}camera{{/crossLink}}'s {{#crossLink \"Lookat/eye:property\"}}eye{{/crossLink}}\nand {{#crossLink \"Lookat/look:property\"}}{{/crossLink}}\nso as to ensure that the target boundary is always filling the view volume.\n\nWhen false, the eye will remain at its current distance from the look position.",
            "itemtype": "property",
            "name": "fit",
            "type": "Boolean",
            "default": "true",
            "class": "CameraFlightAnimation",
            "module": "xeogl",
            "submodule": "animation"
        },
        {
            "file": "src/animation/cameraFlightAnimation.js",
            "line": 707,
            "description": "How much of the perspective field-of-view, in degrees, that a target {{#crossLink \"Entity\"}}{{/crossLink}} or its AABB should\nfill the canvas when calling {{#crossLink \"CameraFlightAnimation/flyTo:method\"}}{{/crossLink}} or {{#crossLink \"CameraFlightAnimation/jumpTo:method\"}}{{/crossLink}}.",
            "itemtype": "property",
            "name": "fitFOV",
            "default": "45",
            "type": "Number",
            "class": "CameraFlightAnimation",
            "module": "xeogl",
            "submodule": "animation"
        },
        {
            "file": "src/animation/cameraFlightAnimation.js",
            "line": 726,
            "description": "When true, will cause this CameraFlightAnimation to point the {{#crossLink \"CameraFlightAnimation/camera:property\"}}{{/crossLink}}\nin the direction that it is travelling.",
            "itemtype": "property",
            "name": "trail",
            "type": "Boolean",
            "default": "false",
            "class": "CameraFlightAnimation",
            "module": "xeogl",
            "submodule": "animation"
        },
        {
            "file": "src/camera/camera.js",
            "line": 294,
            "description": "Rotates {{#crossLink \"Camera/eye:property\"}}{{/crossLink}} about {{#crossLink \"Camera/look:property\"}}{{/crossLink}}, around the {{#crossLink \"Camera/up:property\"}}{{/crossLink}} vector",
            "itemtype": "method",
            "name": "orbitYaw",
            "params": [
                {
                    "name": "angle",
                    "description": "Angle of rotation in degrees",
                    "type": "Number"
                }
            ],
            "class": "Camera",
            "module": "xeogl",
            "submodule": "camera"
        },
        {
            "file": "src/camera/camera.js",
            "line": 313,
            "description": "Rotates {{#crossLink \"Camera/eye:property\"}}{{/crossLink}} about {{#crossLink \"Camera/look:property\"}}{{/crossLink}} around the right axis (orthogonal to {{#crossLink \"Camera/up:property\"}}{{/crossLink}} and \"look\").",
            "itemtype": "method",
            "name": "orbitPitch",
            "params": [
                {
                    "name": "angle",
                    "description": "Angle of rotation in degrees",
                    "type": "Number"
                }
            ],
            "class": "Camera",
            "module": "xeogl",
            "submodule": "camera"
        },
        {
            "file": "src/camera/camera.js",
            "line": 333,
            "description": "Rotates {{#crossLink \"Camera/look:property\"}}{{/crossLink}} about {{#crossLink \"Camera/eye:property\"}}{{/crossLink}}, around the {{#crossLink \"Camera/up:property\"}}{{/crossLink}} vector.",
            "itemtype": "method",
            "name": "yaw",
            "params": [
                {
                    "name": "angle",
                    "description": "Angle of rotation in degrees",
                    "type": "Number"
                }
            ],
            "class": "Camera",
            "module": "xeogl",
            "submodule": "camera"
        },
        {
            "file": "src/camera/camera.js",
            "line": 355,
            "description": "Rotates {{#crossLink \"Camera/look:property\"}}{{/crossLink}} about {{#crossLink \"Camera/eye:property\"}}{{/crossLink}}, around the right axis (orthogonal to {{#crossLink \"Camera/up:property\"}}{{/crossLink}} and \"look\").",
            "itemtype": "method",
            "name": "pitch",
            "params": [
                {
                    "name": "angle",
                    "description": "Angle of rotation in degrees",
                    "type": "Number"
                }
            ],
            "class": "Camera",
            "module": "xeogl",
            "submodule": "camera"
        },
        {
            "file": "src/camera/camera.js",
            "line": 375,
            "description": "Pans the camera along the camera's local X, Y and Z axis.",
            "itemtype": "method",
            "name": "pan",
            "params": [
                {
                    "name": "pan",
                    "description": "The pan vector"
                }
            ],
            "class": "Camera",
            "module": "xeogl",
            "submodule": "camera"
        },
        {
            "file": "src/camera/camera.js",
            "line": 413,
            "description": "Increments/decrements zoom factor, ie. distance between {{#crossLink \"Camera/eye:property\"}}{{/crossLink}}\nand {{#crossLink \"Camera/look:property\"}}{{/crossLink}}.",
            "itemtype": "method",
            "name": "zoom",
            "params": [
                {
                    "name": "delta",
                    "description": ""
                }
            ],
            "class": "Camera",
            "module": "xeogl",
            "submodule": "camera"
        },
        {
            "file": "src/camera/camera.js",
            "line": 437,
            "description": "Position of this Camera's eye.\n\nFires an {{#crossLink \"Camera/eye:event\"}}{{/crossLink}} event on change.",
            "itemtype": "property",
            "name": "eye",
            "default": "[0,0,10]",
            "type": "Float32Array",
            "class": "Camera",
            "module": "xeogl",
            "submodule": "camera"
        },
        {
            "file": "src/camera/camera.js",
            "line": 453,
            "description": "Fired whenever this Camera's {{#crossLink \"Camera/eye:property\"}}{{/crossLink}} property changes.",
            "itemtype": "event",
            "name": "eye",
            "params": [
                {
                    "name": "value",
                    "description": "The property's new value"
                }
            ],
            "class": "Camera",
            "module": "xeogl",
            "submodule": "camera"
        },
        {
            "file": "src/camera/camera.js",
            "line": 467,
            "description": "Position of this Camera's point-of-interest.\n\nFires a {{#crossLink \"Camera/look:event\"}}{{/crossLink}} event on change.",
            "itemtype": "property",
            "name": "look",
            "default": "[0,0,0]",
            "type": "Float32Array",
            "class": "Camera",
            "module": "xeogl",
            "submodule": "camera"
        },
        {
            "file": "src/camera/camera.js",
            "line": 483,
            "description": "Fired whenever this Camera's {{#crossLink \"Camera/look:property\"}}{{/crossLink}} property changes.",
            "itemtype": "event",
            "name": "look",
            "params": [
                {
                    "name": "value",
                    "description": "The property's new value"
                }
            ],
            "class": "Camera",
            "module": "xeogl",
            "submodule": "camera"
        },
        {
            "file": "src/camera/camera.js",
            "line": 497,
            "description": "Direction of this Camera's {{#crossLink \"Camera/up:property\"}}{{/crossLink}} vector.\n\nFires an {{#crossLink \"Camera/up:event\"}}{{/crossLink}} event on change.",
            "itemtype": "property",
            "name": "up",
            "default": "[0,1,0]",
            "type": "Float32Array",
            "class": "Camera",
            "module": "xeogl",
            "submodule": "camera"
        },
        {
            "file": "src/camera/camera.js",
            "line": 513,
            "description": "Fired whenever this Camera's {{#crossLink \"Camera/up:property\"}}{{/crossLink}} property changes.",
            "itemtype": "event",
            "name": "up",
            "params": [
                {
                    "name": "value",
                    "description": "The property's new value"
                }
            ],
            "class": "Camera",
            "module": "xeogl",
            "submodule": "camera"
        },
        {
            "file": "src/camera/camera.js",
            "line": 527,
            "description": "Indicates the up, right and forward axis of the World coordinate system.\n\nHas format: ````[rightX, rightY, rightZ, upX, upY, upZ, forwardX, forwardY, forwardZ]````",
            "itemtype": "property",
            "name": "worldAxis",
            "default": "[1, 0, 0, 0, 1, 0, 0, 0, 1]",
            "type": "Float32Array",
            "class": "Camera",
            "module": "xeogl",
            "submodule": "camera"
        },
        {
            "file": "src/camera/camera.js",
            "line": 561,
            "description": "Fired whenever this Camera's {{#crossLink \"Camera/worldAxis:property\"}}{{/crossLink}} property changes.",
            "itemtype": "event",
            "name": "worldAxis",
            "params": [
                {
                    "name": "value",
                    "description": "The property's new value"
                }
            ],
            "class": "Camera",
            "module": "xeogl",
            "submodule": "camera"
        },
        {
            "file": "src/camera/camera.js",
            "line": 575,
            "description": "Direction of World-space \"up\".",
            "itemtype": "property",
            "name": "worldUp",
            "default": "[0,1,0]",
            "type": "Float32Array",
            "final": 1,
            "class": "Camera",
            "module": "xeogl",
            "submodule": "camera"
        },
        {
            "file": "src/camera/camera.js",
            "line": 590,
            "description": "Direction of World-space \"right\".",
            "itemtype": "property",
            "name": "worldRight",
            "default": "[1,0,0]",
            "type": "Float32Array",
            "final": 1,
            "class": "Camera",
            "module": "xeogl",
            "submodule": "camera"
        },
        {
            "file": "src/camera/camera.js",
            "line": 605,
            "description": "Direction of World-space \"forwards\".",
            "itemtype": "property",
            "name": "worldForward",
            "default": "[0,0,-1]",
            "type": "Float32Array",
            "final": 1,
            "class": "Camera",
            "module": "xeogl",
            "submodule": "camera"
        },
        {
            "file": "src/camera/camera.js",
            "line": 620,
            "description": "Whether to lock yaw rotation to pivot about the World-space \"up\" axis.\n\nFires a {{#crossLink \"Camera/gimbalLock:event\"}}{{/crossLink}} event on change.",
            "itemtype": "property",
            "name": "gimbalLock",
            "default": "true",
            "type": "Boolean",
            "class": "Camera",
            "module": "xeogl",
            "submodule": "camera"
        },
        {
            "file": "src/camera/camera.js",
            "line": 635,
            "description": "Fired whenever this Camera's  {{#crossLink \"Camera/gimbalLock:property\"}}{{/crossLink}} property changes.",
            "itemtype": "event",
            "name": "gimbalLock",
            "params": [
                {
                    "name": "value",
                    "description": "The property's new value"
                }
            ],
            "class": "Camera",
            "module": "xeogl",
            "submodule": "camera"
        },
        {
            "file": "src/camera/camera.js",
            "line": 649,
            "description": "Distance from \"look\" to \"eye\".",
            "itemtype": "property",
            "name": "eyeLookDist",
            "type": "Number",
            "class": "Camera",
            "module": "xeogl",
            "submodule": "camera"
        },
        {
            "file": "src/camera/camera.js",
            "line": 664,
            "description": "The Camera's viewing transformation matrix.\n\nFires a {{#crossLink \"Camera/matrix:event\"}}{{/crossLink}} event on change.",
            "itemtype": "property",
            "name": "matrix",
            "type": "{Float32Array}",
            "deprecated": true,
            "class": "Camera",
            "module": "xeogl",
            "submodule": "camera"
        },
        {
            "file": "src/camera/camera.js",
            "line": 685,
            "description": "The Camera's viewing transformation matrix.\n\nFires a {{#crossLink \"Camera/matrix:event\"}}{{/crossLink}} event on change.",
            "itemtype": "property",
            "name": "viewMatrix",
            "type": "{Float32Array}",
            "class": "Camera",
            "module": "xeogl",
            "submodule": "camera"
        },
        {
            "file": "src/camera/camera.js",
            "line": 705,
            "description": "The Camera's viewing normal transformation matrix.\n\nFires a {{#crossLink \"Camera/matrix:event\"}}{{/crossLink}} event on change.",
            "itemtype": "property",
            "name": "normalMatrix",
            "type": "{Float32Array}",
            "deprecated": true,
            "class": "Camera",
            "module": "xeogl",
            "submodule": "camera"
        },
        {
            "file": "src/camera/camera.js",
            "line": 726,
            "description": "The Camera's viewing normal transformation matrix.\n\nFires a {{#crossLink \"Camera/matrix:event\"}}{{/crossLink}} event on change.",
            "itemtype": "property",
            "name": "viewNormalMatrix",
            "type": "{Float32Array}",
            "class": "Camera",
            "module": "xeogl",
            "submodule": "camera"
        },
        {
            "file": "src/camera/camera.js",
            "line": 746,
            "description": "Camera's projection transformation projMatrix.\n\nFires a {{#crossLink \"Camera/projMatrix:event\"}}{{/crossLink}} event on change.",
            "itemtype": "property",
            "name": "projMatrix",
            "type": "{Float32Array}",
            "class": "Camera",
            "module": "xeogl",
            "submodule": "camera"
        },
        {
            "file": "src/camera/camera.js",
            "line": 762,
            "description": "The perspective projection transform for this Camera.\n\nThis is used while {{#crossLink \"Camera/projection:property\"}}{{/crossLink}} equals \"perspective\".",
            "itemtype": "property",
            "name": "perspective",
            "type": "Perspective",
            "final": 1,
            "class": "Camera",
            "module": "xeogl",
            "submodule": "camera"
        },
        {
            "file": "src/camera/camera.js",
            "line": 778,
            "description": "The orthographic projection transform for this Camera.\n\nThis is used while {{#crossLink \"Camera/projection:property\"}}{{/crossLink}} equals \"ortho\".",
            "itemtype": "property",
            "name": "ortho",
            "type": "Ortho",
            "final": 1,
            "class": "Camera",
            "module": "xeogl",
            "submodule": "camera"
        },
        {
            "file": "src/camera/camera.js",
            "line": 794,
            "description": "The frustum projection transform for this Camera.\n\nThis is used while {{#crossLink \"Camera/projection:property\"}}{{/crossLink}} equals \"frustum\".",
            "itemtype": "property",
            "name": "frustum",
            "type": "Frustum",
            "final": 1,
            "class": "Camera",
            "module": "xeogl",
            "submodule": "camera"
        },
        {
            "file": "src/camera/camera.js",
            "line": 810,
            "description": "The active projection type.\n\nAccepted values are \"perspective\", \"ortho\" and \"frustum\".",
            "itemtype": "property",
            "name": "projection",
            "default": "\"perspective\"",
            "type": "{String}",
            "class": "Camera",
            "module": "xeogl",
            "submodule": "camera"
        },
        {
            "file": "src/camera/camera.js",
            "line": 858,
            "description": "The active projection transform for this Camera.",
            "itemtype": "property",
            "name": "project",
            "type": "Transform",
            "final": 1,
            "class": "Camera",
            "module": "xeogl",
            "submodule": "camera"
        },
        {
            "file": "src/camera/camera.new.js",
            "line": 1,
            "description": "Created by lindsay on 23.03.18.",
            "class": "Camera",
            "module": "xeogl"
        },
        {
            "file": "src/camera/camera.new.js",
            "line": 298,
            "description": "Rotates {{#crossLink \"Camera/eye:property\"}}{{/crossLink}} about {{#crossLink \"Camera/look:property\"}}{{/crossLink}}, around the {{#crossLink \"Camera/up:property\"}}{{/crossLink}} vector",
            "itemtype": "method",
            "name": "orbitYaw",
            "params": [
                {
                    "name": "angle",
                    "description": "Angle of rotation in degrees",
                    "type": "Number"
                }
            ],
            "class": "Camera",
            "module": "xeogl",
            "submodule": "camera"
        },
        {
            "file": "src/camera/camera.new.js",
            "line": 317,
            "description": "Rotates {{#crossLink \"Camera/eye:property\"}}{{/crossLink}} about {{#crossLink \"Camera/look:property\"}}{{/crossLink}} around the right axis (orthogonal to {{#crossLink \"Camera/up:property\"}}{{/crossLink}} and \"look\").",
            "itemtype": "method",
            "name": "orbitPitch",
            "params": [
                {
                    "name": "angle",
                    "description": "Angle of rotation in degrees",
                    "type": "Number"
                }
            ],
            "class": "Camera",
            "module": "xeogl",
            "submodule": "camera"
        },
        {
            "file": "src/camera/camera.new.js",
            "line": 337,
            "description": "Rotates {{#crossLink \"Camera/eye:property\"}}{{/crossLink}} about {{#crossLink \"Camera/look:property\"}}{{/crossLink}}, around the {{#crossLink \"Camera/up:property\"}}{{/crossLink}} vector",
            "itemtype": "method",
            "name": "pivotYaw",
            "params": [
                {
                    "name": "angle",
                    "description": "Angle of rotation in degrees",
                    "type": "Number"
                }
            ],
            "class": "Camera",
            "module": "xeogl",
            "submodule": "camera"
        },
        {
            "file": "src/camera/camera.new.js",
            "line": 380,
            "description": "Rotates {{#crossLink \"Camera/eye:property\"}}{{/crossLink}} about {{#crossLink \"Camera/look:property\"}}{{/crossLink}} around the right axis (orthogonal to {{#crossLink \"Camera/up:property\"}}{{/crossLink}} and \"look\").",
            "itemtype": "method",
            "name": "pivotPitch",
            "params": [
                {
                    "name": "angle",
                    "description": "Angle of rotation in degrees",
                    "type": "Number"
                }
            ],
            "class": "Camera",
            "module": "xeogl",
            "submodule": "camera"
        },
        {
            "file": "src/camera/camera.new.js",
            "line": 429,
            "description": "Rotates {{#crossLink \"Camera/look:property\"}}{{/crossLink}} about {{#crossLink \"Camera/eye:property\"}}{{/crossLink}}, around the {{#crossLink \"Camera/up:property\"}}{{/crossLink}} vector.",
            "itemtype": "method",
            "name": "yaw",
            "params": [
                {
                    "name": "angle",
                    "description": "Angle of rotation in degrees",
                    "type": "Number"
                }
            ],
            "class": "Camera",
            "module": "xeogl",
            "submodule": "camera"
        },
        {
            "file": "src/camera/camera.new.js",
            "line": 451,
            "description": "Rotates {{#crossLink \"Camera/look:property\"}}{{/crossLink}} about {{#crossLink \"Camera/eye:property\"}}{{/crossLink}}, around the right axis (orthogonal to {{#crossLink \"Camera/up:property\"}}{{/crossLink}} and \"look\").",
            "itemtype": "method",
            "name": "pitch",
            "params": [
                {
                    "name": "angle",
                    "description": "Angle of rotation in degrees",
                    "type": "Number"
                }
            ],
            "class": "Camera",
            "module": "xeogl",
            "submodule": "camera"
        },
        {
            "file": "src/camera/camera.new.js",
            "line": 471,
            "description": "Pans the camera along the camera's local X, Y and Z axis.",
            "itemtype": "method",
            "name": "pan",
            "params": [
                {
                    "name": "pan",
                    "description": "The pan vector"
                }
            ],
            "class": "Camera",
            "module": "xeogl",
            "submodule": "camera"
        },
        {
            "file": "src/camera/camera.new.js",
            "line": 509,
            "description": "Increments/decrements zoom factor, ie. distance between {{#crossLink \"Camera/eye:property\"}}{{/crossLink}}\nand {{#crossLink \"Camera/look:property\"}}{{/crossLink}}.",
            "itemtype": "method",
            "name": "zoom",
            "params": [
                {
                    "name": "delta",
                    "description": ""
                }
            ],
            "class": "Camera",
            "module": "xeogl",
            "submodule": "camera"
        },
        {
            "file": "src/camera/camera.new.js",
            "line": 533,
            "description": "Position of this Camera's eye.\n\nFires an {{#crossLink \"Camera/eye:event\"}}{{/crossLink}} event on change.",
            "itemtype": "property",
            "name": "eye",
            "default": "[0,0,10]",
            "type": "Float32Array",
            "class": "Camera",
            "module": "xeogl",
            "submodule": "camera"
        },
        {
            "file": "src/camera/camera.new.js",
            "line": 549,
            "description": "Fired whenever this Camera's {{#crossLink \"Camera/eye:property\"}}{{/crossLink}} property changes.",
            "itemtype": "event",
            "name": "eye",
            "params": [
                {
                    "name": "value",
                    "description": "The property's new value"
                }
            ],
            "class": "Camera",
            "module": "xeogl",
            "submodule": "camera"
        },
        {
            "file": "src/camera/camera.new.js",
            "line": 563,
            "description": "Position of this Camera's point-of-interest.\n\nFires a {{#crossLink \"Camera/look:event\"}}{{/crossLink}} event on change.",
            "itemtype": "property",
            "name": "look",
            "default": "[0,0,0]",
            "type": "Float32Array",
            "class": "Camera",
            "module": "xeogl",
            "submodule": "camera"
        },
        {
            "file": "src/camera/camera.new.js",
            "line": 579,
            "description": "Fired whenever this Camera's {{#crossLink \"Camera/look:property\"}}{{/crossLink}} property changes.",
            "itemtype": "event",
            "name": "look",
            "params": [
                {
                    "name": "value",
                    "description": "The property's new value"
                }
            ],
            "class": "Camera",
            "module": "xeogl",
            "submodule": "camera"
        },
        {
            "file": "src/camera/camera.new.js",
            "line": 593,
            "description": "Direction of this Camera's {{#crossLink \"Camera/up:property\"}}{{/crossLink}} vector.\n\nFires an {{#crossLink \"Camera/up:event\"}}{{/crossLink}} event on change.",
            "itemtype": "property",
            "name": "up",
            "default": "[0,1,0]",
            "type": "Float32Array",
            "class": "Camera",
            "module": "xeogl",
            "submodule": "camera"
        },
        {
            "file": "src/camera/camera.new.js",
            "line": 609,
            "description": "Fired whenever this Camera's {{#crossLink \"Camera/up:property\"}}{{/crossLink}} property changes.",
            "itemtype": "event",
            "name": "up",
            "params": [
                {
                    "name": "value",
                    "description": "The property's new value"
                }
            ],
            "class": "Camera",
            "module": "xeogl",
            "submodule": "camera"
        },
        {
            "file": "src/camera/camera.new.js",
            "line": 623,
            "description": "Position of this Camera's pivot point.\n\nFires an {{#crossLink \"Camera/pivot:event\"}}{{/crossLink}} event on change.",
            "itemtype": "property",
            "name": "pivot",
            "default": "[0,0,10]",
            "type": "Float32Array",
            "class": "Camera",
            "module": "xeogl",
            "submodule": "camera"
        },
        {
            "file": "src/camera/camera.new.js",
            "line": 638,
            "description": "Fired whenever this Camera's {{#crossLink \"Camera/pivot:property\"}}{{/crossLink}} property changes.",
            "itemtype": "event",
            "name": "pivot",
            "params": [
                {
                    "name": "value",
                    "description": "The property's new value"
                }
            ],
            "class": "Camera",
            "module": "xeogl",
            "submodule": "camera"
        },
        {
            "file": "src/camera/camera.new.js",
            "line": 652,
            "description": "Indicates the up, right and forward axis of the World coordinate system.\n\nHas format: ````[rightX, rightY, rightZ, upX, upY, upZ, forwardX, forwardY, forwardZ]````",
            "itemtype": "property",
            "name": "worldAxis",
            "default": "[1, 0, 0, 0, 1, 0, 0, 0, 1]",
            "type": "Float32Array",
            "class": "Camera",
            "module": "xeogl",
            "submodule": "camera"
        },
        {
            "file": "src/camera/camera.new.js",
            "line": 686,
            "description": "Fired whenever this Camera's {{#crossLink \"Camera/worldAxis:property\"}}{{/crossLink}} property changes.",
            "itemtype": "event",
            "name": "worldAxis",
            "params": [
                {
                    "name": "value",
                    "description": "The property's new value"
                }
            ],
            "class": "Camera",
            "module": "xeogl",
            "submodule": "camera"
        },
        {
            "file": "src/camera/camera.new.js",
            "line": 700,
            "description": "Direction of World-space \"up\".",
            "itemtype": "property",
            "name": "worldUp",
            "default": "[0,1,0]",
            "type": "Float32Array",
            "final": 1,
            "class": "Camera",
            "module": "xeogl",
            "submodule": "camera"
        },
        {
            "file": "src/camera/camera.new.js",
            "line": 715,
            "description": "Direction of World-space \"right\".",
            "itemtype": "property",
            "name": "worldRight",
            "default": "[1,0,0]",
            "type": "Float32Array",
            "final": 1,
            "class": "Camera",
            "module": "xeogl",
            "submodule": "camera"
        },
        {
            "file": "src/camera/camera.new.js",
            "line": 730,
            "description": "Direction of World-space \"forwards\".",
            "itemtype": "property",
            "name": "worldForward",
            "default": "[0,0,-1]",
            "type": "Float32Array",
            "final": 1,
            "class": "Camera",
            "module": "xeogl",
            "submodule": "camera"
        },
        {
            "file": "src/camera/camera.new.js",
            "line": 745,
            "description": "Whether to lock yaw rotation to pivot about the World-space \"up\" axis.\n\nFires a {{#crossLink \"Camera/gimbalLock:event\"}}{{/crossLink}} event on change.",
            "itemtype": "property",
            "name": "gimbalLock",
            "default": "true",
            "type": "Boolean",
            "class": "Camera",
            "module": "xeogl",
            "submodule": "camera"
        },
        {
            "file": "src/camera/camera.new.js",
            "line": 760,
            "description": "Fired whenever this Camera's  {{#crossLink \"Camera/gimbalLock:property\"}}{{/crossLink}} property changes.",
            "itemtype": "event",
            "name": "gimbalLock",
            "params": [
                {
                    "name": "value",
                    "description": "The property's new value"
                }
            ],
            "class": "Camera",
            "module": "xeogl",
            "submodule": "camera"
        },
        {
            "file": "src/camera/camera.new.js",
            "line": 774,
            "description": "Distance from \"look\" to \"eye\".",
            "itemtype": "property",
            "name": "eyeLookDist",
            "type": "Number",
            "class": "Camera",
            "module": "xeogl",
            "submodule": "camera"
        },
        {
            "file": "src/camera/camera.new.js",
            "line": 789,
            "description": "The Camera's viewing transformation matrix.\n\nFires a {{#crossLink \"Camera/matrix:event\"}}{{/crossLink}} event on change.",
            "itemtype": "property",
            "name": "matrix",
            "type": "{Float32Array}",
            "deprecated": true,
            "class": "Camera",
            "module": "xeogl",
            "submodule": "camera"
        },
        {
            "file": "src/camera/camera.new.js",
            "line": 810,
            "description": "The Camera's viewing transformation matrix.\n\nFires a {{#crossLink \"Camera/matrix:event\"}}{{/crossLink}} event on change.",
            "itemtype": "property",
            "name": "viewMatrix",
            "type": "{Float32Array}",
            "class": "Camera",
            "module": "xeogl",
            "submodule": "camera"
        },
        {
            "file": "src/camera/camera.new.js",
            "line": 830,
            "description": "The Camera's viewing normal transformation matrix.\n\nFires a {{#crossLink \"Camera/matrix:event\"}}{{/crossLink}} event on change.",
            "itemtype": "property",
            "name": "normalMatrix",
            "type": "{Float32Array}",
            "deprecated": true,
            "class": "Camera",
            "module": "xeogl",
            "submodule": "camera"
        },
        {
            "file": "src/camera/camera.new.js",
            "line": 851,
            "description": "The Camera's viewing normal transformation matrix.\n\nFires a {{#crossLink \"Camera/matrix:event\"}}{{/crossLink}} event on change.",
            "itemtype": "property",
            "name": "viewNormalMatrix",
            "type": "{Float32Array}",
            "class": "Camera",
            "module": "xeogl",
            "submodule": "camera"
        },
        {
            "file": "src/camera/camera.new.js",
            "line": 871,
            "description": "Camera's projection transformation projMatrix.\n\nFires a {{#crossLink \"Camera/projMatrix:event\"}}{{/crossLink}} event on change.",
            "itemtype": "property",
            "name": "projMatrix",
            "type": "{Float32Array}",
            "class": "Camera",
            "module": "xeogl",
            "submodule": "camera"
        },
        {
            "file": "src/camera/camera.new.js",
            "line": 887,
            "description": "The perspective projection transform for this Camera.\n\nThis is used while {{#crossLink \"Camera/projection:property\"}}{{/crossLink}} equals \"perspective\".",
            "itemtype": "property",
            "name": "perspective",
            "type": "Perspective",
            "final": 1,
            "class": "Camera",
            "module": "xeogl",
            "submodule": "camera"
        },
        {
            "file": "src/camera/camera.new.js",
            "line": 903,
            "description": "The orthographic projection transform for this Camera.\n\nThis is used while {{#crossLink \"Camera/projection:property\"}}{{/crossLink}} equals \"ortho\".",
            "itemtype": "property",
            "name": "ortho",
            "type": "Ortho",
            "final": 1,
            "class": "Camera",
            "module": "xeogl",
            "submodule": "camera"
        },
        {
            "file": "src/camera/camera.new.js",
            "line": 919,
            "description": "The frustum projection transform for this Camera.\n\nThis is used while {{#crossLink \"Camera/projection:property\"}}{{/crossLink}} equals \"frustum\".",
            "itemtype": "property",
            "name": "frustum",
            "type": "Frustum",
            "final": 1,
            "class": "Camera",
            "module": "xeogl",
            "submodule": "camera"
        },
        {
            "file": "src/camera/camera.new.js",
            "line": 935,
            "description": "The active projection type.\n\nAccepted values are \"perspective\", \"ortho\" and \"frustum\".",
            "itemtype": "property",
            "name": "projection",
            "default": "\"perspective\"",
            "type": "{String}",
            "class": "Camera",
            "module": "xeogl",
            "submodule": "camera"
        },
        {
            "file": "src/camera/camera.new.js",
            "line": 983,
            "description": "The active projection transform for this Camera.",
            "itemtype": "property",
            "name": "project",
            "type": "Transform",
            "final": 1,
            "class": "Camera",
            "module": "xeogl",
            "submodule": "camera"
        },
        {
            "file": "src/camera/frustum.js",
            "line": 80,
            "description": "Position of this Frustum's left plane on the View-space X-axis.\n\nFires a {{#crossLink \"Frustum/left:event\"}}{{/crossLink}} event on change.",
            "itemtype": "property",
            "name": "left",
            "default": "-1.0",
            "type": "Number",
            "class": "Frustum",
            "module": "xeogl",
            "submodule": "camera"
        },
        {
            "file": "src/camera/frustum.js",
            "line": 97,
            "description": "Fired whenever this Frustum's {{#crossLink \"Frustum/left:property\"}}{{/crossLink}} property changes.",
            "itemtype": "event",
            "name": "left",
            "params": [
                {
                    "name": "value",
                    "description": "The property's new value"
                }
            ],
            "class": "Frustum",
            "module": "xeogl",
            "submodule": "camera"
        },
        {
            "file": "src/camera/frustum.js",
            "line": 111,
            "description": "Position of this Frustum's right plane on the View-space X-axis.\n\nFires a {{#crossLink \"Frustum/right:event\"}}{{/crossLink}} event on change.",
            "itemtype": "property",
            "name": "right",
            "default": "1.0",
            "type": "Number",
            "class": "Frustum",
            "module": "xeogl",
            "submodule": "camera"
        },
        {
            "file": "src/camera/frustum.js",
            "line": 128,
            "description": "Fired whenever this Frustum's {{#crossLink \"Frustum/right:property\"}}{{/crossLink}} property changes.",
            "itemtype": "event",
            "name": "right",
            "params": [
                {
                    "name": "value",
                    "description": "The property's new value"
                }
            ],
            "class": "Frustum",
            "module": "xeogl",
            "submodule": "camera"
        },
        {
            "file": "src/camera/frustum.js",
            "line": 142,
            "description": "Position of this Frustum's top plane on the View-space Y-axis.\n\nFires a {{#crossLink \"Frustum/top:event\"}}{{/crossLink}} event on change.",
            "itemtype": "property",
            "name": "top",
            "default": "1.0",
            "type": "Number",
            "class": "Frustum",
            "module": "xeogl",
            "submodule": "camera"
        },
        {
            "file": "src/camera/frustum.js",
            "line": 159,
            "description": "Fired whenever this Frustum's   {{#crossLink \"Frustum/top:property\"}}{{/crossLink}} property changes.",
            "itemtype": "event",
            "name": "top",
            "params": [
                {
                    "name": "value",
                    "description": "The property's new value"
                }
            ],
            "class": "Frustum",
            "module": "xeogl",
            "submodule": "camera"
        },
        {
            "file": "src/camera/frustum.js",
            "line": 173,
            "description": "Position of this Frustum's bottom plane on the View-space Y-axis.\n\nFires a {{#crossLink \"Frustum/bottom:event\"}}{{/crossLink}} event on change.",
            "itemtype": "property",
            "name": "bottom",
            "default": "-1.0",
            "type": "Number",
            "class": "Frustum",
            "module": "xeogl",
            "submodule": "camera"
        },
        {
            "file": "src/camera/frustum.js",
            "line": 190,
            "description": "Fired whenever this Frustum's   {{#crossLink \"Frustum/bottom:property\"}}{{/crossLink}} property changes.",
            "itemtype": "event",
            "name": "bottom",
            "params": [
                {
                    "name": "value",
                    "description": "The property's new value"
                }
            ],
            "class": "Frustum",
            "module": "xeogl",
            "submodule": "camera"
        },
        {
            "file": "src/camera/frustum.js",
            "line": 204,
            "description": "Position of this Frustum's near plane on the positive View-space Z-axis.\n\nFires a {{#crossLink \"Frustum/near:event\"}}{{/crossLink}} event on change.",
            "itemtype": "property",
            "name": "near",
            "default": "0.1",
            "type": "Number",
            "class": "Frustum",
            "module": "xeogl",
            "submodule": "camera"
        },
        {
            "file": "src/camera/frustum.js",
            "line": 221,
            "description": "Fired whenever this Frustum's {{#crossLink \"Frustum/near:property\"}}{{/crossLink}} property changes.",
            "itemtype": "event",
            "name": "near",
            "params": [
                {
                    "name": "value",
                    "description": "The property's new value"
                }
            ],
            "class": "Frustum",
            "module": "xeogl",
            "submodule": "camera"
        },
        {
            "file": "src/camera/frustum.js",
            "line": 235,
            "description": "Position of this Frustum's far plane on the positive View-space Z-axis.\n\nFires a {{#crossLink \"Frustum/far:event\"}}{{/crossLink}} event on change.",
            "itemtype": "property",
            "name": "far",
            "default": "10000.0",
            "type": "Number",
            "class": "Frustum",
            "module": "xeogl",
            "submodule": "camera"
        },
        {
            "file": "src/camera/frustum.js",
            "line": 252,
            "description": "Fired whenever this Frustum's  {{#crossLink \"Frustum/far:property\"}}{{/crossLink}} property changes.",
            "itemtype": "event",
            "name": "far",
            "params": [
                {
                    "name": "value",
                    "description": "The property's new value"
                }
            ],
            "class": "Frustum",
            "module": "xeogl",
            "submodule": "camera"
        },
        {
            "file": "src/camera/frustum.js",
            "line": 266,
            "description": "The Frustum's projection transform matrix.\n\nFires a {{#crossLink \"Frustum/matrix:event\"}}{{/crossLink}} event on change.",
            "itemtype": "property",
            "name": "matrix",
            "default": "[1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1]",
            "type": "{Float32Array}",
            "class": "Frustum",
            "module": "xeogl",
            "submodule": "camera"
        },
        {
            "file": "src/camera/ortho.js",
            "line": 95,
            "description": "Scale factor for this Ortho's extents on X and Y axis.\n\nClamps to minimum value of ````0.01```.\n\nFires a {{#crossLink \"Ortho/scale:event\"}}{{/crossLink}} event on change.",
            "itemtype": "property",
            "name": "scale",
            "default": "1.0",
            "type": "Number",
            "class": "Ortho",
            "module": "xeogl",
            "submodule": "camera"
        },
        {
            "file": "src/camera/ortho.js",
            "line": 122,
            "description": "Fired whenever this Ortho's {{#crossLink \"Ortho/scale:property\"}}{{/crossLink}} property changes.",
            "itemtype": "event",
            "name": "scale",
            "params": [
                {
                    "name": "value",
                    "description": "The property's new value"
                }
            ],
            "class": "Ortho",
            "module": "xeogl",
            "submodule": "camera"
        },
        {
            "file": "src/camera/ortho.js",
            "line": 136,
            "description": "Position of this Ortho's near plane on the positive View-space Z-axis.\n\nFires a {{#crossLink \"Ortho/near:event\"}}{{/crossLink}} event on change.",
            "itemtype": "property",
            "name": "near",
            "default": "0.1",
            "type": "Number",
            "class": "Ortho",
            "module": "xeogl",
            "submodule": "camera"
        },
        {
            "file": "src/camera/ortho.js",
            "line": 153,
            "description": "Fired whenever this Ortho's  {{#crossLink \"Ortho/near:property\"}}{{/crossLink}} property changes.",
            "itemtype": "event",
            "name": "near",
            "params": [
                {
                    "name": "value",
                    "description": "The property's new value"
                }
            ],
            "class": "Ortho",
            "module": "xeogl",
            "submodule": "camera"
        },
        {
            "file": "src/camera/ortho.js",
            "line": 167,
            "description": "Position of this Ortho's far plane on the positive View-space Z-axis.\n\nFires a {{#crossLink \"Ortho/far:event\"}}{{/crossLink}} event on change.",
            "itemtype": "property",
            "name": "far",
            "default": "10000.0",
            "type": "Number",
            "class": "Ortho",
            "module": "xeogl",
            "submodule": "camera"
        },
        {
            "file": "src/camera/ortho.js",
            "line": 184,
            "description": "Fired whenever this Ortho's {{#crossLink \"Ortho/far:property\"}}{{/crossLink}} property changes.",
            "itemtype": "event",
            "name": "far",
            "params": [
                {
                    "name": "value",
                    "description": "The property's new value"
                }
            ],
            "class": "Ortho",
            "module": "xeogl",
            "submodule": "camera"
        },
        {
            "file": "src/camera/ortho.js",
            "line": 198,
            "description": "The Ortho's projection transform matrix.\n\nFires a {{#crossLink \"Ortho/matrix:event\"}}{{/crossLink}} event on change.",
            "itemtype": "property",
            "name": "matrix",
            "default": "[1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1]",
            "type": "{Float32Array}",
            "class": "Ortho",
            "module": "xeogl",
            "submodule": "camera"
        },
        {
            "file": "src/camera/perspective.js",
            "line": 83,
            "description": "The field-of-view angle (FOV).\n\nFires a {{#crossLink \"Perspective/fov:event\"}}{{/crossLink}} event on change.",
            "itemtype": "property",
            "name": "fov",
            "default": "60.0",
            "type": "Number",
            "class": "Perspective",
            "module": "xeogl",
            "submodule": "camera"
        },
        {
            "file": "src/camera/perspective.js",
            "line": 100,
            "description": "Fired whenever this Perspective's {{#crossLink \"Perspective/fov:property\"}}{{/crossLink}} property changes.",
            "itemtype": "event",
            "name": "fov",
            "params": [
                {
                    "name": "value",
                    "description": "The property's new value"
                }
            ],
            "class": "Perspective",
            "module": "xeogl",
            "submodule": "camera"
        },
        {
            "file": "src/camera/perspective.js",
            "line": 114,
            "description": "The FOV axis.\n\nOptions are \"x\", \"y\" or \"min\", to use the minimum axis.\n\nFires a {{#crossLink \"Perspective/fov:event\"}}{{/crossLink}} event on change.",
            "itemtype": "property",
            "name": "fov",
            "default": "\"min\"",
            "type": "String",
            "class": "Perspective",
            "module": "xeogl",
            "submodule": "camera"
        },
        {
            "file": "src/camera/perspective.js",
            "line": 144,
            "description": "Fired whenever this Perspective's {{#crossLink \"Perspective/fovAxis:property\"}}{{/crossLink}} property changes.",
            "itemtype": "event",
            "name": "fovAxis",
            "params": [
                {
                    "name": "value",
                    "description": "The property's new value"
                }
            ],
            "class": "Perspective",
            "module": "xeogl",
            "submodule": "camera"
        },
        {
            "file": "src/camera/perspective.js",
            "line": 158,
            "description": "Position of this Perspective's near plane on the positive View-space Z-axis.\n\nFires a {{#crossLink \"Perspective/near:event\"}}{{/crossLink}} event on change.",
            "itemtype": "property",
            "name": "near",
            "default": "0.1",
            "type": "Number",
            "class": "Perspective",
            "module": "xeogl",
            "submodule": "camera"
        },
        {
            "file": "src/camera/perspective.js",
            "line": 175,
            "description": "Fired whenever this Perspective's   {{#crossLink \"Perspective/near:property\"}}{{/crossLink}} property changes.",
            "itemtype": "event",
            "name": "near",
            "params": [
                {
                    "name": "value",
                    "description": "The property's new value"
                }
            ],
            "class": "Perspective",
            "module": "xeogl",
            "submodule": "camera"
        },
        {
            "file": "src/camera/perspective.js",
            "line": 188,
            "description": "Position of this Perspective's far plane on the positive View-space Z-axis.\n\nFires a {{#crossLink \"Perspective/far:event\"}}{{/crossLink}} event on change.",
            "itemtype": "property",
            "name": "far",
            "default": "10000.0",
            "type": "Number",
            "class": "Perspective",
            "module": "xeogl",
            "submodule": "camera"
        },
        {
            "file": "src/camera/perspective.js",
            "line": 205,
            "description": "Fired whenever this Perspective's  {{#crossLink \"Perspective/far:property\"}}{{/crossLink}} property changes.",
            "itemtype": "event",
            "name": "far",
            "params": [
                {
                    "name": "value",
                    "description": "The property's new value"
                }
            ],
            "class": "Perspective",
            "module": "xeogl",
            "submodule": "camera"
        },
        {
            "file": "src/camera/perspective.js",
            "line": 219,
            "description": "The Perspective's projection transform matrix.\n\nFires a {{#crossLink \"Perspective/matrix:event\"}}{{/crossLink}} event on change.",
            "itemtype": "property",
            "name": "matrix",
            "default": "[1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1]",
            "type": "{Float32Array}",
            "class": "Perspective",
            "module": "xeogl",
            "submodule": "camera"
        },
        {
            "file": "src/canvas/canvas.js",
            "line": 123,
            "description": "The HTML canvas. When the {{#crossLink \"Viewer\"}}{{/crossLink}} was configured with the ID of an existing canvas within the DOM,\nthen this property will be that element, otherwise it will be a full-page canvas that this Canvas has\ncreated by default, with a z-index of -10000.",
            "itemtype": "property",
            "name": "canvas",
            "type": "{HTMLCanvasElement}",
            "final": 1,
            "class": "Canvas",
            "module": "xeogl",
            "submodule": "canvas"
        },
        {
            "file": "src/canvas/canvas.js",
            "line": 134,
            "description": "The WebGL rendering context.",
            "itemtype": "property",
            "name": "gl",
            "type": "{WebGLRenderingContext}",
            "final": 1,
            "class": "Canvas",
            "module": "xeogl",
            "submodule": "canvas"
        },
        {
            "file": "src/canvas/canvas.js",
            "line": 143,
            "description": "True when WebGL 2 support is enabled.",
            "itemtype": "property",
            "name": "webgl2",
            "type": "{Boolean}",
            "final": 1,
            "class": "Canvas",
            "module": "xeogl",
            "submodule": "canvas"
        },
        {
            "file": "src/canvas/canvas.js",
            "line": 152,
            "description": "Indicates whether this Canvas is transparent.",
            "itemtype": "property",
            "name": "transparent",
            "type": "{Boolean}",
            "default": "{false}",
            "final": 1,
            "class": "Canvas",
            "module": "xeogl",
            "submodule": "canvas"
        },
        {
            "file": "src/canvas/canvas.js",
            "line": 162,
            "description": "Attributes for the WebGL context",
            "type": "{{}|*}",
            "class": "Canvas",
            "module": "xeogl",
            "submodule": "canvas"
        },
        {
            "file": "src/canvas/canvas.js",
            "line": 224,
            "description": "Boundary of the Canvas in absolute browser window coordinates.\n\n### Usage:\n\n````javascript\nvar boundary = myScene.canvas.boundary;\n\nvar xmin = boundary[0];\nvar ymin = boundary[1];\nvar width = boundary[2];\nvar height = boundary[3];\n````",
            "itemtype": "property",
            "name": "boundary",
            "type": "{{Array of Number}}",
            "final": 1,
            "class": "Canvas",
            "module": "xeogl",
            "submodule": "canvas"
        },
        {
            "file": "src/canvas/canvas.js",
            "line": 260,
            "description": "Fired whenever the WebGL context has been lost",
            "itemtype": "event",
            "name": "webglContextLost",
            "class": "Canvas",
            "module": "xeogl",
            "submodule": "canvas"
        },
        {
            "file": "src/canvas/canvas.js",
            "line": 273,
            "description": "Fired whenever the WebGL context has been restored again after having previously being lost",
            "itemtype": "event",
            "name": "webglContextRestored",
            "params": [
                {
                    "name": "value",
                    "description": "The WebGL context object"
                }
            ],
            "class": "Canvas",
            "module": "xeogl",
            "submodule": "canvas"
        },
        {
            "file": "src/canvas/canvas.js",
            "line": 339,
            "description": "Fired whenever this Canvas's {{#crossLink \"Canvas/boundary:property\"}}{{/crossLink}} property changes.",
            "itemtype": "event",
            "name": "boundary",
            "params": [
                {
                    "name": "value",
                    "description": "The property's new value"
                }
            ],
            "class": "Canvas",
            "module": "xeogl",
            "submodule": "canvas"
        },
        {
            "file": "src/canvas/canvas.js",
            "line": 378,
            "description": "Creates a default canvas in the DOM.",
            "access": "private",
            "tagname": "",
            "class": "Canvas",
            "module": "xeogl",
            "submodule": "canvas"
        },
        {
            "file": "src/canvas/canvas.js",
            "line": 408,
            "description": "Creates a image element behind the canvas, for purpose of showing a custom background.",
            "access": "private",
            "tagname": "",
            "class": "Canvas",
            "module": "xeogl",
            "submodule": "canvas"
        },
        {
            "file": "src/canvas/canvas.js",
            "line": 444,
            "description": "Initialises the WebGL context",
            "access": "private",
            "tagname": "",
            "class": "Canvas",
            "module": "xeogl",
            "submodule": "canvas"
        },
        {
            "file": "src/canvas/canvas.js",
            "line": 477,
            "description": "Fired whenever the canvas failed to get a WebGL context, which probably means that WebGL\nis either unsupported or has been disabled.",
            "itemtype": "event",
            "name": "webglContextFailed",
            "class": "Canvas",
            "module": "xeogl",
            "submodule": "canvas"
        },
        {
            "file": "src/canvas/canvas.js",
            "line": 493,
            "description": "Returns a snapshot of this Canvas as a Base64-encoded image.\n\nWhen a callback is given, this method will capture the snapshot asynchronously, on the next animation frame,\nand return it via the callback.\n\nWhen no callback is given, this method captures and returns the snapshot immediately. Note that is only\npossible when you have configured the Canvas's {{#crossLink \"Scene\"}}Scene{{/crossLink}} to preserve the\nWebGL drawing buffer, which has a performance overhead.\n\n#### Usage:\n\n````javascript\n// Get snapshot asynchronously\nmyScene.canvas.getSnapshot({\n    width: 500, // Defaults to size of canvas\n    height: 500,\n    format: \"png\" // Options are \"jpeg\" (default), \"png\" and \"bmp\"\n}, function(imageDataURL) {\n    imageElement.src = imageDataURL;\n});\n\n// Get snapshot synchronously, requires that Scene be\n// configured with preserveDrawingBuffer; true\nimageElement.src = myScene.canvas.getSnapshot({\n    width: 500,\n    height: 500,\n    format: \"png\"\n});\n````",
            "itemtype": "method",
            "name": "getSnapshot",
            "params": [
                {
                    "name": "params",
                    "description": "Capture options.",
                    "type": "*",
                    "optional": true,
                    "props": [
                        {
                            "name": "width",
                            "description": "Desired width of result in pixels - defaults to width of canvas.",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "height",
                            "description": "Desired height of result in pixels - defaults to height of canvas.",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "format",
                            "description": "Desired format; \"jpeg\", \"png\" or \"bmp\".",
                            "type": "String",
                            "optional": true,
                            "optdefault": "\"jpeg\""
                        }
                    ]
                },
                {
                    "name": "ok",
                    "description": "Callback to return the image data when taking a snapshot asynchronously.",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "String-encoded image data when taking the snapshot synchronously. Returns null when the ````ok```` callback is given.",
                "type": "String"
            },
            "class": "Canvas",
            "module": "xeogl",
            "submodule": "canvas"
        },
        {
            "file": "src/canvas/canvas.js",
            "line": 574,
            "description": "Reads colors of pixels from the last rendered frame.\n\n<p>Call this method like this:</p>\n\n````JavaScript\n\n// Ignore transparent pixels (default is false)\nvar opaqueOnly = true;\n\nvar colors = new Float32Array(8);\n\nmyCanvas.readPixels([ 100, 22, 12, 33 ], colors, 2, opaqueOnly);\n````\n\nThen the r,g,b components of the colors will be set to the colors at those pixels.",
            "params": [
                {
                    "name": "pixels",
                    "description": "",
                    "type": "Float32Array"
                },
                {
                    "name": "colors",
                    "description": "",
                    "type": "Float32Array"
                },
                {
                    "name": "size",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "opaqueOnly",
                    "description": "",
                    "type": "Boolean"
                }
            ],
            "class": "Canvas",
            "module": "xeogl",
            "submodule": "canvas"
        },
        {
            "file": "src/canvas/canvas.js",
            "line": 602,
            "description": "A background color for the canvas. This is overridden by {{#crossLink \"Canvas/backgroundImage:property\"}}{{/crossLink}}.\n\nYou can set this to a new color at any time.",
            "itemtype": "property",
            "name": "backgroundColor",
            "type": "Float32Array",
            "default": "null",
            "class": "Canvas",
            "module": "xeogl",
            "submodule": "canvas"
        },
        {
            "file": "src/canvas/canvas.js",
            "line": 635,
            "description": "URL of a background image for the canvas. This is overrided by {{#crossLink \"Canvas/backgroundColor/property\"}}{{/crossLink}}.\n\nYou can set this to a new file path at any time.",
            "itemtype": "property",
            "name": "backgroundImage",
            "type": "String",
            "class": "Canvas",
            "module": "xeogl",
            "submodule": "canvas"
        },
        {
            "file": "src/canvas/canvas.js",
            "line": 674,
            "description": "The busy {{#crossLink \"Spinner\"}}{{/crossLink}} for this Canvas.",
            "itemtype": "property",
            "name": "spinner",
            "type": "Spinner",
            "final": 1,
            "class": "Canvas",
            "module": "xeogl",
            "submodule": "canvas"
        },
        {
            "file": "src/canvas/spinner.js",
            "line": 109,
            "description": "Whether Spinner shows while images are loading for components like {{#crossLink \"Texture\"}}{{/crossLink}}.",
            "itemtype": "property",
            "name": "textures",
            "default": "true",
            "type": "Boolean",
            "class": "Spinner",
            "module": "xeogl",
            "submodule": "canvas"
        },
        {
            "file": "src/canvas/spinner.js",
            "line": 130,
            "description": "The number of processes this Spinner represents.\n\nThe Spinner is visible while this property is greater than zero.\n\nIncrement this property whenever you commence some process during which you want\nthe Spinner to be visible, then decrement it again when the process is complete.\n\nClamps to zero if you attempt to set to to a negative value.\n\nFires a {{#crossLink \"Spinner/processes:event\"}}{{/crossLink}} event on change.",
            "itemtype": "property",
            "name": "processes",
            "default": "0",
            "type": "Number",
            "class": "Spinner",
            "module": "xeogl",
            "submodule": "canvas"
        },
        {
            "file": "src/canvas/spinner.js",
            "line": 164,
            "description": "Fired whenever this Spinner's {{#crossLink \"Spinner/visible:property\"}}{{/crossLink}} property changes.",
            "itemtype": "event",
            "name": "processes",
            "params": [
                {
                    "name": "value",
                    "description": "The property's new value"
                }
            ],
            "class": "Spinner",
            "module": "xeogl",
            "submodule": "canvas"
        },
        {
            "file": "src/clipping/clip.js",
            "line": 100,
            "description": "Indicates whether this Clip is active or not.\n\nFires a {{#crossLink \"Clip/active:event\"}}{{/crossLink}} event on change.",
            "itemtype": "property",
            "name": "active",
            "default": "true",
            "type": "Boolean",
            "class": "Clip",
            "module": "xeogl",
            "submodule": "clipping"
        },
        {
            "file": "src/clipping/clip.js",
            "line": 115,
            "description": "Fired whenever this Clip's {{#crossLink \"Clip/active:property\"}}{{/crossLink}} property changes.",
            "itemtype": "event",
            "name": "active",
            "params": [
                {
                    "name": "value",
                    "description": "The property's new value",
                    "type": "Boolean"
                }
            ],
            "class": "Clip",
            "module": "xeogl",
            "submodule": "clipping"
        },
        {
            "file": "src/clipping/clip.js",
            "line": 129,
            "description": "The World-space position of this Clip's plane.\n\nFires a {{#crossLink \"Clip/pos:event\"}}{{/crossLink}} event on change.",
            "itemtype": "property",
            "name": "pos",
            "default": "[0, 0, 0]",
            "type": "Float32Array",
            "class": "Clip",
            "module": "xeogl",
            "submodule": "clipping"
        },
        {
            "file": "src/clipping/clip.js",
            "line": 146,
            "description": "Fired whenever this Clip's {{#crossLink \"Clip/pos:property\"}}{{/crossLink}} property changes.",
            "itemtype": "event",
            "name": "pos",
            "params": [
                {
                    "name": "value",
                    "description": "Float32Array The property's new value"
                }
            ],
            "class": "Clip",
            "module": "xeogl",
            "submodule": "clipping"
        },
        {
            "file": "src/clipping/clip.js",
            "line": 160,
            "description": "Vector indicating the orientation of this Clip plane.\n\nThe vector originates at {{#crossLink \"Clip/pos:property\"}}{{/crossLink}}. Elements on the\nsame side of the vector are clipped.\n\nFires a {{#crossLink \"Clip/dir:event\"}}{{/crossLink}} event on change.",
            "itemtype": "property",
            "name": "dir",
            "default": "[0, 0, -1]",
            "type": "Float32Array",
            "class": "Clip",
            "module": "xeogl",
            "submodule": "clipping"
        },
        {
            "file": "src/clipping/clip.js",
            "line": 180,
            "description": "Fired whenever this Clip's {{#crossLink \"Clip/dir:property\"}}{{/crossLink}} property changes.",
            "itemtype": "event",
            "name": "dir",
            "params": [
                {
                    "name": "value",
                    "description": "The property's new value",
                    "type": "Float32Array"
                }
            ],
            "class": "Clip",
            "module": "xeogl",
            "submodule": "clipping"
        },
        {
            "file": "src/clipping/clips.js",
            "line": 46,
            "description": "The clipping planes contained within this Clips.\n\nFires a {{#crossLink \"Clips/clips:event\"}}{{/crossLink}} event on change.",
            "itemtype": "property",
            "name": "clips",
            "default": "[]",
            "type": "Array(xeogl.Clip)",
            "class": "Clips",
            "module": "xeogl",
            "submodule": "clipping"
        },
        {
            "file": "src/clipping/clips.js",
            "line": 141,
            "description": "Fired whenever this Clips' {{#crossLink \"Clips/clips:property\"}}{{/crossLink}} property changes.",
            "itemtype": "event",
            "name": "clips",
            "params": [
                {
                    "name": "value",
                    "description": "The property's new value",
                    "type": "Array of xeogl.Clip"
                }
            ],
            "class": "Clips",
            "module": "xeogl",
            "submodule": "clipping"
        },
        {
            "file": "src/controls/cameraControl.js",
            "line": 65,
            "description": "JavaScript class name for this Component.",
            "itemtype": "property",
            "name": "type",
            "type": "String",
            "final": 1,
            "class": "CameraControl",
            "module": "xeogl",
            "submodule": "controls"
        },
        {
            "file": "src/controls/cameraControl.js",
            "line": 105,
            "description": "Indicates whether this CameraControl is active or not.\n\nFires a {{#crossLink \"CameraControl/active:event\"}}{{/crossLink}} event on change.",
            "itemtype": "property",
            "name": "active",
            "default": "true",
            "type": "Boolean",
            "class": "CameraControl",
            "module": "xeogl",
            "submodule": "controls"
        },
        {
            "file": "src/controls/cameraControl.js",
            "line": 120,
            "description": "Fired whenever this CameraControl's {{#crossLink \"CameraControl/active:property\"}}{{/crossLink}} property changes.",
            "itemtype": "event",
            "name": "active",
            "params": [
                {
                    "name": "value",
                    "description": "The property's new value",
                    "type": "Boolean"
                }
            ],
            "class": "CameraControl",
            "module": "xeogl",
            "submodule": "controls"
        },
        {
            "file": "src/controls/cameraControl.js",
            "line": 134,
            "description": "Flag which indicates whether this CameraControl is in \"first person\" mode.\n\nIn \"first person\" mode (disabled by default) the look position rotates about the eye position. Otherwise,\nthe eye rotates about the look.\n\nFires a {{#crossLink \"KeyboardRotateCamera/firstPerson:event\"}}{{/crossLink}} event on change.",
            "itemtype": "property",
            "name": "firstPerson",
            "default": "false",
            "type": "Boolean",
            "class": "CameraControl",
            "module": "xeogl",
            "submodule": "controls"
        },
        {
            "file": "src/controls/cameraControl.js",
            "line": 154,
            "description": "Fired whenever this CameraControl's {{#crossLink \"CameraControl/firstPerson:property\"}}{{/crossLink}} property changes.",
            "itemtype": "event",
            "name": "firstPerson",
            "params": [
                {
                    "name": "value",
                    "description": "The property's new value"
                }
            ],
            "class": "CameraControl",
            "module": "xeogl",
            "submodule": "controls"
        },
        {
            "file": "src/controls/cameraControl.js",
            "line": 167,
            "description": "Flag which indicates whether this CameraControl is in \"walking\" mode.\n\nWhen set true, this constrains eye movement to the horizontal X-Z plane. When doing a walkthrough,\nthis is useful to allow us to look upwards or downwards as we move, while keeping us moving in the\nhorizontal plane.\n\nThis only has an effect when also in \"first person\" mode.\n\nFires a {{#crossLink \"KeyboardRotateCamera/walking:event\"}}{{/crossLink}} event on change.",
            "itemtype": "property",
            "name": "walking",
            "default": "false",
            "type": "Boolean",
            "class": "CameraControl",
            "module": "xeogl",
            "submodule": "controls"
        },
        {
            "file": "src/controls/cameraControl.js",
            "line": 190,
            "description": "Fired whenever this CameraControl's {{#crossLink \"CameraControl/walking:property\"}}{{/crossLink}} property changes.",
            "itemtype": "event",
            "name": "walking",
            "params": [
                {
                    "name": "value",
                    "description": "The property's new value"
                }
            ],
            "class": "CameraControl",
            "module": "xeogl",
            "submodule": "controls"
        },
        {
            "file": "src/controls/cameraControl.js",
            "line": 203,
            "description": "TODO\nFires a {{#crossLink \"KeyboardRotateCamera/doublePickFlyTo:event\"}}{{/crossLink}} event on change.",
            "itemtype": "property",
            "name": "doublePickFlyTo",
            "default": "true",
            "type": "Boolean",
            "class": "CameraControl",
            "module": "xeogl",
            "submodule": "controls"
        },
        {
            "file": "src/controls/cameraControl.js",
            "line": 219,
            "description": "Fired whenever this CameraControl's {{#crossLink \"CameraControl/doublePickFlyTo:property\"}}{{/crossLink}} property changes.",
            "itemtype": "event",
            "name": "doublePickFlyTo",
            "params": [
                {
                    "name": "value",
                    "description": "The property's new value"
                }
            ],
            "class": "CameraControl",
            "module": "xeogl",
            "submodule": "controls"
        },
        {
            "file": "src/controls/cameraControl.js",
            "line": 233,
            "description": "A fact in range [0..1] indicating how much the camera keeps moving after you finish\npanning or rotating it.\n\nA value of 0.0 causes it to immediately stop, 0.5 causes its movement to decay 50% on each tick,\nwhile 1.0 causes no decay, allowing it continue moving, by the current rate of pan or rotation.\n\nYou may choose an inertia of zero when you want be able to precisely position or rotate the camera,\nwithout interference from inertia. ero inertia can also mean that less frames are rendered while\nyou are positioning the camera.\n\nFires a {{#crossLink \"KeyboardRotateCamera/inertia:event\"}}{{/crossLink}} event on change.",
            "itemtype": "property",
            "name": "inertia",
            "default": "0.5",
            "type": "Number",
            "class": "CameraControl",
            "module": "xeogl",
            "submodule": "controls"
        },
        {
            "file": "src/controls/cameraControl.js",
            "line": 256,
            "description": "Fired whenever this CameraControl's {{#crossLink \"CameraControl/inertia:property\"}}{{/crossLink}} property changes.",
            "itemtype": "event",
            "name": "inertia",
            "params": [
                {
                    "name": "value",
                    "description": "The property's new value"
                }
            ],
            "class": "CameraControl",
            "module": "xeogl",
            "submodule": "controls"
        },
        {
            "file": "src/controls/cameraControl.js",
            "line": 269,
            "description": "TODO\nFires a {{#crossLink \"KeyboardRotateCamera/keyboardLayout:event\"}}{{/crossLink}} event on change.",
            "itemtype": "property",
            "name": "keyboardLayout",
            "default": "\"qwerty\"",
            "type": "String",
            "class": "CameraControl",
            "module": "xeogl",
            "submodule": "controls"
        },
        {
            "file": "src/controls/cameraControl.js",
            "line": 285,
            "description": "Fired whenever this CameraControl's {{#crossLink \"CameraControl/keyboardLayout:property\"}}{{/crossLink}} property changes.",
            "itemtype": "event",
            "name": "keyboardLayout",
            "params": [
                {
                    "name": "value",
                    "description": "The property's new value"
                }
            ],
            "class": "CameraControl",
            "module": "xeogl",
            "submodule": "controls"
        },
        {
            "file": "src/controls/cameraControl.js",
            "line": 1067,
            "description": "Fired whenever the pointer no longer hovers over an {{#crossLink \"Entity\"}}{{/crossLink}}.",
            "itemtype": "event",
            "name": "hoverOut",
            "params": [
                {
                    "name": "entity",
                    "description": "The Entity"
                }
            ],
            "class": "CameraControl",
            "module": "xeogl",
            "submodule": "controls"
        },
        {
            "file": "src/controls/cameraControl.js",
            "line": 1077,
            "description": "Fired when the pointer is over a new {{#crossLink \"Entity\"}}{{/crossLink}}.",
            "itemtype": "event",
            "name": "hoverEnter",
            "params": [
                {
                    "name": "hit",
                    "description": "A pick hit result containing the ID of the Entity - see }{{/crossLink}}.",
                    "type": "#crossLink \"Scene/pick:method\""
                }
            ],
            "class": "CameraControl",
            "module": "xeogl",
            "submodule": "controls"
        },
        {
            "file": "src/controls/cameraControl.js",
            "line": 1085,
            "description": "Fired continuously while the pointer is moving while hovering over an {{#crossLink \"Entity\"}}{{/crossLink}}.",
            "itemtype": "event",
            "name": "hover",
            "params": [
                {
                    "name": "hit",
                    "description": "A pick hit result containing the ID of the Entity - see }{{/crossLink}}.",
                    "type": "#crossLink \"Scene/pick:method\""
                }
            ],
            "class": "CameraControl",
            "module": "xeogl",
            "submodule": "controls"
        },
        {
            "file": "src/controls/cameraControl.js",
            "line": 1094,
            "description": "Fired while the pointer hovers over the surface of an {{#crossLink \"Entity\"}}{{/crossLink}}.\n\nThis event provides 3D information about the point on the surface that the pointer is\nhovering over.",
            "itemtype": "event",
            "name": "hoverSurface",
            "params": [
                {
                    "name": "hit",
                    "description": "A surface pick hit result, containing the ID of the Entity and 3D info on the\nsurface possition - see }{{/crossLink}}.",
                    "type": "#crossLink \"Scene/pick:method\""
                }
            ],
            "class": "CameraControl",
            "module": "xeogl",
            "submodule": "controls"
        },
        {
            "file": "src/controls/cameraControl.js",
            "line": 1108,
            "description": "Fired whenever the pointer no longer hovers over an {{#crossLink \"Entity\"}}{{/crossLink}}.",
            "itemtype": "event",
            "name": "hoverOut",
            "params": [
                {
                    "name": "entity",
                    "description": "The Entity"
                }
            ],
            "class": "CameraControl",
            "module": "xeogl",
            "submodule": "controls"
        },
        {
            "file": "src/controls/cameraControl.js",
            "line": 1118,
            "description": "Fired continuously while the pointer is moving but not hovering over anything.",
            "itemtype": "event",
            "name": "hoverOff",
            "class": "CameraControl",
            "module": "xeogl",
            "submodule": "controls"
        },
        {
            "file": "src/controls/cameraControl.js",
            "line": 1190,
            "description": "Fired whenever the pointer has picked (ie. clicked or tapped) an {{#crossLink \"Entity\"}}{{/crossLink}}.",
            "itemtype": "event",
            "name": "picked",
            "params": [
                {
                    "name": "hit",
                    "description": "A surface pick hit result containing the ID of the Entity - see }{{/crossLink}}.",
                    "type": "#crossLink \"Scene/pick:method\""
                }
            ],
            "class": "CameraControl",
            "module": "xeogl",
            "submodule": "controls"
        },
        {
            "file": "src/controls/cameraControl.js",
            "line": 1199,
            "description": "Fired when the pointer has picked (ie. clicked or tapped) the surface of an {{#crossLink \"Entity\"}}{{/crossLink}}.\n\nThis event provides 3D information about the point on the surface that the pointer has picked.",
            "itemtype": "event",
            "name": "pickedSurface",
            "params": [
                {
                    "name": "hit",
                    "description": "A surface pick hit result, containing the ID of the Entity and 3D info on the\nsurface possition - see }{{/crossLink}}.",
                    "type": "#crossLink \"Scene/pick:method\""
                }
            ],
            "class": "CameraControl",
            "module": "xeogl",
            "submodule": "controls"
        },
        {
            "file": "src/controls/cameraControl.js",
            "line": 1212,
            "description": "Fired when the pointer attempted a pick (ie. clicked or tapped), but has hit nothing.",
            "itemtype": "event",
            "name": "pickedNothing",
            "class": "CameraControl",
            "module": "xeogl",
            "submodule": "controls"
        },
        {
            "file": "src/controls/cameraControl.js",
            "line": 1257,
            "description": "Fired whenever the pointer has double-picked (ie. double-clicked or double-tapped) an {{#crossLink \"Entity\"}}{{/crossLink}}.",
            "itemtype": "event",
            "name": "picked",
            "params": [
                {
                    "name": "hit",
                    "description": "A surface pick hit result containing the ID of the Entity - see }{{/crossLink}}.",
                    "type": "#crossLink \"Scene/pick:method\""
                }
            ],
            "class": "CameraControl",
            "module": "xeogl",
            "submodule": "controls"
        },
        {
            "file": "src/controls/cameraControl.js",
            "line": 1265,
            "description": "Fired when the pointer has double-picked (ie. double-clicked or double-tapped) the surface of an {{#crossLink \"Entity\"}}{{/crossLink}}.\n\nThis event provides 3D information about the point on the surface that the pointer has picked.",
            "itemtype": "event",
            "name": "doublePickedSurface",
            "params": [
                {
                    "name": "hit",
                    "description": "A surface pick hit result, containing the ID of the Entity and 3D info on the\nsurface possition - see }{{/crossLink}}.",
                    "type": "#crossLink \"Scene/pick:method\""
                }
            ],
            "class": "CameraControl",
            "module": "xeogl",
            "submodule": "controls"
        },
        {
            "file": "src/controls/cameraControl.js",
            "line": 1281,
            "description": "Fired when the pointer attempted a double-pick (ie. double-clicked or double-tapped), but has hit nothing.",
            "itemtype": "event",
            "name": "doublePickedNothing",
            "class": "CameraControl",
            "module": "xeogl",
            "submodule": "controls"
        },
        {
            "file": "src/controls/cameraControl.new.js",
            "line": 65,
            "description": "JavaScript class name for this Component.",
            "itemtype": "property",
            "name": "type",
            "type": "String",
            "final": 1,
            "class": "CameraControl",
            "module": "xeogl",
            "submodule": "controls"
        },
        {
            "file": "src/controls/cameraControl.new.js",
            "line": 105,
            "description": "Indicates whether this CameraControl is active or not.\n\nFires a {{#crossLink \"CameraControl/active:event\"}}{{/crossLink}} event on change.",
            "itemtype": "property",
            "name": "active",
            "default": "true",
            "type": "Boolean",
            "class": "CameraControl",
            "module": "xeogl",
            "submodule": "controls"
        },
        {
            "file": "src/controls/cameraControl.new.js",
            "line": 120,
            "description": "Fired whenever this CameraControl's {{#crossLink \"CameraControl/active:property\"}}{{/crossLink}} property changes.",
            "itemtype": "event",
            "name": "active",
            "params": [
                {
                    "name": "value",
                    "description": "The property's new value",
                    "type": "Boolean"
                }
            ],
            "class": "CameraControl",
            "module": "xeogl",
            "submodule": "controls"
        },
        {
            "file": "src/controls/cameraControl.new.js",
            "line": 134,
            "description": "Flag which indicates whether this CameraControl is in \"first person\" mode.\n\nIn \"first person\" mode (disabled by default) the look position rotates about the eye position. Otherwise,\nthe eye rotates about the look.\n\nFires a {{#crossLink \"KeyboardRotateCamera/firstPerson:event\"}}{{/crossLink}} event on change.",
            "itemtype": "property",
            "name": "firstPerson",
            "default": "false",
            "type": "Boolean",
            "class": "CameraControl",
            "module": "xeogl",
            "submodule": "controls"
        },
        {
            "file": "src/controls/cameraControl.new.js",
            "line": 154,
            "description": "Fired whenever this CameraControl's {{#crossLink \"CameraControl/firstPerson:property\"}}{{/crossLink}} property changes.",
            "itemtype": "event",
            "name": "firstPerson",
            "params": [
                {
                    "name": "value",
                    "description": "The property's new value"
                }
            ],
            "class": "CameraControl",
            "module": "xeogl",
            "submodule": "controls"
        },
        {
            "file": "src/controls/cameraControl.new.js",
            "line": 167,
            "description": "Flag which indicates whether this CameraControl is in \"walking\" mode.\n\nWhen set true, this constrains eye movement to the horizontal X-Z plane. When doing a walkthrough,\nthis is useful to allow us to look upwards or downwards as we move, while keeping us moving in the\nhorizontal plane.\n\nThis only has an effect when also in \"first person\" mode.\n\nFires a {{#crossLink \"KeyboardRotateCamera/walking:event\"}}{{/crossLink}} event on change.",
            "itemtype": "property",
            "name": "walking",
            "default": "false",
            "type": "Boolean",
            "class": "CameraControl",
            "module": "xeogl",
            "submodule": "controls"
        },
        {
            "file": "src/controls/cameraControl.new.js",
            "line": 190,
            "description": "Fired whenever this CameraControl's {{#crossLink \"CameraControl/walking:property\"}}{{/crossLink}} property changes.",
            "itemtype": "event",
            "name": "walking",
            "params": [
                {
                    "name": "value",
                    "description": "The property's new value"
                }
            ],
            "class": "CameraControl",
            "module": "xeogl",
            "submodule": "controls"
        },
        {
            "file": "src/controls/cameraControl.new.js",
            "line": 203,
            "description": "TODO\nFires a {{#crossLink \"KeyboardRotateCamera/doublePickFlyTo:event\"}}{{/crossLink}} event on change.",
            "itemtype": "property",
            "name": "doublePickFlyTo",
            "default": "true",
            "type": "Boolean",
            "class": "CameraControl",
            "module": "xeogl",
            "submodule": "controls"
        },
        {
            "file": "src/controls/cameraControl.new.js",
            "line": 219,
            "description": "Fired whenever this CameraControl's {{#crossLink \"CameraControl/doublePickFlyTo:property\"}}{{/crossLink}} property changes.",
            "itemtype": "event",
            "name": "doublePickFlyTo",
            "params": [
                {
                    "name": "value",
                    "description": "The property's new value"
                }
            ],
            "class": "CameraControl",
            "module": "xeogl",
            "submodule": "controls"
        },
        {
            "file": "src/controls/cameraControl.new.js",
            "line": 233,
            "description": "A fact in range [0..1] indicating how much the camera keeps moving after you finish\npanning or rotating it.\n\nA value of 0.0 causes it to immediately stop, 0.5 causes its movement to decay 50% on each tick,\nwhile 1.0 causes no decay, allowing it continue moving, by the current rate of pan or rotation.\n\nYou may choose an inertia of zero when you want be able to precisely position or rotate the camera,\nwithout interference from inertia. ero inertia can also mean that less frames are rendered while\nyou are positioning the camera.\n\nFires a {{#crossLink \"KeyboardRotateCamera/inertia:event\"}}{{/crossLink}} event on change.",
            "itemtype": "property",
            "name": "inertia",
            "default": "0.5",
            "type": "Number",
            "class": "CameraControl",
            "module": "xeogl",
            "submodule": "controls"
        },
        {
            "file": "src/controls/cameraControl.new.js",
            "line": 256,
            "description": "Fired whenever this CameraControl's {{#crossLink \"CameraControl/inertia:property\"}}{{/crossLink}} property changes.",
            "itemtype": "event",
            "name": "inertia",
            "params": [
                {
                    "name": "value",
                    "description": "The property's new value"
                }
            ],
            "class": "CameraControl",
            "module": "xeogl",
            "submodule": "controls"
        },
        {
            "file": "src/controls/cameraControl.new.js",
            "line": 269,
            "description": "TODO\nFires a {{#crossLink \"KeyboardRotateCamera/keyboardLayout:event\"}}{{/crossLink}} event on change.",
            "itemtype": "property",
            "name": "keyboardLayout",
            "default": "\"qwerty\"",
            "type": "String",
            "class": "CameraControl",
            "module": "xeogl",
            "submodule": "controls"
        },
        {
            "file": "src/controls/cameraControl.new.js",
            "line": 285,
            "description": "Fired whenever this CameraControl's {{#crossLink \"CameraControl/keyboardLayout:property\"}}{{/crossLink}} property changes.",
            "itemtype": "event",
            "name": "keyboardLayout",
            "params": [
                {
                    "name": "value",
                    "description": "The property's new value"
                }
            ],
            "class": "CameraControl",
            "module": "xeogl",
            "submodule": "controls"
        },
        {
            "file": "src/controls/cameraControl.new.js",
            "line": 958,
            "description": "Fired whenever the pointer no longer hovers over an {{#crossLink \"Entity\"}}{{/crossLink}}.",
            "itemtype": "event",
            "name": "hoverOut",
            "params": [
                {
                    "name": "entity",
                    "description": "The Entity"
                }
            ],
            "class": "CameraControl",
            "module": "xeogl",
            "submodule": "controls"
        },
        {
            "file": "src/controls/cameraControl.new.js",
            "line": 968,
            "description": "Fired continuously while the pointer is moving while hovering over an {{#crossLink \"Entity\"}}{{/crossLink}}.",
            "itemtype": "event",
            "name": "hover",
            "params": [
                {
                    "name": "hit",
                    "description": "A pick hit result containing the ID of the Entity - see }{{/crossLink}}.",
                    "type": "#crossLink \"Scene/pick:method\""
                }
            ],
            "class": "CameraControl",
            "module": "xeogl",
            "submodule": "controls"
        },
        {
            "file": "src/controls/cameraControl.new.js",
            "line": 979,
            "description": "Fired while the pointer hovers over the surface of an {{#crossLink \"Entity\"}}{{/crossLink}}.\n\nThis event provides 3D information about the point on the surface that the pointer is\nhovering over.",
            "itemtype": "event",
            "name": "hoverSurface",
            "params": [
                {
                    "name": "hit",
                    "description": "A surface pick hit result, containing the ID of the Entity and 3D info on the\nsurface possition - see }{{/crossLink}}.",
                    "type": "#crossLink \"Scene/pick:method\""
                }
            ],
            "class": "CameraControl",
            "module": "xeogl",
            "submodule": "controls"
        },
        {
            "file": "src/controls/cameraControl.new.js",
            "line": 993,
            "description": "Fired whenever the pointer no longer hovers over an {{#crossLink \"Entity\"}}{{/crossLink}}.",
            "itemtype": "event",
            "name": "hoverOut",
            "params": [
                {
                    "name": "entity",
                    "description": "The Entity"
                }
            ],
            "class": "CameraControl",
            "module": "xeogl",
            "submodule": "controls"
        },
        {
            "file": "src/controls/cameraControl.new.js",
            "line": 1003,
            "description": "Fired continuously while the pointer is moving but not hovering over anything.",
            "itemtype": "event",
            "name": "hoverOff",
            "class": "CameraControl",
            "module": "xeogl",
            "submodule": "controls"
        },
        {
            "file": "src/controls/cameraControl.new.js",
            "line": 1092,
            "description": "Fired whenever the pointer has picked (ie. clicked or tapped) an {{#crossLink \"Entity\"}}{{/crossLink}}.",
            "itemtype": "event",
            "name": "picked",
            "params": [
                {
                    "name": "hit",
                    "description": "A surface pick hit result containing the ID of the Entity - see }{{/crossLink}}.",
                    "type": "#crossLink \"Scene/pick:method\""
                }
            ],
            "class": "CameraControl",
            "module": "xeogl",
            "submodule": "controls"
        },
        {
            "file": "src/controls/cameraControl.new.js",
            "line": 1101,
            "description": "Fired when the pointer has picked (ie. clicked or tapped) the surface of an {{#crossLink \"Entity\"}}{{/crossLink}}.\n\nThis event provides 3D information about the point on the surface that the pointer has picked.",
            "itemtype": "event",
            "name": "pickedSurface",
            "params": [
                {
                    "name": "hit",
                    "description": "A surface pick hit result, containing the ID of the Entity and 3D info on the\nsurface possition - see }{{/crossLink}}.",
                    "type": "#crossLink \"Scene/pick:method\""
                }
            ],
            "class": "CameraControl",
            "module": "xeogl",
            "submodule": "controls"
        },
        {
            "file": "src/controls/cameraControl.new.js",
            "line": 1114,
            "description": "Fired when the pointer attempted a pick (ie. clicked or tapped), but has hit nothing.",
            "itemtype": "event",
            "name": "pickedNothing",
            "class": "CameraControl",
            "module": "xeogl",
            "submodule": "controls"
        },
        {
            "file": "src/controls/cameraControl.new.js",
            "line": 1157,
            "description": "Fired whenever the pointer has double-picked (ie. double-clicked or double-tapped) an {{#crossLink \"Entity\"}}{{/crossLink}}.",
            "itemtype": "event",
            "name": "picked",
            "params": [
                {
                    "name": "hit",
                    "description": "A surface pick hit result containing the ID of the Entity - see }{{/crossLink}}.",
                    "type": "#crossLink \"Scene/pick:method\""
                }
            ],
            "class": "CameraControl",
            "module": "xeogl",
            "submodule": "controls"
        },
        {
            "file": "src/controls/cameraControl.new.js",
            "line": 1165,
            "description": "Fired when the pointer has double-picked (ie. double-clicked or double-tapped) the surface of an {{#crossLink \"Entity\"}}{{/crossLink}}.\n\nThis event provides 3D information about the point on the surface that the pointer has picked.",
            "itemtype": "event",
            "name": "doublePickedSurface",
            "params": [
                {
                    "name": "hit",
                    "description": "A surface pick hit result, containing the ID of the Entity and 3D info on the\nsurface possition - see }{{/crossLink}}.",
                    "type": "#crossLink \"Scene/pick:method\""
                }
            ],
            "class": "CameraControl",
            "module": "xeogl",
            "submodule": "controls"
        },
        {
            "file": "src/controls/cameraControl.new.js",
            "line": 1181,
            "description": "Fired when the pointer attempted a double-pick (ie. double-clicked or double-tapped), but has hit nothing.",
            "itemtype": "event",
            "name": "doublePickedNothing",
            "class": "CameraControl",
            "module": "xeogl",
            "submodule": "controls"
        },
        {
            "file": "src/controls/cameraControl.newest.js",
            "line": 65,
            "description": "JavaScript class name for this Component.",
            "itemtype": "property",
            "name": "type",
            "type": "String",
            "final": 1,
            "class": "CameraControl",
            "module": "xeogl",
            "submodule": "controls"
        },
        {
            "file": "src/controls/cameraControl.newest.js",
            "line": 105,
            "description": "Indicates whether this CameraControl is active or not.\n\nFires a {{#crossLink \"CameraControl/active:event\"}}{{/crossLink}} event on change.",
            "itemtype": "property",
            "name": "active",
            "default": "true",
            "type": "Boolean",
            "class": "CameraControl",
            "module": "xeogl",
            "submodule": "controls"
        },
        {
            "file": "src/controls/cameraControl.newest.js",
            "line": 120,
            "description": "Fired whenever this CameraControl's {{#crossLink \"CameraControl/active:property\"}}{{/crossLink}} property changes.",
            "itemtype": "event",
            "name": "active",
            "params": [
                {
                    "name": "value",
                    "description": "The property's new value",
                    "type": "Boolean"
                }
            ],
            "class": "CameraControl",
            "module": "xeogl",
            "submodule": "controls"
        },
        {
            "file": "src/controls/cameraControl.newest.js",
            "line": 134,
            "description": "Flag which indicates whether this CameraControl is in \"first person\" mode.\n\nIn \"first person\" mode (disabled by default) the look position rotates about the eye position. Otherwise,\nthe eye rotates about the look.\n\nFires a {{#crossLink \"KeyboardRotateCamera/firstPerson:event\"}}{{/crossLink}} event on change.",
            "itemtype": "property",
            "name": "firstPerson",
            "default": "false",
            "type": "Boolean",
            "class": "CameraControl",
            "module": "xeogl",
            "submodule": "controls"
        },
        {
            "file": "src/controls/cameraControl.newest.js",
            "line": 154,
            "description": "Fired whenever this CameraControl's {{#crossLink \"CameraControl/firstPerson:property\"}}{{/crossLink}} property changes.",
            "itemtype": "event",
            "name": "firstPerson",
            "params": [
                {
                    "name": "value",
                    "description": "The property's new value"
                }
            ],
            "class": "CameraControl",
            "module": "xeogl",
            "submodule": "controls"
        },
        {
            "file": "src/controls/cameraControl.newest.js",
            "line": 167,
            "description": "Flag which indicates whether this CameraControl is in \"walking\" mode.\n\nWhen set true, this constrains eye movement to the horizontal X-Z plane. When doing a walkthrough,\nthis is useful to allow us to look upwards or downwards as we move, while keeping us moving in the\nhorizontal plane.\n\nThis only has an effect when also in \"first person\" mode.\n\nFires a {{#crossLink \"KeyboardRotateCamera/walking:event\"}}{{/crossLink}} event on change.",
            "itemtype": "property",
            "name": "walking",
            "default": "false",
            "type": "Boolean",
            "class": "CameraControl",
            "module": "xeogl",
            "submodule": "controls"
        },
        {
            "file": "src/controls/cameraControl.newest.js",
            "line": 190,
            "description": "Fired whenever this CameraControl's {{#crossLink \"CameraControl/walking:property\"}}{{/crossLink}} property changes.",
            "itemtype": "event",
            "name": "walking",
            "params": [
                {
                    "name": "value",
                    "description": "The property's new value"
                }
            ],
            "class": "CameraControl",
            "module": "xeogl",
            "submodule": "controls"
        },
        {
            "file": "src/controls/cameraControl.newest.js",
            "line": 203,
            "description": "TODO\nFires a {{#crossLink \"KeyboardRotateCamera/doublePickFlyTo:event\"}}{{/crossLink}} event on change.",
            "itemtype": "property",
            "name": "doublePickFlyTo",
            "default": "true",
            "type": "Boolean",
            "class": "CameraControl",
            "module": "xeogl",
            "submodule": "controls"
        },
        {
            "file": "src/controls/cameraControl.newest.js",
            "line": 219,
            "description": "Fired whenever this CameraControl's {{#crossLink \"CameraControl/doublePickFlyTo:property\"}}{{/crossLink}} property changes.",
            "itemtype": "event",
            "name": "doublePickFlyTo",
            "params": [
                {
                    "name": "value",
                    "description": "The property's new value"
                }
            ],
            "class": "CameraControl",
            "module": "xeogl",
            "submodule": "controls"
        },
        {
            "file": "src/controls/cameraControl.newest.js",
            "line": 233,
            "description": "A fact in range [0..1] indicating how much the camera keeps moving after you finish\npanning or rotating it.\n\nA value of 0.0 causes it to immediately stop, 0.5 causes its movement to decay 50% on each tick,\nwhile 1.0 causes no decay, allowing it continue moving, by the current rate of pan or rotation.\n\nYou may choose an inertia of zero when you want be able to precisely position or rotate the camera,\nwithout interference from inertia. ero inertia can also mean that less frames are rendered while\nyou are positioning the camera.\n\nFires a {{#crossLink \"KeyboardRotateCamera/inertia:event\"}}{{/crossLink}} event on change.",
            "itemtype": "property",
            "name": "inertia",
            "default": "0.5",
            "type": "Number",
            "class": "CameraControl",
            "module": "xeogl",
            "submodule": "controls"
        },
        {
            "file": "src/controls/cameraControl.newest.js",
            "line": 256,
            "description": "Fired whenever this CameraControl's {{#crossLink \"CameraControl/inertia:property\"}}{{/crossLink}} property changes.",
            "itemtype": "event",
            "name": "inertia",
            "params": [
                {
                    "name": "value",
                    "description": "The property's new value"
                }
            ],
            "class": "CameraControl",
            "module": "xeogl",
            "submodule": "controls"
        },
        {
            "file": "src/controls/cameraControl.newest.js",
            "line": 269,
            "description": "TODO\nFires a {{#crossLink \"KeyboardRotateCamera/keyboardLayout:event\"}}{{/crossLink}} event on change.",
            "itemtype": "property",
            "name": "keyboardLayout",
            "default": "\"qwerty\"",
            "type": "String",
            "class": "CameraControl",
            "module": "xeogl",
            "submodule": "controls"
        },
        {
            "file": "src/controls/cameraControl.newest.js",
            "line": 285,
            "description": "Fired whenever this CameraControl's {{#crossLink \"CameraControl/keyboardLayout:property\"}}{{/crossLink}} property changes.",
            "itemtype": "event",
            "name": "keyboardLayout",
            "params": [
                {
                    "name": "value",
                    "description": "The property's new value"
                }
            ],
            "class": "CameraControl",
            "module": "xeogl",
            "submodule": "controls"
        },
        {
            "file": "src/controls/cameraControl.newest.js",
            "line": 974,
            "description": "Fired whenever the pointer no longer hovers over an {{#crossLink \"Entity\"}}{{/crossLink}}.",
            "itemtype": "event",
            "name": "hoverOut",
            "params": [
                {
                    "name": "entity",
                    "description": "The Entity"
                }
            ],
            "class": "CameraControl",
            "module": "xeogl",
            "submodule": "controls"
        },
        {
            "file": "src/controls/cameraControl.newest.js",
            "line": 984,
            "description": "Fired when the pointer is over a new {{#crossLink \"Entity\"}}{{/crossLink}}.",
            "itemtype": "event",
            "name": "hoverEnter",
            "params": [
                {
                    "name": "hit",
                    "description": "A pick hit result containing the ID of the Entity - see }{{/crossLink}}.",
                    "type": "#crossLink \"Scene/pick:method\""
                }
            ],
            "class": "CameraControl",
            "module": "xeogl",
            "submodule": "controls"
        },
        {
            "file": "src/controls/cameraControl.newest.js",
            "line": 992,
            "description": "Fired continuously while the pointer is moving while hovering over an {{#crossLink \"Entity\"}}{{/crossLink}}.",
            "itemtype": "event",
            "name": "hover",
            "params": [
                {
                    "name": "hit",
                    "description": "A pick hit result containing the ID of the Entity - see }{{/crossLink}}.",
                    "type": "#crossLink \"Scene/pick:method\""
                }
            ],
            "class": "CameraControl",
            "module": "xeogl",
            "submodule": "controls"
        },
        {
            "file": "src/controls/cameraControl.newest.js",
            "line": 1001,
            "description": "Fired while the pointer hovers over the surface of an {{#crossLink \"Entity\"}}{{/crossLink}}.\n\nThis event provides 3D information about the point on the surface that the pointer is\nhovering over.",
            "itemtype": "event",
            "name": "hoverSurface",
            "params": [
                {
                    "name": "hit",
                    "description": "A surface pick hit result, containing the ID of the Entity and 3D info on the\nsurface possition - see }{{/crossLink}}.",
                    "type": "#crossLink \"Scene/pick:method\""
                }
            ],
            "class": "CameraControl",
            "module": "xeogl",
            "submodule": "controls"
        },
        {
            "file": "src/controls/cameraControl.newest.js",
            "line": 1015,
            "description": "Fired whenever the pointer no longer hovers over an {{#crossLink \"Entity\"}}{{/crossLink}}.",
            "itemtype": "event",
            "name": "hoverOut",
            "params": [
                {
                    "name": "entity",
                    "description": "The Entity"
                }
            ],
            "class": "CameraControl",
            "module": "xeogl",
            "submodule": "controls"
        },
        {
            "file": "src/controls/cameraControl.newest.js",
            "line": 1025,
            "description": "Fired continuously while the pointer is moving but not hovering over anything.",
            "itemtype": "event",
            "name": "hoverOff",
            "class": "CameraControl",
            "module": "xeogl",
            "submodule": "controls"
        },
        {
            "file": "src/controls/cameraControl.newest.js",
            "line": 1136,
            "description": "Fired whenever the pointer has picked (ie. clicked or tapped) an {{#crossLink \"Entity\"}}{{/crossLink}}.",
            "itemtype": "event",
            "name": "picked",
            "params": [
                {
                    "name": "hit",
                    "description": "A surface pick hit result containing the ID of the Entity - see }{{/crossLink}}.",
                    "type": "#crossLink \"Scene/pick:method\""
                }
            ],
            "class": "CameraControl",
            "module": "xeogl",
            "submodule": "controls"
        },
        {
            "file": "src/controls/cameraControl.newest.js",
            "line": 1145,
            "description": "Fired when the pointer has picked (ie. clicked or tapped) the surface of an {{#crossLink \"Entity\"}}{{/crossLink}}.\n\nThis event provides 3D information about the point on the surface that the pointer has picked.",
            "itemtype": "event",
            "name": "pickedSurface",
            "params": [
                {
                    "name": "hit",
                    "description": "A surface pick hit result, containing the ID of the Entity and 3D info on the\nsurface possition - see }{{/crossLink}}.",
                    "type": "#crossLink \"Scene/pick:method\""
                }
            ],
            "class": "CameraControl",
            "module": "xeogl",
            "submodule": "controls"
        },
        {
            "file": "src/controls/cameraControl.newest.js",
            "line": 1158,
            "description": "Fired when the pointer attempted a pick (ie. clicked or tapped), but has hit nothing.",
            "itemtype": "event",
            "name": "pickedNothing",
            "class": "CameraControl",
            "module": "xeogl",
            "submodule": "controls"
        },
        {
            "file": "src/controls/cameraControl.newest.js",
            "line": 1203,
            "description": "Fired whenever the pointer has double-picked (ie. double-clicked or double-tapped) an {{#crossLink \"Entity\"}}{{/crossLink}}.",
            "itemtype": "event",
            "name": "picked",
            "params": [
                {
                    "name": "hit",
                    "description": "A surface pick hit result containing the ID of the Entity - see }{{/crossLink}}.",
                    "type": "#crossLink \"Scene/pick:method\""
                }
            ],
            "class": "CameraControl",
            "module": "xeogl",
            "submodule": "controls"
        },
        {
            "file": "src/controls/cameraControl.newest.js",
            "line": 1211,
            "description": "Fired when the pointer has double-picked (ie. double-clicked or double-tapped) the surface of an {{#crossLink \"Entity\"}}{{/crossLink}}.\n\nThis event provides 3D information about the point on the surface that the pointer has picked.",
            "itemtype": "event",
            "name": "doublePickedSurface",
            "params": [
                {
                    "name": "hit",
                    "description": "A surface pick hit result, containing the ID of the Entity and 3D info on the\nsurface possition - see }{{/crossLink}}.",
                    "type": "#crossLink \"Scene/pick:method\""
                }
            ],
            "class": "CameraControl",
            "module": "xeogl",
            "submodule": "controls"
        },
        {
            "file": "src/controls/cameraControl.newest.js",
            "line": 1227,
            "description": "Fired when the pointer attempted a double-pick (ie. double-clicked or double-tapped), but has hit nothing.",
            "itemtype": "event",
            "name": "doublePickedNothing",
            "class": "CameraControl",
            "module": "xeogl",
            "submodule": "controls"
        },
        {
            "file": "src/entities/entity.js",
            "line": 532,
            "description": "Fired when this Entity is *picked* via a call to the {{#crossLink \"Canvas/pick:method\"}}{{/crossLink}} method\non the parent {{#crossLink \"Scene\"}}Scene{{/crossLink}}'s {{#crossLink \"Canvas\"}}Canvas {{/crossLink}}.",
            "itemtype": "event",
            "name": "picked",
            "params": [
                {
                    "name": "entityId",
                    "description": "The ID of this Entity.",
                    "type": "String"
                },
                {
                    "name": "canvasX",
                    "description": "The X-axis Canvas coordinate that was picked.",
                    "type": "Number"
                },
                {
                    "name": "canvasY",
                    "description": "The Y-axis Canvas coordinate that was picked.",
                    "type": "Number"
                }
            ],
            "class": "Entity",
            "module": "xeogl",
            "submodule": "entities"
        },
        {
            "file": "src/entities/entity.js",
            "line": 611,
            "description": "The {{#crossLink \"Geometry\"}}Geometry{{/crossLink}} attached to this Entity.\n\nMust be within the same {{#crossLink \"Scene\"}}Scene{{/crossLink}} as this Entity. Defaults to the parent\n{{#crossLink \"Scene\"}}Scene{{/crossLink}}'s default {{#crossLink \"Scene/geometry:property\"}}geometry{{/crossLink}}\n(a simple box) when set to a null or undefined value.\n\nUpdates {{#crossLink \"Entity/boundary\"}}{{/crossLink}},\n{{#crossLink \"Entity/worldObb\"}}{{/crossLink}} and\n{{#crossLink \"Entity/center\"}}{{/crossLink}}",
            "itemtype": "property",
            "name": "geometry",
            "type": "Geometry",
            "class": "Entity",
            "module": "xeogl",
            "submodule": "entities"
        },
        {
            "file": "src/entities/entity.js",
            "line": 654,
            "description": "The {{#crossLink \"Material\"}}Material{{/crossLink}} attached to this Entity.\n\nMust be within the same {{#crossLink \"Scene\"}}Scene{{/crossLink}} as this Entity. Defaults to the parent\n{{#crossLink \"Scene\"}}Scene{{/crossLink}}'s default {{#crossLink \"Scene/material:property\"}}material{{/crossLink}} when set to\na null or undefined value.",
            "itemtype": "property",
            "name": "material",
            "type": "Material",
            "class": "Entity",
            "module": "xeogl",
            "submodule": "entities"
        },
        {
            "file": "src/entities/entity.js",
            "line": 681,
            "description": "The {{#crossLink \"EmphasisMaterial\"}}EmphasisMaterial{{/crossLink}} attached to this Entity.\n\nMust be within the same {{#crossLink \"Scene\"}}Scene{{/crossLink}} as this Entity. Defaults to the parent\n{{#crossLink \"Scene\"}}Scene{{/crossLink}}'s default {{#crossLink \"Scene/ghostMaterial:property\"}}ghostMaterial{{/crossLink}} when set to\na null or undefined value.",
            "itemtype": "property",
            "name": "ghostMaterial",
            "type": "EmphasisMaterial",
            "class": "Entity",
            "module": "xeogl",
            "submodule": "entities"
        },
        {
            "file": "src/entities/entity.js",
            "line": 708,
            "description": "The {{#crossLink \"EmphasisMaterial\"}}EmphasisMaterial{{/crossLink}} attached to this Entity.\n\nMust be within the same {{#crossLink \"Scene\"}}Scene{{/crossLink}} as this Entity. Defaults to the parent\n{{#crossLink \"Scene\"}}Scene{{/crossLink}}'s default {{#crossLink \"Scene/highlightMaterial:property\"}}highlightMaterial{{/crossLink}} when set to\na null or undefined value.",
            "itemtype": "property",
            "name": "highlightMaterial",
            "type": "EmphasisMaterial",
            "class": "Entity",
            "module": "xeogl",
            "submodule": "entities"
        },
        {
            "file": "src/entities/entity.js",
            "line": 735,
            "description": "The {{#crossLink \"EmphasisMaterial\"}}EmphasisMaterial{{/crossLink}} attached to this Entity.\n\nMust be within the same {{#crossLink \"Scene\"}}Scene{{/crossLink}} as this Entity. Defaults to the parent\n{{#crossLink \"Scene\"}}Scene{{/crossLink}}'s default {{#crossLink \"Scene/selectedMaterial:property\"}}selectedMaterial{{/crossLink}} when set to\na null or undefined value.",
            "itemtype": "property",
            "name": "selectedMaterial",
            "type": "EmphasisMaterial",
            "class": "Entity",
            "module": "xeogl",
            "submodule": "entities"
        },
        {
            "file": "src/entities/entity.js",
            "line": 762,
            "description": "The {{#crossLink \"OutlineMaterial\"}}OutlineMaterial{{/crossLink}} attached to this Entity.\n\nMust be within the same {{#crossLink \"Scene\"}}Scene{{/crossLink}} as this Entity. Defaults to the parent\n{{#crossLink \"Scene\"}}Scene{{/crossLink}}'s default {{#crossLink \"Scene/outlineMaterial:property\"}}outlineMaterial{{/crossLink}} when set to\na null or undefined value.",
            "itemtype": "property",
            "name": "outlineMaterial",
            "type": "OutlineMaterial",
            "class": "Entity",
            "module": "xeogl",
            "submodule": "entities"
        },
        {
            "file": "src/entities/entity.js",
            "line": 789,
            "description": "The Local-to-World-space (modelling) {{#crossLink \"Transform\"}}{{/crossLink}} attached to this Entity.\n\nMust be within the same {{#crossLink \"Scene\"}}Scene{{/crossLink}} as this Entity. Defaults to the parent\n{{#crossLink \"Scene\"}}Scene{{/crossLink}}'s default {{#crossLink \"Scene/transform:property\"}}transform{{/crossLink}}\n(an identity matrix) when set to a null or undefined value.\n\nUpdates {{#crossLink \"Entity/boundary\"}}{{/crossLink}},\n{{#crossLink \"Entity/worldObb\"}}{{/crossLink}} and\n{{#crossLink \"Entity/center\"}}{{/crossLink}}",
            "itemtype": "property",
            "name": "transform",
            "type": "Transform",
            "class": "Entity",
            "module": "xeogl",
            "submodule": "entities"
        },
        {
            "file": "src/entities/entity.js",
            "line": 840,
            "description": "Indicates whether this Entity is visible or not.\n\nThe Entity is only rendered when {{#crossLink \"Entity/visible:property\"}}{{/crossLink}} is true and\n{{#crossLink \"Entity/culled:property\"}}{{/crossLink}} is false.",
            "itemtype": "property",
            "name": "visible",
            "default": "true",
            "type": "Boolean",
            "class": "Entity",
            "module": "xeogl",
            "submodule": "entities"
        },
        {
            "file": "src/entities/entity.js",
            "line": 862,
            "description": "Indicates whether or not this Entity is currently culled from view.\n\nThe Entity is only rendered when {{#crossLink \"Entity/visible:property\"}}{{/crossLink}} is true and\n{{#crossLink \"Entity/culled:property\"}}{{/crossLink}} is false.",
            "itemtype": "property",
            "name": "culled",
            "default": "false",
            "type": "Boolean",
            "class": "Entity",
            "module": "xeogl",
            "submodule": "entities"
        },
        {
            "file": "src/entities/entity.js",
            "line": 884,
            "description": "Indicates whether this entity is pickable or not.\n\nPicking is done via calls to {{#crossLink \"Canvas/pick:method\"}}Canvas#pick{{/crossLink}}.",
            "itemtype": "property",
            "name": "pickable",
            "default": "true",
            "type": "Boolean",
            "class": "Entity",
            "module": "xeogl",
            "submodule": "entities"
        },
        {
            "file": "src/entities/entity.js",
            "line": 911,
            "description": "Indicates whether this Entity is clippable by {{#crossLink \"Clips\"}}{{/crossLink}} components.",
            "itemtype": "property",
            "name": "clippable",
            "default": "true",
            "type": "Boolean",
            "class": "Entity",
            "module": "xeogl",
            "submodule": "entities"
        },
        {
            "file": "src/entities/entity.js",
            "line": 934,
            "description": "Indicates whether this Entity is included in boundary calculations.",
            "itemtype": "property",
            "name": "collidable",
            "default": "true",
            "type": "Boolean",
            "class": "Entity",
            "module": "xeogl",
            "submodule": "entities"
        },
        {
            "file": "src/entities/entity.js",
            "line": 957,
            "description": "Indicates whether this Entity casts shadows.",
            "itemtype": "property",
            "name": "castShadow",
            "default": "true",
            "type": "Boolean",
            "class": "Entity",
            "module": "xeogl",
            "submodule": "entities"
        },
        {
            "file": "src/entities/entity.js",
            "line": 980,
            "description": "Indicates whether this Entity receives shadows.",
            "itemtype": "property",
            "name": "receiveShadow",
            "default": "true",
            "type": "Boolean",
            "class": "Entity",
            "module": "xeogl",
            "submodule": "entities"
        },
        {
            "file": "src/entities/entity.js",
            "line": 1004,
            "description": "Indicates whether this Entity is rendered with an outline.\n\nThe outline effect is configured via the Entity's {{#crossLink \"Entity/outlineMaterial:property\"}}outlineMaterial{{/crossLink}} component.",
            "itemtype": "property",
            "name": "outlined",
            "default": "false",
            "type": "Boolean",
            "class": "Entity",
            "module": "xeogl",
            "submodule": "entities"
        },
        {
            "file": "src/entities/entity.js",
            "line": 1029,
            "description": "Indicates whether this Entity is highlighted.\n\nThe highlight effect is configured via the Entity's {{#crossLink \"Entity/highlightMaterial:property\"}}highlightMaterial{{/crossLink}}.",
            "itemtype": "property",
            "name": "highlighted",
            "default": "false",
            "type": "Boolean",
            "class": "Entity",
            "module": "xeogl",
            "submodule": "entities"
        },
        {
            "file": "src/entities/entity.js",
            "line": 1054,
            "description": "Indicates whether this Entity is selected.\n\nThe selected effect is configured via the Entity's {{#crossLink \"Entity/selectedMaterial:property\"}}selectedMaterial{{/crossLink}}.",
            "itemtype": "property",
            "name": "selected",
            "default": "false",
            "type": "Boolean",
            "class": "Entity",
            "module": "xeogl",
            "submodule": "entities"
        },
        {
            "file": "src/entities/entity.js",
            "line": 1079,
            "description": "RGBA colorize color, multiplies by the outgoing fragment color and transparency.",
            "itemtype": "property",
            "name": "colorize",
            "default": "[1.0, 1.0, 1.0, 1.0]",
            "type": "Float32Array",
            "class": "Entity",
            "module": "xeogl",
            "submodule": "entities"
        },
        {
            "file": "src/entities/entity.js",
            "line": 1112,
            "description": "Indicates this Entity's rendering order.\n\nThis can be set on multiple transparent Entities, to make them render in a specific order\nfor correct alpha blending.",
            "itemtype": "property",
            "name": "layer",
            "default": "0",
            "type": "Number",
            "class": "Entity",
            "module": "xeogl",
            "submodule": "entities"
        },
        {
            "file": "src/entities/entity.js",
            "line": 1140,
            "description": "Flag which indicates whether this Entity is stationary or not.\n\nSetting this true will disable the effect of {{#crossLink \"Lookat\"}}view transform{{/crossLink}}\ntranslations for this Entity, while still alowing it to rotate. This is useful for skybox Entities.",
            "itemtype": "property",
            "name": "stationary",
            "default": "false",
            "type": "Boolean",
            "class": "Entity",
            "module": "xeogl",
            "submodule": "entities"
        },
        {
            "file": "src/entities/entity.js",
            "line": 1166,
            "description": "Specifies the billboarding behaviour for this Entity.\n\nOptions are:\n\n* **\"none\"** -  **(default)** - No billboarding.\n* **\"spherical\"** - Entity is billboarded to face the viewpoint, rotating both vertically and horizontally.\n* **\"cylindrical\"** - Entity is billboarded to face the viewpoint, rotating only about its vertically\naxis. Use this mode for things like trees on a landscape.",
            "itemtype": "property",
            "name": "billboard",
            "default": "\"none\"",
            "type": "String",
            "class": "Entity",
            "module": "xeogl",
            "submodule": "entities"
        },
        {
            "file": "src/entities/entity.js",
            "line": 1201,
            "description": "Flag which indicates if this Entity is rendered with ghost effect.\n\nThe ghost effect is configured via the Entity's {{#crossLink \"Entity/ghostMaterial:property\"}}ghostMaterial{{/crossLink}}.",
            "itemtype": "property",
            "name": "ghosted",
            "default": "false",
            "type": "Boolean",
            "class": "Entity",
            "module": "xeogl",
            "submodule": "entities"
        },
        {
            "file": "src/entities/entity.js",
            "line": 1227,
            "description": "World-space 3D center of this Entity.",
            "itemtype": "property",
            "name": "center",
            "final": 1,
            "type": "{Float32Array}",
            "class": "Entity",
            "module": "xeogl",
            "submodule": "entities"
        },
        {
            "file": "src/entities/entity.js",
            "line": 1249,
            "description": "World-space axis-aligned 3D boundary (AABB) of this Entity.\n\nThe AABB is represented by a six-element Float32Array containing the min/max extents of the\naxis-aligned volume, ie. ````[xmin, ymin,zmin,xmax,ymax, zmax]````.",
            "itemtype": "property",
            "name": "aabb",
            "final": 1,
            "type": "{Float32Array}",
            "class": "Entity",
            "module": "xeogl",
            "submodule": "entities"
        },
        {
            "file": "src/entities/entity.js",
            "line": 1282,
            "description": "World-space oriented 3D boundary (OBB) of this Entity.\n\nThe OBB is represented by a 32-element Float32Array containing the eight vertices of the box,\nwhere each vertex is a homogeneous coordinate having [x,y,z,w] elements.",
            "itemtype": "property",
            "name": "obb",
            "final": 1,
            "type": "{Float32Array}",
            "class": "Entity",
            "module": "xeogl",
            "submodule": "entities"
        },
        {
            "file": "src/entities/entity.js",
            "line": 1310,
            "description": "World-space vertex positions of this Entity.\n\nThese are internally generated on-demand and cached. To free the cached\nvertex World positions when you're done with them, set this property to null or undefined.",
            "itemtype": "property",
            "name": "worpdPositions",
            "type": "Float32Array",
            "final": 1,
            "class": "Entity",
            "module": "xeogl",
            "submodule": "entities"
        },
        {
            "file": "src/entities/entity.js",
            "line": 1368,
            "description": "Fired whenever this Entity's World-space boundary changes.\n\nGet the latest boundary from the Entity's {{#crossLink \"Entity/aabb:property\"}}{{/crossLink}}\nand {{#crossLink \"Entity/obb:property\"}}{{/crossLink}} properties.",
            "itemtype": "event",
            "name": "boundary",
            "class": "Entity",
            "module": "xeogl",
            "submodule": "entities"
        },
        {
            "file": "src/geometry/aabbGeometry.js",
            "line": 118,
            "description": "A component whose AABB we'll dynamically fit this AABBGeometry to.\n\nThis property effectively replaces the {{#crossLink \"AABBGeometry/targetAABB:property\"}}{{/crossLink}} property.",
            "itemtype": "property",
            "name": "target",
            "type": "Component",
            "class": "AABBGeometry",
            "module": "xeogl",
            "submodule": "geometry"
        },
        {
            "file": "src/geometry/aabbGeometry.js",
            "line": 161,
            "description": "Sets this AABBGeometry to an axis-aligned box (AABB), given as a six-element Float32Array\ncontaining the min/max extents of the\naxis-aligned volume, ie. ````[xmin,ymin,zmin,xmax,ymax,zmax]````.\n\nThis property overrides the {{#crossLink \"AABBGeometry/target:property\"}}{{/crossLink}} property, causing it to become null.",
            "itemtype": "property",
            "name": "targetAABB",
            "type": "Float32Array",
            "class": "AABBGeometry",
            "module": "xeogl",
            "submodule": "geometry"
        },
        {
            "file": "src/geometry/geometry.js",
            "line": 672,
            "description": "The Geometry's primitive type.\n\nValid types are: 'points', 'lines', 'line-loop', 'line-strip', 'triangles', 'triangle-strip' and 'triangle-fan'.",
            "itemtype": "property",
            "name": "primitive",
            "default": "\"triangles\"",
            "type": "String",
            "class": "Geometry",
            "module": "xeogl",
            "submodule": "geometry"
        },
        {
            "file": "src/geometry/geometry.js",
            "line": 688,
            "description": "Indicates if this Geometry is quantized.\n\nCompression is an internally-performed optimization which stores positions, colors, normals and UVs\nin quantized and oct-encoded formats for reduced memory footprint and GPU bus usage.\n\nQuantized geometry may not be updated.",
            "itemtype": "property",
            "name": "quantized",
            "default": "false",
            "type": "Boolean",
            "final": 1,
            "class": "Geometry",
            "module": "xeogl",
            "submodule": "geometry"
        },
        {
            "file": "src/geometry/geometry.js",
            "line": 708,
            "description": "Indicates if this Geometry is combined.\n\nCombination is an internally-performed optimization which combines positions, colors, normals and UVs into\nthe same WebGL vertex buffers with other Geometries, in order to reduce the number of buffer binds\nperformed per frame.",
            "itemtype": "property",
            "name": "combined",
            "default": "false",
            "type": "Boolean",
            "final": 1,
            "class": "Geometry",
            "module": "xeogl",
            "submodule": "geometry"
        },
        {
            "file": "src/geometry/geometry.js",
            "line": 728,
            "description": "The Geometry's vertex positions.",
            "itemtype": "property",
            "name": "positions",
            "default": "null",
            "type": "Float32Array",
            "class": "Geometry",
            "module": "xeogl",
            "submodule": "geometry"
        },
        {
            "file": "src/geometry/geometry.js",
            "line": 778,
            "description": "The Geometry's vertex normals.",
            "itemtype": "property",
            "name": "normals",
            "default": "null",
            "type": "Float32Array",
            "class": "Geometry",
            "module": "xeogl",
            "submodule": "geometry"
        },
        {
            "file": "src/geometry/geometry.js",
            "line": 829,
            "description": "The Geometry's UV coordinates.",
            "itemtype": "property",
            "name": "uv",
            "default": "null",
            "type": "Float32Array",
            "class": "Geometry",
            "module": "xeogl",
            "submodule": "geometry"
        },
        {
            "file": "src/geometry/geometry.js",
            "line": 878,
            "description": "The Geometry's vertex colors.",
            "itemtype": "property",
            "name": "colors",
            "default": "null",
            "type": "Float32Array",
            "class": "Geometry",
            "module": "xeogl",
            "submodule": "geometry"
        },
        {
            "file": "src/geometry/geometry.js",
            "line": 917,
            "description": "The Geometry's indices.\n\nIf ````xeogl.WEBGL_INFO.SUPPORTED_EXTENSIONS[\"OES_element_index_uint\"]```` is true, then this can be\na ````Uint32Array````, otherwise it needs to be a ````Uint16Array````.",
            "itemtype": "property",
            "name": "indices",
            "default": "null",
            "type": "Uint16Array | Uint32Array",
            "final": 1,
            "class": "Geometry",
            "module": "xeogl",
            "submodule": "geometry"
        },
        {
            "file": "src/geometry/geometry.js",
            "line": 934,
            "description": "Local-space axis-aligned 3D boundary (AABB) of this geometry.\n\nThe AABB is represented by a six-element Float32Array containing the min/max extents of the\naxis-aligned volume, ie. ````[xmin, ymin,zmin,xmax,ymax, zmax]````.",
            "itemtype": "property",
            "name": "aabb",
            "final": 1,
            "type": "{Float32Array}",
            "class": "Geometry",
            "module": "xeogl",
            "submodule": "geometry"
        },
        {
            "file": "src/geometry/geometry.js",
            "line": 957,
            "description": "Local-space oriented 3D boundary (OBB) of this geometry.\n\nThe OBB is represented by a 32-element Float32Array containing the eight vertices of the box,\nwhere each vertex is a homogeneous coordinate having [x,y,z,w] elements.",
            "itemtype": "property",
            "name": "obb",
            "final": 1,
            "type": "{Float32Array}",
            "class": "Geometry",
            "module": "xeogl",
            "submodule": "geometry"
        },
        {
            "file": "src/geometry/geometry.js",
            "line": 1010,
            "description": "Fired whenever this Geometry's boundary changes.\n\nGet the latest boundary from the Geometry's {{#crossLink \"Geometry/aabb:property\"}}{{/crossLink}}\nand {{#crossLink \"Geometry/obb:property\"}}{{/crossLink}} properties.",
            "itemtype": "event",
            "name": "boundary",
            "class": "Geometry",
            "module": "xeogl",
            "submodule": "geometry"
        },
        {
            "file": "src/geometry/obbGeometry.js",
            "line": 103,
            "description": "A component whose OBB we'll dynamically fit this AABBGeometry to.\n\nThis property effectively replaces the {{#crossLink \"OBBGeometry/targetOBB:property\"}}{{/crossLink}} property.",
            "itemtype": "property",
            "name": "target",
            "type": "Component",
            "class": "OBBGeometry",
            "module": "xeogl",
            "submodule": "geometry"
        },
        {
            "file": "src/geometry/obbGeometry.js",
            "line": 146,
            "description": "Sets this OBBGeometry to an entity-oriented bounding box (OBB), given as a 32-element Float32Array\ncontaining homogeneous coordinates for the eight corner vertices, ie. each having elements [x,y,z,w].\n\nThis property effectively replaces the {{#crossLink \"OBBGeometry/boundary:property\"}}{{/crossLink}} property, causing it to become null.",
            "itemtype": "property",
            "name": "targetOBB",
            "type": "Float32Array",
            "class": "OBBGeometry",
            "module": "xeogl",
            "submodule": "geometry"
        },
        {
            "file": "src/geometry/pathGeometry.js",
            "line": 70,
            "description": "Implement protected virtual template method {{#crossLink \"Geometry/method:_update\"}}{{/crossLink}},\nto generate geometry data arrays.",
            "access": "protected",
            "tagname": "",
            "class": "PathGeometry",
            "module": "xeogl",
            "submodule": "geometry"
        },
        {
            "file": "src/geometry/pathGeometry.js",
            "line": 117,
            "description": "The Path for this PathGeometry.",
            "itemtype": "property",
            "name": "path",
            "type": "{Path}",
            "class": "PathGeometry",
            "module": "xeogl",
            "submodule": "geometry"
        },
        {
            "file": "src/geometry/pathGeometry.js",
            "line": 146,
            "description": "The number of segments in this PathGeometry.",
            "itemtype": "property",
            "name": "divisions",
            "default": "6",
            "type": "{Number}",
            "class": "PathGeometry",
            "module": "xeogl",
            "submodule": "geometry"
        },
        {
            "file": "src/input/input.js",
            "line": 111,
            "type": "{boolean}",
            "class": "Input",
            "module": "xeogl",
            "submodule": "input"
        },
        {
            "file": "src/input/input.js",
            "line": 117,
            "type": "{boolean}",
            "class": "Input",
            "module": "xeogl",
            "submodule": "input"
        },
        {
            "file": "src/input/input.js",
            "line": 123,
            "type": "{boolean}",
            "class": "Input",
            "module": "xeogl",
            "submodule": "input"
        },
        {
            "file": "src/input/input.js",
            "line": 129,
            "type": "{boolean}",
            "class": "Input",
            "module": "xeogl",
            "submodule": "input"
        },
        {
            "file": "src/input/input.js",
            "line": 135,
            "type": "{boolean}",
            "class": "Input",
            "module": "xeogl",
            "submodule": "input"
        },
        {
            "file": "src/input/input.js",
            "line": 141,
            "type": "{boolean}",
            "class": "Input",
            "module": "xeogl",
            "submodule": "input"
        },
        {
            "file": "src/input/input.js",
            "line": 147,
            "type": "{boolean}",
            "class": "Input",
            "module": "xeogl",
            "submodule": "input"
        },
        {
            "file": "src/input/input.js",
            "line": 172,
            "description": "Fired whenever a key is pressed while the parent\n{{#crossLink \"Scene\"}}Scene{{/crossLink}}'s {{#crossLink \"Canvas\"}}Canvas{{/crossLink}} has input focus.",
            "itemtype": "event",
            "name": "keydown",
            "params": [
                {
                    "name": "value",
                    "description": "The key code, for example {{#crossLink \"Input/KEY_LEFT_ARROW:property\"}}{{/crossLink}},",
                    "type": "Number"
                }
            ],
            "class": "Input",
            "module": "xeogl",
            "submodule": "input"
        },
        {
            "file": "src/input/input.js",
            "line": 205,
            "description": "Fired whenever a key is released while the parent\n{{#crossLink \"Scene\"}}Scene{{/crossLink}}'s {{#crossLink \"Canvas\"}}Canvas{{/crossLink}} has input focus.",
            "itemtype": "event",
            "name": "keyup",
            "params": [
                {
                    "name": "value",
                    "description": "The key code, for example {{#crossLink \"Input/KEY_LEFT_ARROW:property\"}}{{/crossLink}},",
                    "type": "Number"
                }
            ],
            "class": "Input",
            "module": "xeogl",
            "submodule": "input"
        },
        {
            "file": "src/input/input.js",
            "line": 226,
            "description": "Fired whenever the mouse is moved into of the parent\n{{#crossLink \"Scene\"}}Scene{{/crossLink}}'s {{#crossLink \"Canvas\"}}Canvas{{/crossLink}}.",
            "itemtype": "event",
            "name": "mouseenter",
            "params": [
                {
                    "name": "value",
                    "description": "The mouse coordinates within the {{#crossLink \"Canvas\"}}Canvas{{/crossLink}},",
                    "type": "[Number, Number]"
                }
            ],
            "class": "Input",
            "module": "xeogl",
            "submodule": "input"
        },
        {
            "file": "src/input/input.js",
            "line": 245,
            "description": "Fired whenever the mouse is moved out of the parent\n{{#crossLink \"Scene\"}}Scene{{/crossLink}}'s {{#crossLink \"Canvas\"}}Canvas{{/crossLink}}.",
            "itemtype": "event",
            "name": "mouseleave",
            "params": [
                {
                    "name": "value",
                    "description": "The mouse coordinates within the {{#crossLink \"Canvas\"}}Canvas{{/crossLink}},",
                    "type": "[Number, Number]"
                }
            ],
            "class": "Input",
            "module": "xeogl",
            "submodule": "input"
        },
        {
            "file": "src/input/input.js",
            "line": 283,
            "description": "Fired whenever the mouse is pressed over the parent\n{{#crossLink \"Scene\"}}Scene{{/crossLink}}'s {{#crossLink \"Canvas\"}}Canvas{{/crossLink}}.",
            "itemtype": "event",
            "name": "mousedown",
            "params": [
                {
                    "name": "value",
                    "description": "The mouse coordinates within the {{#crossLink \"Canvas\"}}Canvas{{/crossLink}},",
                    "type": "[Number, Number]"
                }
            ],
            "class": "Input",
            "module": "xeogl",
            "submodule": "input"
        },
        {
            "file": "src/input/input.js",
            "line": 322,
            "description": "Fired whenever the mouse is released over the parent\n{{#crossLink \"Scene\"}}Scene{{/crossLink}}'s {{#crossLink \"Canvas\"}}Canvas{{/crossLink}}.",
            "itemtype": "event",
            "name": "mouseup",
            "params": [
                {
                    "name": "value",
                    "description": "The mouse coordinates within the {{#crossLink \"Canvas\"}}Canvas{{/crossLink}},",
                    "type": "[Number, Number]"
                }
            ],
            "class": "Input",
            "module": "xeogl",
            "submodule": "input"
        },
        {
            "file": "src/input/input.js",
            "line": 363,
            "description": "Fired whenever the mouse is double-clicked over the parent\n{{#crossLink \"Scene\"}}Scene{{/crossLink}}'s {{#crossLink \"Canvas\"}}Canvas{{/crossLink}}.",
            "itemtype": "event",
            "name": "dblclick",
            "params": [
                {
                    "name": "value",
                    "description": "The mouse coordinates within the {{#crossLink \"Canvas\"}}Canvas{{/crossLink}},",
                    "type": "[Number, Number]"
                }
            ],
            "class": "Input",
            "module": "xeogl",
            "submodule": "input"
        },
        {
            "file": "src/input/input.js",
            "line": 384,
            "description": "Fired whenever the mouse is moved over the parent\n{{#crossLink \"Scene\"}}Scene{{/crossLink}}'s {{#crossLink \"Canvas\"}}Canvas{{/crossLink}}.",
            "itemtype": "event",
            "name": "mousedown",
            "params": [
                {
                    "name": "value",
                    "description": "The mouse coordinates within the {{#crossLink \"Canvas\"}}Canvas{{/crossLink}},",
                    "type": "[Number, Number]"
                }
            ],
            "class": "Input",
            "module": "xeogl",
            "submodule": "input"
        },
        {
            "file": "src/input/input.js",
            "line": 405,
            "description": "Fired whenever the mouse wheel is moved over the parent\n{{#crossLink \"Viewer\"}}Viewer{{/crossLink}}'s {{#crossLink \"Canvas\"}}Canvas{{/crossLink}}.",
            "itemtype": "event",
            "name": "mousewheel",
            "params": [
                {
                    "name": "delta",
                    "description": "The mouse wheel delta,",
                    "type": "Number"
                }
            ],
            "class": "Input",
            "module": "xeogl",
            "submodule": "input"
        },
        {
            "file": "src/input/input.js",
            "line": 436,
            "description": "Fired whenever the mouse is clicked over the parent\n{{#crossLink \"Scene\"}}Scene{{/crossLink}}'s {{#crossLink \"Canvas\"}}Canvas{{/crossLink}}.",
            "itemtype": "event",
            "name": "mouseclicked",
            "params": [
                {
                    "name": "value",
                    "description": "The mouse coordinates within the {{#crossLink \"Canvas\"}}Canvas{{/crossLink}},",
                    "type": "[Number, Number]"
                }
            ],
            "class": "Input",
            "module": "xeogl",
            "submodule": "input"
        },
        {
            "file": "src/input/input.js",
            "line": 493,
            "description": "Fired when the orientation of the device has changed.",
            "itemtype": "event",
            "name": "orientationchange",
            "params": [
                {
                    "name": "orientation",
                    "description": "The orientation: \"landscape-primary\", \"landscape-secondary\", \"portrait-secondary\" or \"portrait-primary\""
                },
                {
                    "name": "orientationAngle",
                    "description": "The orientation angle in degrees: 90 for landscape-primary, -90 for landscape-secondary, 180 for portrait-secondary or 0 for portrait-primary."
                }
            ],
            "class": "Input",
            "module": "xeogl",
            "submodule": "input"
        },
        {
            "file": "src/input/input.js",
            "line": 535,
            "description": "Fires on a regular interval and returns data about the rotation\n(in degrees per second) and acceleration (in meters per second squared) of the device, at that moment in\ntime. Some devices do not have the hardware to exclude the effect of gravity.",
            "itemtype": "event",
            "name": "devicemotion",
            "params": [
                {
                    "name": "Float32Array",
                    "description": "acceleration The acceleration of the device, in meters per second squared, as a 3-element vector. This value has taken into account the effect of gravity and removed it from the figures. This value may not exist if the hardware doesn't know how to remove gravity from the acceleration data."
                },
                {
                    "name": "Float32Array",
                    "description": "accelerationIncludingGravity The acceleration of the device, in meters per second squared, as a 3-element vector. This value includes the effect of gravity, and may be the only value available on devices that don't have a gyroscope to allow them to properly remove gravity from the data."
                },
                {
                    "name": ",",
                    "description": "Number interval The interval, in milliseconds, at which this event is fired. The next event will be fired in approximately this amount of time."
                },
                {
                    "name": "Float32Array",
                    "description": "rotationRate The rates of rotation of the device about each axis, in degrees per second."
                }
            ],
            "class": "Input",
            "module": "xeogl",
            "submodule": "input"
        },
        {
            "file": "src/input/input.js",
            "line": 559,
            "description": "Fired when fresh data is available from an orientation sensor about the current orientation\nof the device as compared to the Earth coordinate frame. This data is gathered from a\nmagnetometer inside the device. See\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/Guide/Events/Orientation_and_motion_data_explained\">Orientation and motion data explained</a> for more info.",
            "itemtype": "event",
            "name": "deviceorientation",
            "params": [
                {
                    "name": "Number",
                    "description": "alpha The current orientation of the device around the Z axis in degrees; that is, how far the device is rotated around a line perpendicular to the device."
                },
                {
                    "name": "Number",
                    "description": "beta The current orientation of the device around the X axis in degrees; that is, how far the device is tipped forward or backward."
                },
                {
                    "name": "Number",
                    "description": "gamma The current orientation of the device around the Y axis in degrees; that is, how far the device is turned left or right."
                },
                {
                    "name": "Boolean",
                    "description": "absolute This value is true if the orientation is provided as a difference between the device coordinate frame and the Earth coordinate frame; if the device can't detect the Earth coordinate frame, this value is false."
                }
            ],
            "class": "Input",
            "module": "xeogl",
            "submodule": "input"
        },
        {
            "file": "src/input/input.js",
            "line": 601,
            "description": "Enable or disable all input handlers",
            "params": [
                {
                    "name": "enable",
                    "description": ""
                }
            ],
            "class": "Input",
            "module": "xeogl",
            "submodule": "input"
        },
        {
            "file": "src/input/input.js",
            "line": 614,
            "description": "Code for the BACKSPACE key.",
            "itemtype": "property",
            "name": "KEY_BACKSPACE",
            "final": 1,
            "type": "Number",
            "class": "Input",
            "module": "xeogl",
            "submodule": "input"
        },
        {
            "file": "src/input/input.js",
            "line": 622,
            "description": "Code for the TAB key.",
            "itemtype": "property",
            "name": "KEY_TAB",
            "final": 1,
            "type": "Number",
            "class": "Input",
            "module": "xeogl",
            "submodule": "input"
        },
        {
            "file": "src/input/input.js",
            "line": 630,
            "description": "Code for the ENTER key.",
            "itemtype": "property",
            "name": "KEY_ENTER",
            "final": 1,
            "type": "Number",
            "class": "Input",
            "module": "xeogl",
            "submodule": "input"
        },
        {
            "file": "src/input/input.js",
            "line": 638,
            "description": "Code for the SHIFT key.",
            "itemtype": "property",
            "name": "KEY_SHIFT",
            "final": 1,
            "type": "Number",
            "class": "Input",
            "module": "xeogl",
            "submodule": "input"
        },
        {
            "file": "src/input/input.js",
            "line": 646,
            "description": "Code for the CTRL key.",
            "itemtype": "property",
            "name": "KEY_CTRL",
            "final": 1,
            "type": "Number",
            "class": "Input",
            "module": "xeogl",
            "submodule": "input"
        },
        {
            "file": "src/input/input.js",
            "line": 654,
            "description": "Code for the ALT key.",
            "itemtype": "property",
            "name": "KEY_ALT",
            "final": 1,
            "type": "Number",
            "class": "Input",
            "module": "xeogl",
            "submodule": "input"
        },
        {
            "file": "src/input/input.js",
            "line": 662,
            "description": "Code for the PAUSE_BREAK key.",
            "itemtype": "property",
            "name": "KEY_PAUSE_BREAK",
            "final": 1,
            "type": "Number",
            "class": "Input",
            "module": "xeogl",
            "submodule": "input"
        },
        {
            "file": "src/input/input.js",
            "line": 670,
            "description": "Code for the CAPS_LOCK key.",
            "itemtype": "property",
            "name": "KEY_CAPS_LOCK",
            "final": 1,
            "type": "Number",
            "class": "Input",
            "module": "xeogl",
            "submodule": "input"
        },
        {
            "file": "src/input/input.js",
            "line": 678,
            "description": "Code for the ESCAPE key.",
            "itemtype": "property",
            "name": "KEY_ESCAPE",
            "final": 1,
            "type": "Number",
            "class": "Input",
            "module": "xeogl",
            "submodule": "input"
        },
        {
            "file": "src/input/input.js",
            "line": 686,
            "description": "Code for the PAGE_UP key.",
            "itemtype": "property",
            "name": "KEY_PAGE_UP",
            "final": 1,
            "type": "Number",
            "class": "Input",
            "module": "xeogl",
            "submodule": "input"
        },
        {
            "file": "src/input/input.js",
            "line": 694,
            "description": "Code for the PAGE_DOWN key.",
            "itemtype": "property",
            "name": "KEY_PAGE_DOWN",
            "final": 1,
            "type": "Number",
            "class": "Input",
            "module": "xeogl",
            "submodule": "input"
        },
        {
            "file": "src/input/input.js",
            "line": 702,
            "description": "Code for the END key.",
            "itemtype": "property",
            "name": "KEY_END",
            "final": 1,
            "type": "Number",
            "class": "Input",
            "module": "xeogl",
            "submodule": "input"
        },
        {
            "file": "src/input/input.js",
            "line": 710,
            "description": "Code for the HOME key.",
            "itemtype": "property",
            "name": "KEY_HOME",
            "final": 1,
            "type": "Number",
            "class": "Input",
            "module": "xeogl",
            "submodule": "input"
        },
        {
            "file": "src/input/input.js",
            "line": 718,
            "description": "Code for the LEFT_ARROW key.",
            "itemtype": "property",
            "name": "KEY_LEFT_ARROW",
            "final": 1,
            "type": "Number",
            "class": "Input",
            "module": "xeogl",
            "submodule": "input"
        },
        {
            "file": "src/input/input.js",
            "line": 726,
            "description": "Code for the UP_ARROW key.",
            "itemtype": "property",
            "name": "KEY_UP_ARROW",
            "final": 1,
            "type": "Number",
            "class": "Input",
            "module": "xeogl",
            "submodule": "input"
        },
        {
            "file": "src/input/input.js",
            "line": 734,
            "description": "Code for the RIGHT_ARROW key.",
            "itemtype": "property",
            "name": "KEY_RIGHT_ARROW",
            "final": 1,
            "type": "Number",
            "class": "Input",
            "module": "xeogl",
            "submodule": "input"
        },
        {
            "file": "src/input/input.js",
            "line": 742,
            "description": "Code for the DOWN_ARROW key.",
            "itemtype": "property",
            "name": "KEY_DOWN_ARROW",
            "final": 1,
            "type": "Number",
            "class": "Input",
            "module": "xeogl",
            "submodule": "input"
        },
        {
            "file": "src/input/input.js",
            "line": 750,
            "description": "Code for the INSERT key.",
            "itemtype": "property",
            "name": "KEY_INSERT",
            "final": 1,
            "type": "Number",
            "class": "Input",
            "module": "xeogl",
            "submodule": "input"
        },
        {
            "file": "src/input/input.js",
            "line": 758,
            "description": "Code for the DELETE key.",
            "itemtype": "property",
            "name": "KEY_DELETE",
            "final": 1,
            "type": "Number",
            "class": "Input",
            "module": "xeogl",
            "submodule": "input"
        },
        {
            "file": "src/input/input.js",
            "line": 766,
            "description": "Code for the 0 key.",
            "itemtype": "property",
            "name": "KEY_NUM_0",
            "final": 1,
            "type": "Number",
            "class": "Input",
            "module": "xeogl",
            "submodule": "input"
        },
        {
            "file": "src/input/input.js",
            "line": 774,
            "description": "Code for the 1 key.",
            "itemtype": "property",
            "name": "KEY_NUM_1",
            "final": 1,
            "type": "Number",
            "class": "Input",
            "module": "xeogl",
            "submodule": "input"
        },
        {
            "file": "src/input/input.js",
            "line": 782,
            "description": "Code for the 2 key.",
            "itemtype": "property",
            "name": "KEY_NUM_2",
            "final": 1,
            "type": "Number",
            "class": "Input",
            "module": "xeogl",
            "submodule": "input"
        },
        {
            "file": "src/input/input.js",
            "line": 790,
            "description": "Code for the 3 key.",
            "itemtype": "property",
            "name": "KEY_NUM_3",
            "final": 1,
            "type": "Number",
            "class": "Input",
            "module": "xeogl",
            "submodule": "input"
        },
        {
            "file": "src/input/input.js",
            "line": 798,
            "description": "Code for the 4 key.",
            "itemtype": "property",
            "name": "KEY_NUM_4",
            "final": 1,
            "type": "Number",
            "class": "Input",
            "module": "xeogl",
            "submodule": "input"
        },
        {
            "file": "src/input/input.js",
            "line": 806,
            "description": "Code for the 5 key.",
            "itemtype": "property",
            "name": "KEY_NUM_5",
            "final": 1,
            "type": "Number",
            "class": "Input",
            "module": "xeogl",
            "submodule": "input"
        },
        {
            "file": "src/input/input.js",
            "line": 814,
            "description": "Code for the 6 key.",
            "itemtype": "property",
            "name": "KEY_NUM_6",
            "final": 1,
            "type": "Number",
            "class": "Input",
            "module": "xeogl",
            "submodule": "input"
        },
        {
            "file": "src/input/input.js",
            "line": 822,
            "description": "Code for the 7 key.",
            "itemtype": "property",
            "name": "KEY_NUM_7",
            "final": 1,
            "type": "Number",
            "class": "Input",
            "module": "xeogl",
            "submodule": "input"
        },
        {
            "file": "src/input/input.js",
            "line": 830,
            "description": "Code for the 8 key.",
            "itemtype": "property",
            "name": "KEY_NUM_8",
            "final": 1,
            "type": "Number",
            "class": "Input",
            "module": "xeogl",
            "submodule": "input"
        },
        {
            "file": "src/input/input.js",
            "line": 838,
            "description": "Code for the 9 key.",
            "itemtype": "property",
            "name": "KEY_NUM_9",
            "final": 1,
            "type": "Number",
            "class": "Input",
            "module": "xeogl",
            "submodule": "input"
        },
        {
            "file": "src/input/input.js",
            "line": 846,
            "description": "Code for the A key.",
            "itemtype": "property",
            "name": "KEY_A",
            "final": 1,
            "type": "Number",
            "class": "Input",
            "module": "xeogl",
            "submodule": "input"
        },
        {
            "file": "src/input/input.js",
            "line": 854,
            "description": "Code for the B key.",
            "itemtype": "property",
            "name": "KEY_B",
            "final": 1,
            "type": "Number",
            "class": "Input",
            "module": "xeogl",
            "submodule": "input"
        },
        {
            "file": "src/input/input.js",
            "line": 862,
            "description": "Code for the C key.",
            "itemtype": "property",
            "name": "KEY_C",
            "final": 1,
            "type": "Number",
            "class": "Input",
            "module": "xeogl",
            "submodule": "input"
        },
        {
            "file": "src/input/input.js",
            "line": 870,
            "description": "Code for the D key.",
            "itemtype": "property",
            "name": "KEY_D",
            "final": 1,
            "type": "Number",
            "class": "Input",
            "module": "xeogl",
            "submodule": "input"
        },
        {
            "file": "src/input/input.js",
            "line": 878,
            "description": "Code for the E key.",
            "itemtype": "property",
            "name": "KEY_E",
            "final": 1,
            "type": "Number",
            "class": "Input",
            "module": "xeogl",
            "submodule": "input"
        },
        {
            "file": "src/input/input.js",
            "line": 886,
            "description": "Code for the F key.",
            "itemtype": "property",
            "name": "KEY_F",
            "final": 1,
            "type": "Number",
            "class": "Input",
            "module": "xeogl",
            "submodule": "input"
        },
        {
            "file": "src/input/input.js",
            "line": 894,
            "description": "Code for the G key.",
            "itemtype": "property",
            "name": "KEY_G",
            "final": 1,
            "type": "Number",
            "class": "Input",
            "module": "xeogl",
            "submodule": "input"
        },
        {
            "file": "src/input/input.js",
            "line": 902,
            "description": "Code for the H key.",
            "itemtype": "property",
            "name": "KEY_H",
            "final": 1,
            "type": "Number",
            "class": "Input",
            "module": "xeogl",
            "submodule": "input"
        },
        {
            "file": "src/input/input.js",
            "line": 910,
            "description": "Code for the I key.",
            "itemtype": "property",
            "name": "KEY_I",
            "final": 1,
            "type": "Number",
            "class": "Input",
            "module": "xeogl",
            "submodule": "input"
        },
        {
            "file": "src/input/input.js",
            "line": 918,
            "description": "Code for the J key.",
            "itemtype": "property",
            "name": "KEY_J",
            "final": 1,
            "type": "Number",
            "class": "Input",
            "module": "xeogl",
            "submodule": "input"
        },
        {
            "file": "src/input/input.js",
            "line": 926,
            "description": "Code for the K key.",
            "itemtype": "property",
            "name": "KEY_K",
            "final": 1,
            "type": "Number",
            "class": "Input",
            "module": "xeogl",
            "submodule": "input"
        },
        {
            "file": "src/input/input.js",
            "line": 934,
            "description": "Code for the L key.",
            "itemtype": "property",
            "name": "KEY_L",
            "final": 1,
            "type": "Number",
            "class": "Input",
            "module": "xeogl",
            "submodule": "input"
        },
        {
            "file": "src/input/input.js",
            "line": 942,
            "description": "Code for the M key.",
            "itemtype": "property",
            "name": "KEY_M",
            "final": 1,
            "type": "Number",
            "class": "Input",
            "module": "xeogl",
            "submodule": "input"
        },
        {
            "file": "src/input/input.js",
            "line": 950,
            "description": "Code for the N key.",
            "itemtype": "property",
            "name": "KEY_N",
            "final": 1,
            "type": "Number",
            "class": "Input",
            "module": "xeogl",
            "submodule": "input"
        },
        {
            "file": "src/input/input.js",
            "line": 958,
            "description": "Code for the O key.",
            "itemtype": "property",
            "name": "KEY_O",
            "final": 1,
            "type": "Number",
            "class": "Input",
            "module": "xeogl",
            "submodule": "input"
        },
        {
            "file": "src/input/input.js",
            "line": 966,
            "description": "Code for the P key.",
            "itemtype": "property",
            "name": "KEY_P",
            "final": 1,
            "type": "Number",
            "class": "Input",
            "module": "xeogl",
            "submodule": "input"
        },
        {
            "file": "src/input/input.js",
            "line": 974,
            "description": "Code for the Q key.",
            "itemtype": "property",
            "name": "KEY_Q",
            "final": 1,
            "type": "Number",
            "class": "Input",
            "module": "xeogl",
            "submodule": "input"
        },
        {
            "file": "src/input/input.js",
            "line": 982,
            "description": "Code for the R key.",
            "itemtype": "property",
            "name": "KEY_R",
            "final": 1,
            "type": "Number",
            "class": "Input",
            "module": "xeogl",
            "submodule": "input"
        },
        {
            "file": "src/input/input.js",
            "line": 990,
            "description": "Code for the S key.",
            "itemtype": "property",
            "name": "KEY_S",
            "final": 1,
            "type": "Number",
            "class": "Input",
            "module": "xeogl",
            "submodule": "input"
        },
        {
            "file": "src/input/input.js",
            "line": 998,
            "description": "Code for the T key.",
            "itemtype": "property",
            "name": "KEY_T",
            "final": 1,
            "type": "Number",
            "class": "Input",
            "module": "xeogl",
            "submodule": "input"
        },
        {
            "file": "src/input/input.js",
            "line": 1006,
            "description": "Code for the U key.",
            "itemtype": "property",
            "name": "KEY_U",
            "final": 1,
            "type": "Number",
            "class": "Input",
            "module": "xeogl",
            "submodule": "input"
        },
        {
            "file": "src/input/input.js",
            "line": 1014,
            "description": "Code for the V key.",
            "itemtype": "property",
            "name": "KEY_V",
            "final": 1,
            "type": "Number",
            "class": "Input",
            "module": "xeogl",
            "submodule": "input"
        },
        {
            "file": "src/input/input.js",
            "line": 1022,
            "description": "Code for the W key.",
            "itemtype": "property",
            "name": "KEY_W",
            "final": 1,
            "type": "Number",
            "class": "Input",
            "module": "xeogl",
            "submodule": "input"
        },
        {
            "file": "src/input/input.js",
            "line": 1030,
            "description": "Code for the X key.",
            "itemtype": "property",
            "name": "KEY_X",
            "final": 1,
            "type": "Number",
            "class": "Input",
            "module": "xeogl",
            "submodule": "input"
        },
        {
            "file": "src/input/input.js",
            "line": 1038,
            "description": "Code for the Y key.",
            "itemtype": "property",
            "name": "KEY_Y",
            "final": 1,
            "type": "Number",
            "class": "Input",
            "module": "xeogl",
            "submodule": "input"
        },
        {
            "file": "src/input/input.js",
            "line": 1046,
            "description": "Code for the Z key.",
            "itemtype": "property",
            "name": "KEY_Z",
            "final": 1,
            "type": "Number",
            "class": "Input",
            "module": "xeogl",
            "submodule": "input"
        },
        {
            "file": "src/input/input.js",
            "line": 1054,
            "description": "Code for the LEFT_WINDOW key.",
            "itemtype": "property",
            "name": "KEY_LEFT_WINDOW",
            "final": 1,
            "type": "Number",
            "class": "Input",
            "module": "xeogl",
            "submodule": "input"
        },
        {
            "file": "src/input/input.js",
            "line": 1062,
            "description": "Code for the RIGHT_WINDOW key.",
            "itemtype": "property",
            "name": "KEY_RIGHT_WINDOW",
            "final": 1,
            "type": "Number",
            "class": "Input",
            "module": "xeogl",
            "submodule": "input"
        },
        {
            "file": "src/input/input.js",
            "line": 1070,
            "description": "Code for the SELECT key.",
            "itemtype": "property",
            "name": "KEY_SELECT",
            "final": 1,
            "type": "Number",
            "class": "Input",
            "module": "xeogl",
            "submodule": "input"
        },
        {
            "file": "src/input/input.js",
            "line": 1078,
            "description": "Code for the number pad 0 key.",
            "itemtype": "property",
            "name": "KEY_NUMPAD_0",
            "final": 1,
            "type": "Number",
            "class": "Input",
            "module": "xeogl",
            "submodule": "input"
        },
        {
            "file": "src/input/input.js",
            "line": 1086,
            "description": "Code for the number pad 1 key.",
            "itemtype": "property",
            "name": "KEY_NUMPAD_1",
            "final": 1,
            "type": "Number",
            "class": "Input",
            "module": "xeogl",
            "submodule": "input"
        },
        {
            "file": "src/input/input.js",
            "line": 1094,
            "description": "Code for the number pad 2 key.",
            "itemtype": "property",
            "name": "KEY_NUMPAD 2",
            "final": 1,
            "type": "Number",
            "class": "Input",
            "module": "xeogl",
            "submodule": "input"
        },
        {
            "file": "src/input/input.js",
            "line": 1102,
            "description": "Code for the number pad 3 key.",
            "itemtype": "property",
            "name": "KEY_NUMPAD_3",
            "final": 1,
            "type": "Number",
            "class": "Input",
            "module": "xeogl",
            "submodule": "input"
        },
        {
            "file": "src/input/input.js",
            "line": 1110,
            "description": "Code for the number pad 4 key.",
            "itemtype": "property",
            "name": "KEY_NUMPAD_4",
            "final": 1,
            "type": "Number",
            "class": "Input",
            "module": "xeogl",
            "submodule": "input"
        },
        {
            "file": "src/input/input.js",
            "line": 1118,
            "description": "Code for the number pad 5 key.",
            "itemtype": "property",
            "name": "KEY_NUMPAD_5",
            "final": 1,
            "type": "Number",
            "class": "Input",
            "module": "xeogl",
            "submodule": "input"
        },
        {
            "file": "src/input/input.js",
            "line": 1126,
            "description": "Code for the number pad 6 key.",
            "itemtype": "property",
            "name": "KEY_NUMPAD_6",
            "final": 1,
            "type": "Number",
            "class": "Input",
            "module": "xeogl",
            "submodule": "input"
        },
        {
            "file": "src/input/input.js",
            "line": 1134,
            "description": "Code for the number pad 7 key.",
            "itemtype": "property",
            "name": "KEY_NUMPAD_7",
            "final": 1,
            "type": "Number",
            "class": "Input",
            "module": "xeogl",
            "submodule": "input"
        },
        {
            "file": "src/input/input.js",
            "line": 1142,
            "description": "Code for the number pad 8 key.",
            "itemtype": "property",
            "name": "KEY_NUMPAD_8",
            "final": 1,
            "type": "Number",
            "class": "Input",
            "module": "xeogl",
            "submodule": "input"
        },
        {
            "file": "src/input/input.js",
            "line": 1150,
            "description": "Code for the number pad 9 key.",
            "itemtype": "property",
            "name": "KEY_NUMPAD_9",
            "final": 1,
            "type": "Number",
            "class": "Input",
            "module": "xeogl",
            "submodule": "input"
        },
        {
            "file": "src/input/input.js",
            "line": 1158,
            "description": "Code for the MULTIPLY key.",
            "itemtype": "property",
            "name": "KEY_MULTIPLY",
            "final": 1,
            "type": "Number",
            "class": "Input",
            "module": "xeogl",
            "submodule": "input"
        },
        {
            "file": "src/input/input.js",
            "line": 1166,
            "description": "Code for the ADD key.",
            "itemtype": "property",
            "name": "KEY_ADD",
            "final": 1,
            "type": "Number",
            "class": "Input",
            "module": "xeogl",
            "submodule": "input"
        },
        {
            "file": "src/input/input.js",
            "line": 1174,
            "description": "Code for the SUBTRACT key.",
            "itemtype": "property",
            "name": "KEY_SUBTRACT",
            "final": 1,
            "type": "Number",
            "class": "Input",
            "module": "xeogl",
            "submodule": "input"
        },
        {
            "file": "src/input/input.js",
            "line": 1182,
            "description": "Code for the DECIMAL POINT key.",
            "itemtype": "property",
            "name": "KEY_DECIMAL_POINT",
            "final": 1,
            "type": "Number",
            "class": "Input",
            "module": "xeogl",
            "submodule": "input"
        },
        {
            "file": "src/input/input.js",
            "line": 1190,
            "description": "Code for the DIVIDE key.",
            "itemtype": "property",
            "name": "KEY_DIVIDE",
            "final": 1,
            "type": "Number",
            "class": "Input",
            "module": "xeogl",
            "submodule": "input"
        },
        {
            "file": "src/input/input.js",
            "line": 1198,
            "description": "Code for the F1 key.",
            "itemtype": "property",
            "name": "KEY_F1",
            "final": 1,
            "type": "Number",
            "class": "Input",
            "module": "xeogl",
            "submodule": "input"
        },
        {
            "file": "src/input/input.js",
            "line": 1206,
            "description": "Code for the F2 key.",
            "itemtype": "property",
            "name": "KEY_F2",
            "final": 1,
            "type": "Number",
            "class": "Input",
            "module": "xeogl",
            "submodule": "input"
        },
        {
            "file": "src/input/input.js",
            "line": 1214,
            "description": "Code for the F3 key.",
            "itemtype": "property",
            "name": "KEY_F3",
            "final": 1,
            "type": "Number",
            "class": "Input",
            "module": "xeogl",
            "submodule": "input"
        },
        {
            "file": "src/input/input.js",
            "line": 1222,
            "description": "Code for the F4 key.",
            "itemtype": "property",
            "name": "KEY_F4",
            "final": 1,
            "type": "Number",
            "class": "Input",
            "module": "xeogl",
            "submodule": "input"
        },
        {
            "file": "src/input/input.js",
            "line": 1230,
            "description": "Code for the F5 key.",
            "itemtype": "property",
            "name": "KEY_F5",
            "final": 1,
            "type": "Number",
            "class": "Input",
            "module": "xeogl",
            "submodule": "input"
        },
        {
            "file": "src/input/input.js",
            "line": 1238,
            "description": "Code for the F6 key.",
            "itemtype": "property",
            "name": "KEY_F6",
            "final": 1,
            "type": "Number",
            "class": "Input",
            "module": "xeogl",
            "submodule": "input"
        },
        {
            "file": "src/input/input.js",
            "line": 1246,
            "description": "Code for the F7 key.",
            "itemtype": "property",
            "name": "KEY_F7",
            "final": 1,
            "type": "Number",
            "class": "Input",
            "module": "xeogl",
            "submodule": "input"
        },
        {
            "file": "src/input/input.js",
            "line": 1254,
            "description": "Code for the F8 key.",
            "itemtype": "property",
            "name": "KEY_F8",
            "final": 1,
            "type": "Number",
            "class": "Input",
            "module": "xeogl",
            "submodule": "input"
        },
        {
            "file": "src/input/input.js",
            "line": 1262,
            "description": "Code for the F9 key.",
            "itemtype": "property",
            "name": "KEY_F9",
            "final": 1,
            "type": "Number",
            "class": "Input",
            "module": "xeogl",
            "submodule": "input"
        },
        {
            "file": "src/input/input.js",
            "line": 1270,
            "description": "Code for the F10 key.",
            "itemtype": "property",
            "name": "KEY_F10",
            "final": 1,
            "type": "Number",
            "class": "Input",
            "module": "xeogl",
            "submodule": "input"
        },
        {
            "file": "src/input/input.js",
            "line": 1278,
            "description": "Code for the F11 key.",
            "itemtype": "property",
            "name": "KEY_F11",
            "final": 1,
            "type": "Number",
            "class": "Input",
            "module": "xeogl",
            "submodule": "input"
        },
        {
            "file": "src/input/input.js",
            "line": 1286,
            "description": "Code for the F12 key.",
            "itemtype": "property",
            "name": "KEY_F12",
            "final": 1,
            "type": "Number",
            "class": "Input",
            "module": "xeogl",
            "submodule": "input"
        },
        {
            "file": "src/input/input.js",
            "line": 1294,
            "description": "Code for the NUM_LOCK key.",
            "itemtype": "property",
            "name": "KEY_NUM_LOCK",
            "final": 1,
            "type": "Number",
            "class": "Input",
            "module": "xeogl",
            "submodule": "input"
        },
        {
            "file": "src/input/input.js",
            "line": 1302,
            "description": "Code for the SCROLL_LOCK key.",
            "itemtype": "property",
            "name": "KEY_SCROLL_LOCK",
            "final": 1,
            "type": "Number",
            "class": "Input",
            "module": "xeogl",
            "submodule": "input"
        },
        {
            "file": "src/input/input.js",
            "line": 1310,
            "description": "Code for the SEMI_COLON key.",
            "itemtype": "property",
            "name": "KEY_SEMI_COLON",
            "final": 1,
            "type": "Number",
            "class": "Input",
            "module": "xeogl",
            "submodule": "input"
        },
        {
            "file": "src/input/input.js",
            "line": 1318,
            "description": "Code for the EQUAL_SIGN key.",
            "itemtype": "property",
            "name": "KEY_EQUAL_SIGN",
            "final": 1,
            "type": "Number",
            "class": "Input",
            "module": "xeogl",
            "submodule": "input"
        },
        {
            "file": "src/input/input.js",
            "line": 1326,
            "description": "Code for the COMMA key.",
            "itemtype": "property",
            "name": "KEY_COMMA",
            "final": 1,
            "type": "Number",
            "class": "Input",
            "module": "xeogl",
            "submodule": "input"
        },
        {
            "file": "src/input/input.js",
            "line": 1334,
            "description": "Code for the DASH key.",
            "itemtype": "property",
            "name": "KEY_DASH",
            "final": 1,
            "type": "Number",
            "class": "Input",
            "module": "xeogl",
            "submodule": "input"
        },
        {
            "file": "src/input/input.js",
            "line": 1342,
            "description": "Code for the PERIOD key.",
            "itemtype": "property",
            "name": "KEY_PERIOD",
            "final": 1,
            "type": "Number",
            "class": "Input",
            "module": "xeogl",
            "submodule": "input"
        },
        {
            "file": "src/input/input.js",
            "line": 1350,
            "description": "Code for the FORWARD_SLASH key.",
            "itemtype": "property",
            "name": "KEY_FORWARD_SLASH",
            "final": 1,
            "type": "Number",
            "class": "Input",
            "module": "xeogl",
            "submodule": "input"
        },
        {
            "file": "src/input/input.js",
            "line": 1358,
            "description": "Code for the GRAVE_ACCENT key.",
            "itemtype": "property",
            "name": "KEY_GRAVE_ACCENT",
            "final": 1,
            "type": "Number",
            "class": "Input",
            "module": "xeogl",
            "submodule": "input"
        },
        {
            "file": "src/input/input.js",
            "line": 1366,
            "description": "Code for the OPEN_BRACKET key.",
            "itemtype": "property",
            "name": "KEY_OPEN_BRACKET",
            "final": 1,
            "type": "Number",
            "class": "Input",
            "module": "xeogl",
            "submodule": "input"
        },
        {
            "file": "src/input/input.js",
            "line": 1374,
            "description": "Code for the BACK_SLASH key.",
            "itemtype": "property",
            "name": "KEY_BACK_SLASH",
            "final": 1,
            "type": "Number",
            "class": "Input",
            "module": "xeogl",
            "submodule": "input"
        },
        {
            "file": "src/input/input.js",
            "line": 1382,
            "description": "Code for the CLOSE_BRACKET key.",
            "itemtype": "property",
            "name": "KEY_CLOSE_BRACKET",
            "final": 1,
            "type": "Number",
            "class": "Input",
            "module": "xeogl",
            "submodule": "input"
        },
        {
            "file": "src/input/input.js",
            "line": 1390,
            "description": "Code for the SINGLE_QUOTE key.",
            "itemtype": "property",
            "name": "KEY_SINGLE_QUOTE",
            "final": 1,
            "type": "Number",
            "class": "Input",
            "module": "xeogl",
            "submodule": "input"
        },
        {
            "file": "src/input/input.js",
            "line": 1398,
            "description": "Code for the SPACE key.",
            "itemtype": "property",
            "name": "KEY_SPACE",
            "final": 1,
            "type": "Number",
            "class": "Input",
            "module": "xeogl",
            "submodule": "input"
        },
        {
            "file": "src/lighting/ambientLight.js",
            "line": 98,
            "description": "The color of this AmbientLight.\n\nFires an {{#crossLink \"AmbientLight/color:event\"}}{{/crossLink}} event on change.",
            "itemtype": "property",
            "name": "color",
            "default": "[0.7, 0.7, 0.8]",
            "type": "Float32Array",
            "class": "AmbientLight",
            "module": "xeogl",
            "submodule": "lighting"
        },
        {
            "file": "src/lighting/ambientLight.js",
            "line": 115,
            "description": "Fired whenever this AmbientLight's {{#crossLink \"AmbientLight/color:property\"}}{{/crossLink}} property changes.",
            "itemtype": "event",
            "name": "color",
            "params": [
                {
                    "name": "value",
                    "description": "The property's new value"
                }
            ],
            "class": "AmbientLight",
            "module": "xeogl",
            "submodule": "lighting"
        },
        {
            "file": "src/lighting/ambientLight.js",
            "line": 129,
            "description": "The intensity of this AmbientLight.\n\nFires a {{#crossLink \"AmbientLight/intensity:event\"}}{{/crossLink}} event on change.",
            "itemtype": "property",
            "name": "intensity",
            "default": "1.0",
            "type": "Number",
            "class": "AmbientLight",
            "module": "xeogl",
            "submodule": "lighting"
        },
        {
            "file": "src/lighting/ambientLight.js",
            "line": 146,
            "description": "Fired whenever this AmbientLight's  {{#crossLink \"AmbientLight/intensity:property\"}}{{/crossLink}} property changes.",
            "itemtype": "event",
            "name": "intensity",
            "params": [
                {
                    "name": "value",
                    "description": "The property's new value"
                }
            ],
            "class": "AmbientLight",
            "module": "xeogl",
            "submodule": "lighting"
        },
        {
            "file": "src/lighting/cubeTexture.js",
            "line": 114,
            "description": "Fired whenever this CubeTexture has loaded the\nimage files that its {{#crossLink \"CubeTexture/src:property\"}}{{/crossLink}} property currently points to.",
            "itemtype": "event",
            "name": "loaded",
            "params": [
                {
                    "name": "value",
                    "description": "The value of the {{#crossLink \"CubeTexture/src:property\"}}{{/crossLink}} property",
                    "type": "HTML Image"
                }
            ],
            "class": "CubeTexture",
            "module": "xeogl",
            "submodule": "lighting"
        },
        {
            "file": "src/lighting/cubeTexture.js",
            "line": 160,
            "description": "Array of paths to six image files to source this CubeTexture.\n\nFires a {{#crossLink \"CubeTexture/src:event\"}}{{/crossLink}} event on change.",
            "itemtype": "property",
            "name": "src",
            "default": "null",
            "type": "{Array of String}",
            "class": "CubeTexture",
            "module": "xeogl",
            "submodule": "lighting"
        },
        {
            "file": "src/lighting/cubeTexture.js",
            "line": 179,
            "description": "Fired whenever this CubeTexture's {{#crossLink \"CubeTexture/src:property\"}}{{/crossLink}} property changes.",
            "itemtype": "event",
            "name": "src",
            "params": [
                {
                    "name": "value",
                    "description": "The property's new value"
                }
            ],
            "type": "{Array of String}",
            "class": "CubeTexture",
            "module": "xeogl",
            "submodule": "lighting"
        },
        {
            "file": "src/lighting/cubeTexture.js",
            "line": 193,
            "description": "Flips this CubeTexture's source data along its vertical axis when true.\n\nFires a {{#crossLink \"CubeTexture/flipY:event\"}}{{/crossLink}} event on change.",
            "itemtype": "property",
            "name": "flipY",
            "default": "false",
            "type": "Boolean",
            "class": "CubeTexture",
            "module": "xeogl",
            "submodule": "lighting"
        },
        {
            "file": "src/lighting/cubeTexture.js",
            "line": 217,
            "description": "Fired whenever this CubeTexture's  {{#crossLink \"CubeTexture/flipY:property\"}}{{/crossLink}} property changes.",
            "itemtype": "event",
            "name": "flipY",
            "params": [
                {
                    "name": "value",
                    "description": "The property's new value",
                    "type": "String"
                }
            ],
            "class": "CubeTexture",
            "module": "xeogl",
            "submodule": "lighting"
        },
        {
            "file": "src/lighting/cubeTexture.js",
            "line": 230,
            "description": "The CubeTexture's encoding format.\n\nSupported values are:\n\n* \"linear\" (default)\n* \"sRGB\"\n* \"gamma\"",
            "itemtype": "property",
            "name": "encoding",
            "default": "\"linear\"",
            "type": "String",
            "class": "CubeTexture",
            "module": "xeogl",
            "submodule": "lighting"
        },
        {
            "file": "src/lighting/dirLight.js",
            "line": 155,
            "description": "The direction in which the light is shining.\n\nFires a {{#crossLink \"DirLight/dir:event\"}}{{/crossLink}} event on change.",
            "itemtype": "property",
            "name": "dir",
            "default": "[1.0, 1.0, 1.0]",
            "type": "Float32Array",
            "class": "DirLight",
            "module": "xeogl",
            "submodule": "lighting"
        },
        {
            "file": "src/lighting/dirLight.js",
            "line": 174,
            "description": "Fired whenever this DirLight's  {{#crossLink \"DirLight/dir:property\"}}{{/crossLink}} property changes.",
            "itemtype": "event",
            "name": "dir",
            "params": [
                {
                    "name": "value",
                    "description": "The property's new value"
                }
            ],
            "class": "DirLight",
            "module": "xeogl",
            "submodule": "lighting"
        },
        {
            "file": "src/lighting/dirLight.js",
            "line": 187,
            "description": "The color of this DirLight.\n\nFires a {{#crossLink \"DirLight/color:event\"}}{{/crossLink}} event on change.",
            "itemtype": "property",
            "name": "color",
            "default": "[0.7, 0.7, 0.8]",
            "type": "Float32Array",
            "class": "DirLight",
            "module": "xeogl",
            "submodule": "lighting"
        },
        {
            "file": "src/lighting/dirLight.js",
            "line": 204,
            "description": "Fired whenever this DirLight's  {{#crossLink \"DirLight/color:property\"}}{{/crossLink}} property changes.",
            "itemtype": "event",
            "name": "color",
            "params": [
                {
                    "name": "value",
                    "description": "The property's new value"
                }
            ],
            "class": "DirLight",
            "module": "xeogl",
            "submodule": "lighting"
        },
        {
            "file": "src/lighting/dirLight.js",
            "line": 217,
            "description": "The intensity of this DirLight.\n\nFires a {{#crossLink \"DirLight/intensity:event\"}}{{/crossLink}} event on change.",
            "itemtype": "property",
            "name": "intensity",
            "default": "1.0",
            "type": "Number",
            "class": "DirLight",
            "module": "xeogl",
            "submodule": "lighting"
        },
        {
            "file": "src/lighting/dirLight.js",
            "line": 236,
            "description": "Fired whenever this DirLight's  {{#crossLink \"DirLight/intensity:property\"}}{{/crossLink}} property changes.",
            "itemtype": "event",
            "name": "intensity",
            "params": [
                {
                    "name": "value",
                    "description": "The property's new value"
                }
            ],
            "class": "DirLight",
            "module": "xeogl",
            "submodule": "lighting"
        },
        {
            "file": "src/lighting/dirLight.js",
            "line": 249,
            "description": "Specifies which coordinate space this DirLight is in.\n\nSupported values are:\n\n\n* \"view\" - View space, aligned within the view volume as if fixed to the viewer's head\n* \"world\" - World space, fixed within the world, moving within the view volume with respect to camera\n\nFires a {{#crossLink \"DirLight/space:event\"}}{{/crossLink}} event on change.",
            "itemtype": "property",
            "name": "space",
            "default": "\"view\"",
            "type": "String",
            "class": "DirLight",
            "module": "xeogl",
            "submodule": "lighting"
        },
        {
            "file": "src/lighting/dirLight.js",
            "line": 272,
            "description": "Fired whenever this DirLight's {{#crossLink \"DirLight/space:property\"}}{{/crossLink}} property changes.",
            "itemtype": "event",
            "name": "space",
            "params": [
                {
                    "name": "value",
                    "description": "The property's new value"
                }
            ],
            "class": "DirLight",
            "module": "xeogl",
            "submodule": "lighting"
        },
        {
            "file": "src/lighting/dirLight.js",
            "line": 285,
            "description": "Flag which indicates if this DirLight casts a shadow.\n\nFires a {{#crossLink \"DirLight/shadow:event\"}}{{/crossLink}} event on change.",
            "itemtype": "property",
            "name": "shadow",
            "default": "false",
            "type": "Boolean",
            "class": "DirLight",
            "module": "xeogl",
            "submodule": "lighting"
        },
        {
            "file": "src/lighting/dirLight.js",
            "line": 310,
            "description": "Fired whenever this DirLight's {{#crossLink \"DirLight/shadow:property\"}}{{/crossLink}} property changes.",
            "itemtype": "event",
            "name": "shadow",
            "params": [
                {
                    "name": "value",
                    "description": "The property's new value"
                }
            ],
            "class": "DirLight",
            "module": "xeogl",
            "submodule": "lighting"
        },
        {
            "file": "src/lighting/lights.js",
            "line": 154,
            "description": "The light sources in this Lights.\n\nNote that when removing or inserting light sources, you must reassign this property to the modified array,\nso that this Lights able to detect that lights sources were actually added or removed. For example:\n\n````javascript\nvar lights = myLights.lights;\nlights.push(new xeogl.PointLight({...}));\nmyLights.lights = lights; // This way, the xeogl.Lights component is able to detect that the new light was added.\n````\n\nWe'll be able to relax this once JavaScript gets the (proper) ability to observe array updates.\n\nFires a {{#crossLink \"Lights/lights:event\"}}{{/crossLink}} event on change.",
            "itemtype": "property",
            "name": "lights",
            "default": "[]",
            "type": "{{Array of AmbientLight, PointLight, DirLight or SpotLight}}",
            "class": "Lights",
            "module": "xeogl",
            "submodule": "lighting"
        },
        {
            "file": "src/lighting/lights.js",
            "line": 261,
            "description": "Fired whenever this Lights's {{#crossLink \"Lights/lights:property\"}}{{/crossLink}} property changes.",
            "itemtype": "event",
            "name": "lights",
            "params": [
                {
                    "name": "value",
                    "description": "Number The property's new value"
                }
            ],
            "class": "Lights",
            "module": "xeogl",
            "submodule": "lighting"
        },
        {
            "file": "src/lighting/lights.js",
            "line": 275,
            "description": "A {{#crossLink \"CubeTexture\"}}{{/crossLink}} that defines the brightness of the\nsurfaces of attached {{#crossLink \"Entities\"}}{{/crossLink}}.\n\nMust be within the same {{#crossLink \"Scene\"}}{{/crossLink}} as this Lights.\n\nFires a {{#crossLink \"Lights/lightMap:event\"}}{{/crossLink}} event on change.",
            "itemtype": "property",
            "name": "lightMap",
            "default": "undefined",
            "type": "{CubeTexture}",
            "class": "Lights",
            "module": "xeogl",
            "submodule": "lighting"
        },
        {
            "file": "src/lighting/lights.js",
            "line": 291,
            "description": "Fired whenever this Lights's {{#crossLink \"Lights/lightMap:property\"}}{{/crossLink}} property changes.",
            "itemtype": "event",
            "name": "lightMap",
            "params": [
                {
                    "name": "value",
                    "description": "Number The property's new value"
                }
            ],
            "class": "Lights",
            "module": "xeogl",
            "submodule": "lighting"
        },
        {
            "file": "src/lighting/lights.js",
            "line": 305,
            "description": "A {{#crossLink \"CubeTexture\"}}{{/crossLink}} that defines a background image that is reflected in the\nsurfaces of attached {{#crossLink \"Entities\"}}{{/crossLink}}.\n\nMust be within the same {{#crossLink \"Scene\"}}{{/crossLink}} as this Lights.\n\nFires a {{#crossLink \"Lights/reflectionMap:event\"}}{{/crossLink}} event on change.",
            "itemtype": "property",
            "name": "reflectionMap",
            "default": "undefined",
            "type": "{CubeTexture}",
            "class": "Lights",
            "module": "xeogl",
            "submodule": "lighting"
        },
        {
            "file": "src/lighting/lights.js",
            "line": 321,
            "description": "Fired whenever this Lights's {{#crossLink \"Lights/reflectionMap:property\"}}{{/crossLink}} property changes.",
            "itemtype": "event",
            "name": "reflectionMap",
            "params": [
                {
                    "name": "value",
                    "description": "Number The property's new value"
                }
            ],
            "class": "Lights",
            "module": "xeogl",
            "submodule": "lighting"
        },
        {
            "file": "src/lighting/pointLight.js",
            "line": 168,
            "description": "The position of this PointLight.\n\nThis will be either World- or View-space, depending on the value of {{#crossLink \"PointLight/space:property\"}}{{/crossLink}}.\n\nFires a {{#crossLink \"PointLight/pos:event\"}}{{/crossLink}} event on change.",
            "itemtype": "property",
            "name": "pos",
            "default": "[1.0, 1.0, 1.0]",
            "type": "Array(Number)",
            "class": "PointLight",
            "module": "xeogl",
            "submodule": "lighting"
        },
        {
            "file": "src/lighting/pointLight.js",
            "line": 189,
            "description": "Fired whenever this PointLight's  {{#crossLink \"PointLight/pos:property\"}}{{/crossLink}} property changes.",
            "itemtype": "event",
            "name": "pos",
            "params": [
                {
                    "name": "value",
                    "description": "The property's new value"
                }
            ],
            "class": "PointLight",
            "module": "xeogl",
            "submodule": "lighting"
        },
        {
            "file": "src/lighting/pointLight.js",
            "line": 202,
            "description": "The color of this PointLight.\n\nFires a {{#crossLink \"PointLight/color:event\"}}{{/crossLink}} event on change.",
            "itemtype": "property",
            "name": "color",
            "default": "[0.7, 0.7, 0.8]",
            "type": "Float32Array",
            "class": "PointLight",
            "module": "xeogl",
            "submodule": "lighting"
        },
        {
            "file": "src/lighting/pointLight.js",
            "line": 219,
            "description": "Fired whenever this PointLight's  {{#crossLink \"PointLight/color:property\"}}{{/crossLink}} property changes.",
            "itemtype": "event",
            "name": "color",
            "params": [
                {
                    "name": "value",
                    "description": "The property's new value"
                }
            ],
            "class": "PointLight",
            "module": "xeogl",
            "submodule": "lighting"
        },
        {
            "file": "src/lighting/pointLight.js",
            "line": 232,
            "description": "The intensity of this PointLight.\n\nFires a {{#crossLink \"PointLight/intensity:event\"}}{{/crossLink}} event on change.",
            "itemtype": "property",
            "name": "intensity",
            "default": "1.0",
            "type": "Number",
            "class": "PointLight",
            "module": "xeogl",
            "submodule": "lighting"
        },
        {
            "file": "src/lighting/pointLight.js",
            "line": 251,
            "description": "Fired whenever this PointLight's  {{#crossLink \"PointLight/intensity:property\"}}{{/crossLink}} property changes.",
            "itemtype": "event",
            "name": "intensity",
            "params": [
                {
                    "name": "value",
                    "description": "The property's new value"
                }
            ],
            "class": "PointLight",
            "module": "xeogl",
            "submodule": "lighting"
        },
        {
            "file": "src/lighting/pointLight.js",
            "line": 264,
            "description": "The constant attenuation factor for this PointLight.\n\nFires a {{#crossLink \"PointLight/constantAttenuation:event\"}}{{/crossLink}} event on change.",
            "itemtype": "property",
            "name": "constantAttenuation",
            "default": "0",
            "type": "Number",
            "class": "PointLight",
            "module": "xeogl",
            "submodule": "lighting"
        },
        {
            "file": "src/lighting/pointLight.js",
            "line": 281,
            "description": "Fired whenever this PointLight's {{#crossLink \"PointLight/constantAttenuation:property\"}}{{/crossLink}} property changes.",
            "itemtype": "event",
            "name": "constantAttenuation",
            "params": [
                {
                    "name": "value",
                    "description": "The property's new value"
                }
            ],
            "class": "PointLight",
            "module": "xeogl",
            "submodule": "lighting"
        },
        {
            "file": "src/lighting/pointLight.js",
            "line": 295,
            "description": "The linear attenuation factor for this PointLight.\n\nFires a {{#crossLink \"PointLight/linearAttenuation:event\"}}{{/crossLink}} event on change.",
            "itemtype": "property",
            "name": "linearAttenuation",
            "default": "0",
            "type": "Number",
            "class": "PointLight",
            "module": "xeogl",
            "submodule": "lighting"
        },
        {
            "file": "src/lighting/pointLight.js",
            "line": 312,
            "description": "Fired whenever this PointLight's  {{#crossLink \"PointLight/linearAttenuation:property\"}}{{/crossLink}} property changes.",
            "itemtype": "event",
            "name": "linearAttenuation",
            "params": [
                {
                    "name": "value",
                    "description": "The property's new value"
                }
            ],
            "class": "PointLight",
            "module": "xeogl",
            "submodule": "lighting"
        },
        {
            "file": "src/lighting/pointLight.js",
            "line": 326,
            "description": "The quadratic attenuation factor for this Pointlight.\n\nFires a {{#crossLink \"PointLight/quadraticAttenuation:event\"}}{{/crossLink}} event on change.",
            "itemtype": "property",
            "name": "quadraticAttenuation",
            "default": "0",
            "type": "Number",
            "class": "PointLight",
            "module": "xeogl",
            "submodule": "lighting"
        },
        {
            "file": "src/lighting/pointLight.js",
            "line": 343,
            "description": "Fired whenever this PointLight's {{#crossLink \"PointLight/quadraticAttenuation:property\"}}{{/crossLink}} property changes.",
            "itemtype": "event",
            "name": "quadraticAttenuation",
            "params": [
                {
                    "name": "value",
                    "description": "The property's new value"
                }
            ],
            "class": "PointLight",
            "module": "xeogl",
            "submodule": "lighting"
        },
        {
            "file": "src/lighting/pointLight.js",
            "line": 357,
            "description": "Indicates which coordinate space this PointLight is in.\n\nSupported values are:\n\n\n* \"view\" - View space, aligned within the view volume as if fixed to the viewer's head\n* \"world\" - World space, fixed within the world, moving within the view volume with respect to camera\n\n\nFires a {{#crossLink \"PointLight/space:event\"}}{{/crossLink}} event on change.",
            "itemtype": "property",
            "name": "space",
            "default": "\"view\"",
            "type": "String",
            "class": "PointLight",
            "module": "xeogl",
            "submodule": "lighting"
        },
        {
            "file": "src/lighting/pointLight.js",
            "line": 381,
            "description": "Fired whenever this Pointlight's  {{#crossLink \"PointLight/space:property\"}}{{/crossLink}} property changes.",
            "itemtype": "event",
            "name": "space",
            "params": [
                {
                    "name": "value",
                    "description": "The property's new value"
                }
            ],
            "class": "PointLight",
            "module": "xeogl",
            "submodule": "lighting"
        },
        {
            "file": "src/lighting/pointLight.js",
            "line": 395,
            "description": "Flag which indicates if this PointLight casts a shadow.\n\nFires a {{#crossLink \"PointLight/shadow:event\"}}{{/crossLink}} event on change.",
            "itemtype": "property",
            "name": "shadow",
            "default": "false",
            "type": "Boolean",
            "class": "PointLight",
            "module": "xeogl",
            "submodule": "lighting"
        },
        {
            "file": "src/lighting/pointLight.js",
            "line": 420,
            "description": "Fired whenever this PointLight's {{#crossLink \"PointLight/shadow:property\"}}{{/crossLink}} property changes.",
            "itemtype": "event",
            "name": "shadow",
            "params": [
                {
                    "name": "value",
                    "description": "The property's new value"
                }
            ],
            "class": "PointLight",
            "module": "xeogl",
            "submodule": "lighting"
        },
        {
            "file": "src/lighting/shadow.js",
            "line": 85,
            "description": "The resolution of the texture map for this Shadow.\n\nThis will be either World- or View-space, depending on the value of {{#crossLink \"Shadow/space:property\"}}{{/crossLink}}.\n\nFires a {{#crossLink \"Shadow/resolution:event\"}}{{/crossLink}} event on change.",
            "itemtype": "property",
            "name": "resolution",
            "default": "[1000, 1000]",
            "type": "Uint16Array",
            "class": "Shadow",
            "module": "xeogl",
            "submodule": "lighting"
        },
        {
            "file": "src/lighting/shadow.js",
            "line": 104,
            "description": "Fired whenever this Shadow's  {{#crossLink \"Shadow/resolution:property\"}}{{/crossLink}} property changes.",
            "itemtype": "event",
            "name": "resolution",
            "params": [
                {
                    "name": "value",
                    "description": "The property's new value"
                }
            ],
            "class": "Shadow",
            "module": "xeogl",
            "submodule": "lighting"
        },
        {
            "file": "src/lighting/shadow.js",
            "line": 117,
            "description": "The intensity of this Shadow.\n\nFires a {{#crossLink \"Shadow/intensity:event\"}}{{/crossLink}} event on change.",
            "itemtype": "property",
            "name": "intensity",
            "default": "1.0",
            "type": "Number",
            "class": "Shadow",
            "module": "xeogl",
            "submodule": "lighting"
        },
        {
            "file": "src/lighting/shadow.js",
            "line": 136,
            "description": "Fired whenever this Shadow's  {{#crossLink \"Shadow/intensity:property\"}}{{/crossLink}} property changes.",
            "itemtype": "event",
            "name": "intensity",
            "params": [
                {
                    "name": "value",
                    "description": "The property's new value"
                }
            ],
            "class": "Shadow",
            "module": "xeogl",
            "submodule": "lighting"
        },
        {
            "file": "src/lighting/spotLight.js",
            "line": 170,
            "description": "The position of this SpotLight.\n\nThis will be either World- or View-space, depending on the value of {{#crossLink \"SpotLight/space:property\"}}{{/crossLink}}.\n\nFires a {{#crossLink \"SpotLight/pos:event\"}}{{/crossLink}} event on change.",
            "itemtype": "property",
            "name": "pos",
            "default": "[1.0, 1.0, 1.0]",
            "type": "Array(Number)",
            "class": "SpotLight",
            "module": "xeogl",
            "submodule": "lighting"
        },
        {
            "file": "src/lighting/spotLight.js",
            "line": 190,
            "description": "Fired whenever this SpotLight's  {{#crossLink \"SpotLight/pos:property\"}}{{/crossLink}} property changes.",
            "itemtype": "event",
            "name": "pos",
            "params": [
                {
                    "name": "value",
                    "description": "The property's new value"
                }
            ],
            "class": "SpotLight",
            "module": "xeogl",
            "submodule": "lighting"
        },
        {
            "file": "src/lighting/spotLight.js",
            "line": 203,
            "description": "The direction in which the light is shining.\n\nFires a {{#crossLink \"SpotLight/dir:event\"}}{{/crossLink}} event on change.",
            "itemtype": "property",
            "name": "dir",
            "default": "[1.0, 1.0, 1.0]",
            "type": "Float32Array",
            "class": "SpotLight",
            "module": "xeogl",
            "submodule": "lighting"
        },
        {
            "file": "src/lighting/spotLight.js",
            "line": 221,
            "description": "Fired whenever this SpotLight's  {{#crossLink \"SpotLight/dir:property\"}}{{/crossLink}} property changes.",
            "itemtype": "event",
            "name": "dir",
            "params": [
                {
                    "name": "value",
                    "description": "The property's new value"
                }
            ],
            "class": "SpotLight",
            "module": "xeogl",
            "submodule": "lighting"
        },
        {
            "file": "src/lighting/spotLight.js",
            "line": 234,
            "description": "The color of this SpotLight.\n\nFires a {{#crossLink \"SpotLight/color:event\"}}{{/crossLink}} event on change.",
            "itemtype": "property",
            "name": "color",
            "default": "[0.7, 0.7, 0.8]",
            "type": "Float32Array",
            "class": "SpotLight",
            "module": "xeogl",
            "submodule": "lighting"
        },
        {
            "file": "src/lighting/spotLight.js",
            "line": 251,
            "description": "Fired whenever this SpotLight's  {{#crossLink \"SpotLight/color:property\"}}{{/crossLink}} property changes.",
            "itemtype": "event",
            "name": "color",
            "params": [
                {
                    "name": "value",
                    "description": "The property's new value"
                }
            ],
            "class": "SpotLight",
            "module": "xeogl",
            "submodule": "lighting"
        },
        {
            "file": "src/lighting/spotLight.js",
            "line": 264,
            "description": "The intensity of this SpotLight.\n\nFires a {{#crossLink \"SpotLight/intensity:event\"}}{{/crossLink}} event on change.",
            "itemtype": "property",
            "name": "intensity",
            "default": "1.0",
            "type": "Number",
            "class": "SpotLight",
            "module": "xeogl",
            "submodule": "lighting"
        },
        {
            "file": "src/lighting/spotLight.js",
            "line": 283,
            "description": "Fired whenever this SpotLight's  {{#crossLink \"SpotLight/intensity:property\"}}{{/crossLink}} property changes.",
            "itemtype": "event",
            "name": "intensity",
            "params": [
                {
                    "name": "value",
                    "description": "The property's new value"
                }
            ],
            "class": "SpotLight",
            "module": "xeogl",
            "submodule": "lighting"
        },
        {
            "file": "src/lighting/spotLight.js",
            "line": 296,
            "description": "The constant attenuation factor for this SpotLight.\n\nFires a {{#crossLink \"SpotLight/constantAttenuation:event\"}}{{/crossLink}} event on change.",
            "itemtype": "property",
            "name": "constantAttenuation",
            "default": "0",
            "type": "Number",
            "class": "SpotLight",
            "module": "xeogl",
            "submodule": "lighting"
        },
        {
            "file": "src/lighting/spotLight.js",
            "line": 313,
            "description": "Fired whenever this SpotLight's {{#crossLink \"SpotLight/constantAttenuation:property\"}}{{/crossLink}} property changes.",
            "itemtype": "event",
            "name": "constantAttenuation",
            "params": [
                {
                    "name": "value",
                    "description": "The property's new value"
                }
            ],
            "class": "SpotLight",
            "module": "xeogl",
            "submodule": "lighting"
        },
        {
            "file": "src/lighting/spotLight.js",
            "line": 327,
            "description": "The linear attenuation factor for this SpotLight.\n\nFires a {{#crossLink \"SpotLight/linearAttenuation:event\"}}{{/crossLink}} event on change.",
            "itemtype": "property",
            "name": "linearAttenuation",
            "default": "0",
            "type": "Number",
            "class": "SpotLight",
            "module": "xeogl",
            "submodule": "lighting"
        },
        {
            "file": "src/lighting/spotLight.js",
            "line": 344,
            "description": "Fired whenever this SpotLight's  {{#crossLink \"SpotLight/linearAttenuation:property\"}}{{/crossLink}} property changes.",
            "itemtype": "event",
            "name": "linearAttenuation",
            "params": [
                {
                    "name": "value",
                    "description": "The property's new value"
                }
            ],
            "class": "SpotLight",
            "module": "xeogl",
            "submodule": "lighting"
        },
        {
            "file": "src/lighting/spotLight.js",
            "line": 358,
            "description": "The quadratic attenuation factor for this SpotLight.\n\nFires a {{#crossLink \"SpotLight/quadraticAttenuation:event\"}}{{/crossLink}} event on change.",
            "itemtype": "property",
            "name": "quadraticAttenuation",
            "default": "0",
            "type": "Number",
            "class": "SpotLight",
            "module": "xeogl",
            "submodule": "lighting"
        },
        {
            "file": "src/lighting/spotLight.js",
            "line": 375,
            "description": "Fired whenever this SpotLight's {{#crossLink \"SpotLight/quadraticAttenuation:property\"}}{{/crossLink}} property changes.",
            "itemtype": "event",
            "name": "quadraticAttenuation",
            "params": [
                {
                    "name": "value",
                    "description": "The property's new value"
                }
            ],
            "class": "SpotLight",
            "module": "xeogl",
            "submodule": "lighting"
        },
        {
            "file": "src/lighting/spotLight.js",
            "line": 389,
            "description": "Indicates which coordinate space this SpotLight is in.\n\nSupported values are:\n\n\n* \"view\" - View space, aligned within the view volume as if fixed to the viewer's head\n* \"world\" - World space, fixed within the world, moving within the view volume with respect to camera\n\n\nFires a {{#crossLink \"SpotLight/space:event\"}}{{/crossLink}} event on change.",
            "itemtype": "property",
            "name": "space",
            "default": "\"view\"",
            "type": "String",
            "class": "SpotLight",
            "module": "xeogl",
            "submodule": "lighting"
        },
        {
            "file": "src/lighting/spotLight.js",
            "line": 413,
            "description": "Fired whenever this SpotLight's  {{#crossLink \"SpotLight/space:property\"}}{{/crossLink}} property changes.",
            "itemtype": "event",
            "name": "space",
            "params": [
                {
                    "name": "value",
                    "description": "The property's new value"
                }
            ],
            "class": "SpotLight",
            "module": "xeogl",
            "submodule": "lighting"
        },
        {
            "file": "src/lighting/spotLight.js",
            "line": 427,
            "description": "Flag which indicates if this SpotLight casts a shadow.\n\nFires a {{#crossLink \"SpotLight/shadow:event\"}}{{/crossLink}} event on change.",
            "itemtype": "property",
            "name": "shadow",
            "default": "false",
            "type": "Boolean",
            "class": "SpotLight",
            "module": "xeogl",
            "submodule": "lighting"
        },
        {
            "file": "src/lighting/spotLight.js",
            "line": 452,
            "description": "Fired whenever this SpotLight's {{#crossLink \"SpotLight/shadow:property\"}}{{/crossLink}} property changes.",
            "itemtype": "event",
            "name": "shadow",
            "params": [
                {
                    "name": "value",
                    "description": "The property's new value"
                }
            ],
            "class": "SpotLight",
            "module": "xeogl",
            "submodule": "lighting"
        },
        {
            "file": "src/materials/emphasisMaterial.js",
            "line": 299,
            "description": "Indicates whether or not ghost edges are visible.",
            "itemtype": "property",
            "name": "edges",
            "default": "true",
            "type": "Boolean",
            "class": "EmphasisMaterial",
            "module": "xeogl",
            "submodule": "materials"
        },
        {
            "file": "src/materials/emphasisMaterial.js",
            "line": 322,
            "description": "RGB color of ghost edges.",
            "itemtype": "property",
            "name": "edgeColor",
            "default": "[0.2, 0.2, 0.2]",
            "type": "Float32Array",
            "class": "EmphasisMaterial",
            "module": "xeogl",
            "submodule": "materials"
        },
        {
            "file": "src/materials/emphasisMaterial.js",
            "line": 361,
            "description": "Transparency of ghost edges.\n\nA value of 0.0 indicates fully transparent, 1.0 is fully opaque.",
            "itemtype": "property",
            "name": "edgeAlpha",
            "default": "0.5",
            "type": "Number",
            "class": "EmphasisMaterial",
            "module": "xeogl",
            "submodule": "materials"
        },
        {
            "file": "src/materials/emphasisMaterial.js",
            "line": 390,
            "description": "Width of ghost edges, in pixels.",
            "itemtype": "property",
            "name": "edgeWidth",
            "default": "1.0",
            "type": "Number",
            "class": "EmphasisMaterial",
            "module": "xeogl",
            "submodule": "materials"
        },
        {
            "file": "src/materials/emphasisMaterial.js",
            "line": 411,
            "description": "Indicates whether or not ghost vertices are visible.",
            "itemtype": "property",
            "name": "vertices",
            "default": "false",
            "type": "Boolean",
            "class": "EmphasisMaterial",
            "module": "xeogl",
            "submodule": "materials"
        },
        {
            "file": "src/materials/emphasisMaterial.js",
            "line": 434,
            "description": "Color of ghost vertices.",
            "itemtype": "property",
            "name": "vertexColor",
            "default": "[0.4,0.4,0.4]",
            "type": "Float32Array",
            "class": "EmphasisMaterial",
            "module": "xeogl",
            "submodule": "materials"
        },
        {
            "file": "src/materials/emphasisMaterial.js",
            "line": 467,
            "description": "Transparency of ghost vertices.\n\nA value of 0.0 indicates fully transparent, 1.0 is fully opaque.",
            "itemtype": "property",
            "name": "vertexAlpha",
            "default": "0.7",
            "type": "Number",
            "class": "EmphasisMaterial",
            "module": "xeogl",
            "submodule": "materials"
        },
        {
            "file": "src/materials/emphasisMaterial.js",
            "line": 492,
            "description": "Pixel size of ghost vertices.",
            "itemtype": "property",
            "name": "vertexSize",
            "default": "4.0",
            "type": "Number",
            "class": "EmphasisMaterial",
            "module": "xeogl",
            "submodule": "materials"
        },
        {
            "file": "src/materials/emphasisMaterial.js",
            "line": 510,
            "description": "Indicates whether or not ghost surfaces are filled with color.",
            "itemtype": "property",
            "name": "fill",
            "default": "true",
            "type": "Boolean",
            "class": "EmphasisMaterial",
            "module": "xeogl",
            "submodule": "materials"
        },
        {
            "file": "src/materials/emphasisMaterial.js",
            "line": 533,
            "description": "RGB color of filled ghost faces.",
            "itemtype": "property",
            "name": "fillColor",
            "default": "[0.4, 0.4, 0.4]",
            "type": "Float32Array",
            "class": "EmphasisMaterial",
            "module": "xeogl",
            "submodule": "materials"
        },
        {
            "file": "src/materials/emphasisMaterial.js",
            "line": 572,
            "description": "Transparency of filled ghost faces.\n\nA value of 0.0 indicates fully transparent, 1.0 is fully opaque.",
            "itemtype": "property",
            "name": "fillAlpha",
            "default": "0.2",
            "type": "Number",
            "class": "EmphasisMaterial",
            "module": "xeogl",
            "submodule": "materials"
        },
        {
            "file": "src/materials/emphasisMaterial.js",
            "line": 602,
            "description": "Selects a preset EmphasisMaterial configuration.\n\nAvailable presets are:\n\n* \"default\" - grey wireframe with translucent fill, for light backgrounds.\n* \"defaultLightBG\" - grey wireframe with grey translucent fill, for light backgrounds.\n* \"defaultDarkBG\" - grey wireframe with grey translucent fill, for dark backgrounds.\n* \"vectorscope\" - green wireframe with glowing vertices and black translucent fill.\n* \"battlezone\" - green wireframe with black opaque fill, giving a solid hidden-lines-removed effect.\n* \"sepia\" - light red-grey wireframe with light sepia translucent fill - easy on the eyes.\n* \"gamegrid\" - light blue wireframe with dark blue translucent fill - reminiscent of Tron.\n* \"yellowHighlight\" - light yellow translucent fill - highlights while allowing underlying detail to show through.",
            "itemtype": "property",
            "name": "preset",
            "default": "\"default\"",
            "type": "String",
            "class": "EmphasisMaterial",
            "module": "xeogl",
            "submodule": "materials"
        },
        {
            "file": "src/materials/emphasisMaterial.js",
            "line": 662,
            "description": "Available EmphasisMaterial presets.",
            "itemtype": "property",
            "name": "presets",
            "type": "{Object}",
            "static": 1,
            "class": "EmphasisMaterial",
            "module": "xeogl",
            "submodule": "materials"
        },
        {
            "file": "src/materials/fresnel.js",
            "line": 88,
            "description": "This Fresnel's edge color.",
            "itemtype": "property",
            "name": "edgeColor",
            "default": "[0.0, 0.0, 0.0]",
            "type": "Float32Array",
            "class": "Fresnel",
            "module": "xeogl",
            "submodule": "materials"
        },
        {
            "file": "src/materials/fresnel.js",
            "line": 109,
            "description": "This Fresnel's center color.",
            "itemtype": "property",
            "name": "centerColor",
            "default": "[1.0, 1.0, 1.0]",
            "type": "Float32Array",
            "class": "Fresnel",
            "module": "xeogl",
            "submodule": "materials"
        },
        {
            "file": "src/materials/fresnel.js",
            "line": 130,
            "description": "Indicates this Fresnel's edge bias.",
            "itemtype": "property",
            "name": "edgeBias",
            "default": "0",
            "type": "Number",
            "class": "Fresnel",
            "module": "xeogl",
            "submodule": "materials"
        },
        {
            "file": "src/materials/fresnel.js",
            "line": 151,
            "description": "Indicates this Fresnel's center bias.",
            "itemtype": "property",
            "name": "centerBias",
            "default": "1",
            "type": "Number",
            "class": "Fresnel",
            "module": "xeogl",
            "submodule": "materials"
        },
        {
            "file": "src/materials/fresnel.js",
            "line": 172,
            "description": "Indicates this Fresnel's power.",
            "itemtype": "property",
            "name": "power",
            "default": "1",
            "type": "Number",
            "class": "Fresnel",
            "module": "xeogl",
            "submodule": "materials"
        },
        {
            "file": "src/materials/lambertMaterial.js",
            "line": 113,
            "description": "The LambertMaterial's ambient color.",
            "itemtype": "property",
            "name": "ambient",
            "default": "[0.3, 0.3, 0.3]",
            "type": "Float32Array",
            "class": "LambertMaterial",
            "module": "xeogl",
            "submodule": "materials"
        },
        {
            "file": "src/materials/lambertMaterial.js",
            "line": 152,
            "description": "The LambertMaterial's diffuse color.",
            "itemtype": "property",
            "name": "color",
            "default": "[1.0, 1.0, 1.0]",
            "type": "Float32Array",
            "class": "LambertMaterial",
            "module": "xeogl",
            "submodule": "materials"
        },
        {
            "file": "src/materials/lambertMaterial.js",
            "line": 191,
            "description": "The LambertMaterial's emissive color.",
            "itemtype": "property",
            "name": "emissive",
            "default": "[0.0, 0.0, 0.0]",
            "type": "Float32Array",
            "class": "LambertMaterial",
            "module": "xeogl",
            "submodule": "materials"
        },
        {
            "file": "src/materials/lambertMaterial.js",
            "line": 230,
            "description": "Factor in the range [0..1] indicating how transparent the LambertMaterial is.\n\nA value of 0.0 indicates fully transparent, 1.0 is fully opaque.",
            "itemtype": "property",
            "name": "alpha",
            "default": "1.0",
            "type": "Number",
            "class": "LambertMaterial",
            "module": "xeogl",
            "submodule": "materials"
        },
        {
            "file": "src/materials/lambertMaterial.js",
            "line": 260,
            "description": "The LambertMaterial's line width.",
            "itemtype": "property",
            "name": "lineWidth",
            "default": "1.0",
            "type": "Number",
            "class": "LambertMaterial",
            "module": "xeogl",
            "submodule": "materials"
        },
        {
            "file": "src/materials/lambertMaterial.js",
            "line": 281,
            "description": "The LambertMaterial's point size.",
            "itemtype": "property",
            "name": "pointSize",
            "default": "1.0",
            "type": "Number",
            "class": "LambertMaterial",
            "module": "xeogl",
            "submodule": "materials"
        },
        {
            "file": "src/materials/lambertMaterial.js",
            "line": 302,
            "description": "Whether backfaces are visible on attached {{#crossLink \"Entity\"}}Entities{{/crossLink}}.\n\nThe backfaces will belong to {{#crossLink \"Geometry\"}}{{/crossLink}} compoents that are also attached to\nthe {{#crossLink \"Entity\"}}Entities{{/crossLink}}.",
            "itemtype": "property",
            "name": "backfaces",
            "default": "false",
            "type": "Boolean",
            "class": "LambertMaterial",
            "module": "xeogl",
            "submodule": "materials"
        },
        {
            "file": "src/materials/lambertMaterial.js",
            "line": 332,
            "description": "Indicates the winding direction of front faces on attached {{#crossLink \"Entity\"}}Entities{{/crossLink}}.\n\nThe faces will belong to {{#crossLink \"Geometry\"}}{{/crossLink}} components that are also attached to\nthe {{#crossLink \"Entity\"}}Entities{{/crossLink}}.",
            "itemtype": "property",
            "name": "frontface",
            "default": "\"ccw\"",
            "type": "String",
            "class": "LambertMaterial",
            "module": "xeogl",
            "submodule": "materials"
        },
        {
            "file": "src/materials/metallicMaterial.js",
            "line": 400,
            "description": "RGB diffuse color of this MetallicMaterial.\n\nMultiplies by the RGB components of {{#crossLink \"MetallicMaterial/baseColorMap:property\"}}{{/crossLink}}.",
            "itemtype": "property",
            "name": "baseColor",
            "default": "[1.0, 1.0, 1.0]",
            "type": "Float32Array",
            "class": "MetallicMaterial",
            "module": "xeogl",
            "submodule": "materials"
        },
        {
            "file": "src/materials/metallicMaterial.js",
            "line": 441,
            "description": "RGB {{#crossLink \"Texture\"}}{{/crossLink}} containing the diffuse color of this MetallicMaterial, with optional *A* component for alpha.\n\nThe RGB components multiply by the {{#crossLink \"MetallicMaterial/baseColor:property\"}}{{/crossLink}} property,\nwhile the *A* component, if present, multiplies by the {{#crossLink \"MetallicMaterial/alpha:property\"}}{{/crossLink}} property.\n\nMust be within the same {{#crossLink \"Scene\"}}Scene{{/crossLink}} as this MetallicMaterial.",
            "itemtype": "property",
            "name": "baseColorMap",
            "default": "undefined",
            "type": "{Texture}",
            "class": "MetallicMaterial",
            "module": "xeogl",
            "submodule": "materials"
        },
        {
            "file": "src/materials/metallicMaterial.js",
            "line": 464,
            "description": "Factor in the range [0..1] indicating how metallic this MetallicMaterial is.\n\n1 is metal, 0 is non-metal.\n\nMultiplies by the *R* component of {{#crossLink \"MetallicMaterial/metallicMap:property\"}}{{/crossLink}}\nand the *A* component of {{#crossLink \"MetallicMaterial/metalRoughnessMap:property\"}}{{/crossLink}}.",
            "itemtype": "property",
            "name": "metallic",
            "default": "1.0",
            "type": "Number",
            "class": "MetallicMaterial",
            "module": "xeogl",
            "submodule": "materials"
        },
        {
            "file": "src/materials/metallicMaterial.js",
            "line": 496,
            "description": "RGB {{#crossLink \"Texture\"}}{{/crossLink}} containing this MetallicMaterial's metallic factor in its *R* component.\n\nThe *R* component multiplies by the {{#crossLink \"MetallicMaterial/metallic:property\"}}{{/crossLink}} property.\n\nMust be within the same {{#crossLink \"Scene\"}}Scene{{/crossLink}} as this MetallicMaterial.",
            "itemtype": "property",
            "name": "metallicMap",
            "default": "undefined",
            "type": "{Texture}",
            "class": "MetallicMaterial",
            "module": "xeogl",
            "submodule": "materials"
        },
        {
            "file": "src/materials/metallicMaterial.js",
            "line": 518,
            "description": "Factor in the range [0..1] indicating the roughness of this MetallicMaterial.\n\n0 is fully smooth, 1 is fully rough.\n\nMultiplies by the *R* component of {{#crossLink \"MetallicMaterial/roughnessMap:property\"}}{{/crossLink}}.",
            "itemtype": "property",
            "name": "roughness",
            "default": "1.0",
            "type": "Number",
            "class": "MetallicMaterial",
            "module": "xeogl",
            "submodule": "materials"
        },
        {
            "file": "src/materials/metallicMaterial.js",
            "line": 549,
            "description": "RGB {{#crossLink \"Texture\"}}{{/crossLink}} containing this MetallicMaterial's roughness factor in its *R* component.\n\nThe *R* component multiplies by the {{#crossLink \"MetallicMaterial/roughness:property\"}}{{/crossLink}} property.\n\nMust be within the same {{#crossLink \"Scene\"}}Scene{{/crossLink}} as this MetallicMaterial.",
            "itemtype": "property",
            "name": "roughnessMap",
            "default": "undefined",
            "type": "{Texture}",
            "class": "MetallicMaterial",
            "module": "xeogl",
            "submodule": "materials"
        },
        {
            "file": "src/materials/metallicMaterial.js",
            "line": 571,
            "description": "RGB {{#crossLink \"Texture\"}}{{/crossLink}} containing this MetallicMaterial's metalness in its *R* component and roughness in its *G* component.\n\nIts *B* component multiplies by the {{#crossLink \"MetallicMaterial/metallic:property\"}}{{/crossLink}} property, while\nits *G* component multiplies by the {{#crossLink \"MetallicMaterial/roughness:property\"}}{{/crossLink}} property.\n\nMust be within the same {{#crossLink \"Scene\"}}Scene{{/crossLink}} as this MetallicMaterial.",
            "itemtype": "property",
            "name": "metallicRoughnessMap",
            "default": "undefined",
            "type": "{Texture}",
            "class": "MetallicMaterial",
            "module": "xeogl",
            "submodule": "materials"
        },
        {
            "file": "src/materials/metallicMaterial.js",
            "line": 594,
            "description": "Factor in the range [0..1] indicating specular Fresnel value.",
            "itemtype": "property",
            "name": "specularF0",
            "default": "0.0",
            "type": "Number",
            "class": "MetallicMaterial",
            "module": "xeogl",
            "submodule": "materials"
        },
        {
            "file": "src/materials/metallicMaterial.js",
            "line": 621,
            "description": "RGB emissive color of this MetallicMaterial.\n\nMultiplies by {{#crossLink \"MetallicMaterial/emissiveMap:property\"}}{{/crossLink}}.",
            "itemtype": "property",
            "name": "emissive",
            "default": "[0.0, 0.0, 0.0]",
            "type": "Float32Array",
            "class": "MetallicMaterial",
            "module": "xeogl",
            "submodule": "materials"
        },
        {
            "file": "src/materials/metallicMaterial.js",
            "line": 661,
            "description": "RGB {{#crossLink \"Texture\"}}{{/crossLink}} containing the emissive color of this MetallicMaterial.\n\nMultiplies by the {{#crossLink \"MetallicMaterial/emissive:property\"}}{{/crossLink}} property.\n\nMust be within the same {{#crossLink \"Scene\"}}Scene{{/crossLink}} as this MetallicMaterial.",
            "itemtype": "property",
            "name": "emissiveMap",
            "default": "undefined",
            "type": "{Texture}",
            "class": "MetallicMaterial",
            "module": "xeogl",
            "submodule": "materials"
        },
        {
            "file": "src/materials/metallicMaterial.js",
            "line": 676,
            "description": "Fired whenever this MetallicMaterial's {{#crossLink \"MetallicMaterial/emissiveMap:property\"}}{{/crossLink}} property changes.",
            "itemtype": "event",
            "name": "emissiveMap",
            "params": [
                {
                    "name": "value",
                    "description": "Number The property's new value"
                }
            ],
            "class": "MetallicMaterial",
            "module": "xeogl",
            "submodule": "materials"
        },
        {
            "file": "src/materials/metallicMaterial.js",
            "line": 690,
            "description": "RGB ambient occlusion {{#crossLink \"Texture\"}}{{/crossLink}} attached to this MetallicMaterial.\n\nWithin objectRenderers, multiplies by the specular and diffuse light reflected by surfaces.\n\nMust be within the same {{#crossLink \"Scene\"}}Scene{{/crossLink}} as this MetallicMaterial.",
            "itemtype": "property",
            "name": "occlusionMap",
            "default": "undefined",
            "type": "{Texture}",
            "class": "MetallicMaterial",
            "module": "xeogl",
            "submodule": "materials"
        },
        {
            "file": "src/materials/metallicMaterial.js",
            "line": 705,
            "description": "Fired whenever this MetallicMaterial's {{#crossLink \"MetallicMaterial/occlusionMap:property\"}}{{/crossLink}} property changes.",
            "itemtype": "event",
            "name": "occlusionMap",
            "params": [
                {
                    "name": "value",
                    "description": "Number The property's new value"
                }
            ],
            "class": "MetallicMaterial",
            "module": "xeogl",
            "submodule": "materials"
        },
        {
            "file": "src/materials/metallicMaterial.js",
            "line": 719,
            "description": "Factor in the range [0..1] indicating the alpha value.\n\nMultiplies by the *R* component of {{#crossLink \"MetallicMaterial/alphaMap:property\"}}{{/crossLink}} and\nthe *A* component, if present, of {{#crossLink \"MetallicMaterial/baseColorMap:property\"}}{{/crossLink}}.\n\nThe value of {{#crossLink \"MetallicMaterial/alphaMode:property\"}}{{/crossLink}} indicates how alpha is\ninterpreted when rendering.",
            "itemtype": "property",
            "name": "alpha",
            "default": "1.0",
            "type": "Number",
            "class": "MetallicMaterial",
            "module": "xeogl",
            "submodule": "materials"
        },
        {
            "file": "src/materials/metallicMaterial.js",
            "line": 752,
            "description": "RGB {{#crossLink \"Texture\"}}{{/crossLink}} containing this MetallicMaterial's alpha in its *R* component.\n\nThe *R* component multiplies by the {{#crossLink \"MetallicMaterial/alpha:property\"}}{{/crossLink}} property.\n\nMust be within the same {{#crossLink \"Scene\"}}Scene{{/crossLink}} as this MetallicMaterial.",
            "itemtype": "property",
            "name": "alphaMap",
            "default": "undefined",
            "type": "{Texture}",
            "class": "MetallicMaterial",
            "module": "xeogl",
            "submodule": "materials"
        },
        {
            "file": "src/materials/metallicMaterial.js",
            "line": 767,
            "description": "Fired whenever this MetallicMaterial's {{#crossLink \"MetallicMaterial/alphaMap:property\"}}{{/crossLink}} property changes.",
            "itemtype": "event",
            "name": "alphaMap",
            "params": [
                {
                    "name": "value",
                    "description": "Number The property's new value"
                }
            ],
            "class": "MetallicMaterial",
            "module": "xeogl",
            "submodule": "materials"
        },
        {
            "file": "src/materials/metallicMaterial.js",
            "line": 781,
            "description": "RGB tangent-space normal map {{#crossLink \"Texture\"}}{{/crossLink}}.\n\nMust be within the same {{#crossLink \"Scene\"}}Scene{{/crossLink}} as this MetallicMaterial.",
            "itemtype": "property",
            "name": "normalMap",
            "default": "undefined",
            "type": "{Texture}",
            "class": "MetallicMaterial",
            "module": "xeogl",
            "submodule": "materials"
        },
        {
            "file": "src/materials/metallicMaterial.js",
            "line": 794,
            "description": "Fired whenever this MetallicMaterial's {{#crossLink \"MetallicMaterial/normalMap:property\"}}{{/crossLink}} property changes.",
            "itemtype": "event",
            "name": "normalMap",
            "params": [
                {
                    "name": "value",
                    "description": "Number The property's new value"
                }
            ],
            "class": "MetallicMaterial",
            "module": "xeogl",
            "submodule": "materials"
        },
        {
            "file": "src/materials/metallicMaterial.js",
            "line": 808,
            "description": "The alpha rendering mode.\n\nThis specifies how alpha is interpreted. Alpha is the combined result of the\n{{#crossLink \"MetallicMaterial/alpha:property\"}}{{/crossLink}} and\n{{#crossLink \"MetallicMaterial/alphaMap:property\"}}{{/crossLink}} properties.\n\n* \"opaque\" - The alpha value is ignored and the rendered output is fully opaque.\n* \"mask\" - The rendered output is either fully opaque or fully transparent depending on the alpha and {{#crossLink \"MetallicMaterial/alphaCutoff:property\"}}{{/crossLink}}.\n* \"blend\" - The alpha value is used to composite the source and destination areas. The rendered output is combined with the background using the normal painting operation (i.e. the Porter and Duff over operator).",
            "itemtype": "property",
            "name": "alphaMode",
            "default": "\"opaque\"",
            "type": "{String}",
            "class": "MetallicMaterial",
            "module": "xeogl",
            "submodule": "materials"
        },
        {
            "file": "src/materials/metallicMaterial.js",
            "line": 852,
            "description": "The alpha cutoff value.\n\nSpecifies the cutoff threshold when {{#crossLink \"MetallicMaterial/alphaMode:property\"}}{{/crossLink}}\nequals \"mask\". If the alpha is greater than or equal to this value then it is rendered as fully\nopaque, otherwise, it is rendered as fully transparent. A value greater than 1.0 will render the entire\nmaterial as fully transparent. This value is ignored for other modes.\n\nAlpha is the combined result of the\n{{#crossLink \"MetallicMaterial/alpha:property\"}}{{/crossLink}} and\n{{#crossLink \"MetallicMaterial/alphaMap:property\"}}{{/crossLink}} properties.",
            "itemtype": "property",
            "name": "alphaCutoff",
            "default": "0.5",
            "type": "{Number}",
            "class": "MetallicMaterial",
            "module": "xeogl",
            "submodule": "materials"
        },
        {
            "file": "src/materials/metallicMaterial.js",
            "line": 886,
            "description": "Whether backfaces are visible on attached {{#crossLink \"Entity\"}}Entities{{/crossLink}}.\n\nThe backfaces will belong to {{#crossLink \"Geometry\"}}{{/crossLink}} compoents that are also attached to\nthe {{#crossLink \"Entity\"}}Entities{{/crossLink}}.",
            "itemtype": "property",
            "name": "backfaces",
            "default": "false",
            "type": "Boolean",
            "class": "MetallicMaterial",
            "module": "xeogl",
            "submodule": "materials"
        },
        {
            "file": "src/materials/metallicMaterial.js",
            "line": 916,
            "description": "Indicates the winding direction of front faces on attached {{#crossLink \"Entity\"}}Entities{{/crossLink}}.\n\nThe faces will belong to {{#crossLink \"Geometry\"}}{{/crossLink}} components that are also attached to\nthe {{#crossLink \"Entity\"}}Entities{{/crossLink}}.",
            "itemtype": "property",
            "name": "frontface",
            "default": "\"ccw\"",
            "type": "String",
            "class": "MetallicMaterial",
            "module": "xeogl",
            "submodule": "materials"
        },
        {
            "file": "src/materials/metallicMaterial.js",
            "line": 946,
            "description": "The MetallicMaterial's line width.",
            "itemtype": "property",
            "name": "lineWidth",
            "default": "1.0",
            "type": "Number",
            "class": "MetallicMaterial",
            "module": "xeogl",
            "submodule": "materials"
        },
        {
            "file": "src/materials/metallicMaterial.js",
            "line": 967,
            "description": "The MetallicMaterial's point size.",
            "itemtype": "property",
            "name": "pointSize",
            "default": "1.0",
            "type": "Number",
            "class": "MetallicMaterial",
            "module": "xeogl",
            "submodule": "materials"
        },
        {
            "file": "src/materials/outlineMaterial.js",
            "line": 49,
            "description": "RGB outline color.",
            "itemtype": "property",
            "name": "color",
            "default": "[1.0, 0.2, 0.2]",
            "type": "Float32Array",
            "class": "OutlineMaterial",
            "module": "xeogl",
            "submodule": "materials"
        },
        {
            "file": "src/materials/outlineMaterial.js",
            "line": 88,
            "description": "Outline transparency.\n\n A value of 0.0 indicates fully transparent, 1.0 is fully opaque.",
            "itemtype": "property",
            "name": "alpha",
            "default": "1.0",
            "type": "Number",
            "class": "OutlineMaterial",
            "module": "xeogl",
            "submodule": "materials"
        },
        {
            "file": "src/materials/outlineMaterial.js",
            "line": 117,
            "description": "Outline width in pixels.",
            "itemtype": "property",
            "name": "width",
            "default": "4.0",
            "type": "Number",
            "class": "OutlineMaterial",
            "module": "xeogl",
            "submodule": "materials"
        },
        {
            "file": "src/materials/phongMaterial.js",
            "line": 283,
            "description": "The PhongMaterial's ambient color.",
            "itemtype": "property",
            "name": "ambient",
            "default": "[0.3, 0.3, 0.3]",
            "type": "Float32Array",
            "class": "PhongMaterial",
            "module": "xeogl",
            "submodule": "materials"
        },
        {
            "file": "src/materials/phongMaterial.js",
            "line": 322,
            "description": "The PhongMaterial's diffuse color.\n\nMultiplies by {{#crossLink \"PhongMaterial/diffuseMap:property\"}}{{/crossLink}}.",
            "itemtype": "property",
            "name": "diffuse",
            "default": "[1.0, 1.0, 1.0]",
            "type": "Float32Array",
            "class": "PhongMaterial",
            "module": "xeogl",
            "submodule": "materials"
        },
        {
            "file": "src/materials/phongMaterial.js",
            "line": 363,
            "description": "The material's specular color.\n\nMultiplies by {{#crossLink \"PhongMaterial/specularMap:property\"}}{{/crossLink}}.",
            "itemtype": "property",
            "name": "specular",
            "default": "[1.0, 1.0, 1.0]",
            "type": "Float32Array",
            "class": "PhongMaterial",
            "module": "xeogl",
            "submodule": "materials"
        },
        {
            "file": "src/materials/phongMaterial.js",
            "line": 404,
            "description": "The PhongMaterial's emissive color.\n\nMultiplies by {{#crossLink \"PhongMaterial/emissiveMap:property\"}}{{/crossLink}}.",
            "itemtype": "property",
            "name": "emissive",
            "default": "[0.0, 0.0, 0.0]",
            "type": "Float32Array",
            "class": "PhongMaterial",
            "module": "xeogl",
            "submodule": "materials"
        },
        {
            "file": "src/materials/phongMaterial.js",
            "line": 445,
            "description": "Factor in the range [0..1] indicating how transparent the PhongMaterial is.\n\nA value of 0.0 indicates fully transparent, 1.0 is fully opaque.\n\nMultiplies by {{#crossLink \"PhongMaterial/alphaMap:property\"}}{{/crossLink}}.",
            "itemtype": "property",
            "name": "alpha",
            "default": "1.0",
            "type": "Number",
            "class": "PhongMaterial",
            "module": "xeogl",
            "submodule": "materials"
        },
        {
            "file": "src/materials/phongMaterial.js",
            "line": 476,
            "description": "A factor in range [0..128] that determines the size and sharpness of the specular highlights create by this PhongMaterial.\n\nLarger values produce smaller, sharper highlights. A value of 0.0 gives very large highlights that are almost never\ndesirable. Try values close to 10 for a larger, fuzzier highlight and values of 100 or more for a small, sharp\nhighlight.",
            "itemtype": "property",
            "name": "shininess",
            "default": "80.0",
            "type": "Number",
            "class": "PhongMaterial",
            "module": "xeogl",
            "submodule": "materials"
        },
        {
            "file": "src/materials/phongMaterial.js",
            "line": 501,
            "description": "The PhongMaterial's line width.",
            "itemtype": "property",
            "name": "lineWidth",
            "default": "1.0",
            "type": "Number",
            "class": "PhongMaterial",
            "module": "xeogl",
            "submodule": "materials"
        },
        {
            "file": "src/materials/phongMaterial.js",
            "line": 522,
            "description": "The PhongMaterial's point size.",
            "itemtype": "property",
            "name": "pointSize",
            "default": "1.0",
            "type": "Number",
            "class": "PhongMaterial",
            "module": "xeogl",
            "submodule": "materials"
        },
        {
            "file": "src/materials/phongMaterial.js",
            "line": 543,
            "description": "Scalar in range 0-1 that controls how much {{#crossLink \"CubeMap\"}}CubeMap{{/crossLink}} is reflected by this PhongMaterial.\n\nThe surface will be non-reflective when this is 0, and completely mirror-like when it is 1.0.\n\nMultiplies by {{#crossLink \"PhongMaterial/reflectivityMap:property\"}}{{/crossLink}}.",
            "itemtype": "property",
            "name": "reflectivity",
            "default": "1.0",
            "type": "Number",
            "class": "PhongMaterial",
            "module": "xeogl",
            "submodule": "materials"
        },
        {
            "file": "src/materials/phongMaterial.js",
            "line": 568,
            "description": "A normal {{#crossLink \"Texture\"}}{{/crossLink}} attached to this PhongMaterial.\n\nMust be within the same {{#crossLink \"Scene\"}}Scene{{/crossLink}} as this PhongMaterial.",
            "itemtype": "property",
            "name": "normalMap",
            "default": "undefined",
            "type": "{Texture}",
            "class": "PhongMaterial",
            "module": "xeogl",
            "submodule": "materials"
        },
        {
            "file": "src/materials/phongMaterial.js",
            "line": 581,
            "description": "Fired whenever this PhongMaterial's {{#crossLink \"PhongMaterial/normalMap:property\"}}{{/crossLink}} property changes.",
            "itemtype": "event",
            "name": "normalMap",
            "params": [
                {
                    "name": "value",
                    "description": "Number The property's new value"
                }
            ],
            "class": "PhongMaterial",
            "module": "xeogl",
            "submodule": "materials"
        },
        {
            "file": "src/materials/phongMaterial.js",
            "line": 595,
            "description": "An ambient {{#crossLink \"Texture\"}}{{/crossLink}} attached to this PhongMaterial.\n\nThis property multiplies by {{#crossLink \"PhongMaterial/ambient:property\"}}{{/crossLink}} property.\n\nMust be within the same {{#crossLink \"Scene\"}}Scene{{/crossLink}} as this PhongMaterial.",
            "itemtype": "property",
            "name": "ambientMap",
            "default": "undefined",
            "type": "{Texture}",
            "class": "PhongMaterial",
            "module": "xeogl",
            "submodule": "materials"
        },
        {
            "file": "src/materials/phongMaterial.js",
            "line": 610,
            "description": "Fired whenever this PhongMaterial's {{#crossLink \"PhongMaterial/ambientMap:property\"}}{{/crossLink}} property changes.",
            "itemtype": "event",
            "name": "ambientMap",
            "params": [
                {
                    "name": "value",
                    "description": "Number The property's new value"
                }
            ],
            "class": "PhongMaterial",
            "module": "xeogl",
            "submodule": "materials"
        },
        {
            "file": "src/materials/phongMaterial.js",
            "line": 624,
            "description": "A diffuse {{#crossLink \"Texture\"}}{{/crossLink}} attached to this PhongMaterial.\n\nThis property multiplies by {{#crossLink \"PhongMaterial/diffuse:property\"}}{{/crossLink}} when not null or undefined.\n\nMust be within the same {{#crossLink \"Scene\"}}Scene{{/crossLink}} as this PhongMaterial.",
            "itemtype": "property",
            "name": "diffuseMap",
            "default": "undefined",
            "type": "{Texture}",
            "class": "PhongMaterial",
            "module": "xeogl",
            "submodule": "materials"
        },
        {
            "file": "src/materials/phongMaterial.js",
            "line": 639,
            "description": "Fired whenever this PhongMaterial's {{#crossLink \"PhongMaterial/diffuseMap:property\"}}{{/crossLink}} property changes.",
            "itemtype": "event",
            "name": "diffuseMap",
            "params": [
                {
                    "name": "value",
                    "description": "Number The property's new value"
                }
            ],
            "class": "PhongMaterial",
            "module": "xeogl",
            "submodule": "materials"
        },
        {
            "file": "src/materials/phongMaterial.js",
            "line": 653,
            "description": "A specular {{#crossLink \"Texture\"}}{{/crossLink}} attached to this PhongMaterial.\n\nThis property multiplies by {{#crossLink \"PhongMaterial/specular:property\"}}{{/crossLink}} when not null or undefined.\n\nMust be within the same {{#crossLink \"Scene\"}}Scene{{/crossLink}} as this PhongMaterial.",
            "itemtype": "property",
            "name": "specularMap",
            "default": "undefined",
            "type": "{Texture}",
            "class": "PhongMaterial",
            "module": "xeogl",
            "submodule": "materials"
        },
        {
            "file": "src/materials/phongMaterial.js",
            "line": 668,
            "description": "Fired whenever this PhongMaterial's {{#crossLink \"PhongMaterial/specularMap:property\"}}{{/crossLink}} property changes.",
            "itemtype": "event",
            "name": "specularMap",
            "params": [
                {
                    "name": "value",
                    "description": "Number The property's new value"
                }
            ],
            "class": "PhongMaterial",
            "module": "xeogl",
            "submodule": "materials"
        },
        {
            "file": "src/materials/phongMaterial.js",
            "line": 682,
            "description": "An emissive {{#crossLink \"Texture\"}}{{/crossLink}} attached to this PhongMaterial.\n\nThis property multiplies by {{#crossLink \"PhongMaterial/emissive:property\"}}{{/crossLink}} when not null or undefined.\n\nMust be within the same {{#crossLink \"Scene\"}}Scene{{/crossLink}} as this PhongMaterial.",
            "itemtype": "property",
            "name": "emissiveMap",
            "default": "undefined",
            "type": "{Texture}",
            "class": "PhongMaterial",
            "module": "xeogl",
            "submodule": "materials"
        },
        {
            "file": "src/materials/phongMaterial.js",
            "line": 697,
            "description": "Fired whenever this PhongMaterial's {{#crossLink \"PhongMaterial/emissiveMap:property\"}}{{/crossLink}} property changes.",
            "itemtype": "event",
            "name": "emissiveMap",
            "params": [
                {
                    "name": "value",
                    "description": "Number The property's new value"
                }
            ],
            "class": "PhongMaterial",
            "module": "xeogl",
            "submodule": "materials"
        },
        {
            "file": "src/materials/phongMaterial.js",
            "line": 711,
            "description": "An alpha {{#crossLink \"Texture\"}}{{/crossLink}} attached to this PhongMaterial.\n\nThis property multiplies by {{#crossLink \"PhongMaterial/alpha:property\"}}{{/crossLink}} when not null or undefined.\n\nMust be within the same {{#crossLink \"Scene\"}}Scene{{/crossLink}} as this PhongMaterial.",
            "itemtype": "property",
            "name": "alphaMap",
            "default": "undefined",
            "type": "{Texture}",
            "class": "PhongMaterial",
            "module": "xeogl",
            "submodule": "materials"
        },
        {
            "file": "src/materials/phongMaterial.js",
            "line": 726,
            "description": "Fired whenever this PhongMaterial's {{#crossLink \"PhongMaterial/alphaMap:property\"}}{{/crossLink}} property changes.",
            "itemtype": "event",
            "name": "alphaMap",
            "params": [
                {
                    "name": "value",
                    "description": "Number The property's new value"
                }
            ],
            "class": "PhongMaterial",
            "module": "xeogl",
            "submodule": "materials"
        },
        {
            "file": "src/materials/phongMaterial.js",
            "line": 740,
            "description": "A reflectivity {{#crossLink \"Texture\"}}{{/crossLink}} attached to this PhongMaterial.\n\nThis property multiplies by {{#crossLink \"PhongMaterial/reflectivity:property\"}}{{/crossLink}} when not null or undefined.\n\nMust be within the same {{#crossLink \"Scene\"}}Scene{{/crossLink}} as this PhongMaterial.",
            "itemtype": "property",
            "name": "reflectivityMap",
            "default": "undefined",
            "type": "{Texture}",
            "class": "PhongMaterial",
            "module": "xeogl",
            "submodule": "materials"
        },
        {
            "file": "src/materials/phongMaterial.js",
            "line": 755,
            "description": "Fired whenever this PhongMaterial's {{#crossLink \"PhongMaterial/reflectivityMap:property\"}}{{/crossLink}} property changes.",
            "itemtype": "event",
            "name": "reflectivityMap",
            "params": [
                {
                    "name": "value",
                    "description": "Number The property's new value"
                }
            ],
            "class": "PhongMaterial",
            "module": "xeogl",
            "submodule": "materials"
        },
        {
            "file": "src/materials/phongMaterial.js",
            "line": 769,
            "description": "A reflection {{#crossLink \"CubeMap\"}}{{/crossLink}} attached to this PhongMaterial.\n\nMust be within the same {{#crossLink \"Scene\"}}Scene{{/crossLink}} as this PhongMaterial.",
            "itemtype": "property",
            "name": "reflection",
            "default": "undefined",
            "type": "{Reflect}",
            "class": "PhongMaterial",
            "module": "xeogl",
            "submodule": "materials"
        },
        {
            "file": "src/materials/phongMaterial.js",
            "line": 782,
            "description": "Fired whenever this PhongMaterial's {{#crossLink \"PhongMaterial/reflectivityMap:property\"}}{{/crossLink}} property changes.",
            "itemtype": "event",
            "name": "reflection",
            "params": [
                {
                    "name": "value",
                    "description": "The property's new value",
                    "type": "Reflect"
                }
            ],
            "class": "PhongMaterial",
            "module": "xeogl",
            "submodule": "materials"
        },
        {
            "file": "src/materials/phongMaterial.js",
            "line": 796,
            "description": "An occlusion map {{#crossLink \"Texture\"}}{{/crossLink}} attached to this PhongMaterial.\nMust be within the same {{#crossLink \"Scene\"}}Scene{{/crossLink}} as this PhongMaterial.",
            "itemtype": "property",
            "name": "occlusionMap",
            "default": "undefined",
            "type": "{Texture}",
            "class": "PhongMaterial",
            "module": "xeogl",
            "submodule": "materials"
        },
        {
            "file": "src/materials/phongMaterial.js",
            "line": 810,
            "description": "Fired whenever this PhongMaterial's {{#crossLink \"PhongMaterial/occlusionMap:property\"}}{{/crossLink}} property changes.",
            "itemtype": "event",
            "name": "occlusionMap",
            "params": [
                {
                    "name": "value",
                    "description": "Number The property's new value"
                }
            ],
            "class": "PhongMaterial",
            "module": "xeogl",
            "submodule": "materials"
        },
        {
            "file": "src/materials/phongMaterial.js",
            "line": 824,
            "description": "A diffuse {{#crossLink \"Fresnel\"}}{{/crossLink}} attached to this PhongMaterial.\n\nThis property multiplies by {{#crossLink \"PhongMaterial/diffuseFresnel:property\"}}{{/crossLink}} when not null or undefined.\n\nMust be within the same {{#crossLink \"Scene\"}}Scene{{/crossLink}} as this PhongMaterial.",
            "itemtype": "property",
            "name": "diffuseFresnel",
            "default": "undefined",
            "type": "{Fresnel}",
            "class": "PhongMaterial",
            "module": "xeogl",
            "submodule": "materials"
        },
        {
            "file": "src/materials/phongMaterial.js",
            "line": 839,
            "description": "Fired whenever this PhongMaterial's {{#crossLink \"PhongMaterial/diffuse:property\"}}{{/crossLink}} property changes.",
            "itemtype": "event",
            "name": "diffuseFresnel",
            "params": [
                {
                    "name": "value",
                    "description": "Number The property's new value"
                }
            ],
            "class": "PhongMaterial",
            "module": "xeogl",
            "submodule": "materials"
        },
        {
            "file": "src/materials/phongMaterial.js",
            "line": 853,
            "description": "A specular {{#crossLink \"Fresnel\"}}{{/crossLink}} attached to this PhongMaterial.\n\nThis property multiplies by {{#crossLink \"PhongMaterial/specular:property\"}}{{/crossLink}} when not null or undefined.\n\nMust be within the same {{#crossLink \"Scene\"}}Scene{{/crossLink}} as this PhongMaterial.",
            "itemtype": "property",
            "name": "specularFresnel",
            "default": "undefined",
            "type": "{Fresnel}",
            "class": "PhongMaterial",
            "module": "xeogl",
            "submodule": "materials"
        },
        {
            "file": "src/materials/phongMaterial.js",
            "line": 875,
            "description": "An emissive {{#crossLink \"Fresnel\"}}{{/crossLink}} attached to this PhongMaterial.\n\nThis property multiplies by {{#crossLink \"PhongMaterial/emissive:property\"}}{{/crossLink}} when not null or undefined.\n\nMust be within the same {{#crossLink \"Scene\"}}Scene{{/crossLink}} as this PhongMaterial.",
            "itemtype": "property",
            "name": "emissiveFresnel",
            "default": "undefined",
            "type": "{Fresnel}",
            "class": "PhongMaterial",
            "module": "xeogl",
            "submodule": "materials"
        },
        {
            "file": "src/materials/phongMaterial.js",
            "line": 897,
            "description": "An alpha {{#crossLink \"Fresnel\"}}{{/crossLink}} attached to this PhongMaterial.\n\nThis property multiplies by {{#crossLink \"PhongMaterial/alpha:property\"}}{{/crossLink}} when not null or undefined.\n\nMust be within the same {{#crossLink \"Scene\"}}Scene{{/crossLink}} as this PhongMaterial.",
            "itemtype": "property",
            "name": "alphaFresnel",
            "default": "undefined",
            "type": "{Fresnel}",
            "class": "PhongMaterial",
            "module": "xeogl",
            "submodule": "materials"
        },
        {
            "file": "src/materials/phongMaterial.js",
            "line": 919,
            "description": "A reflectivity {{#crossLink \"Fresnel\"}}{{/crossLink}} attached to this PhongMaterial.\n\nThis property multiplies by {{#crossLink \"PhongMaterial/reflectivity:property\"}}{{/crossLink}} when not null or undefined.\n\nMust be within the same {{#crossLink \"Scene\"}}Scene{{/crossLink}} as this PhongMaterial.",
            "itemtype": "property",
            "name": "reflectivityFresnel",
            "default": "undefined",
            "type": "{Fresnel}",
            "class": "PhongMaterial",
            "module": "xeogl",
            "submodule": "materials"
        },
        {
            "file": "src/materials/phongMaterial.js",
            "line": 941,
            "description": "The alpha rendering mode.\n\nThis governs how alpha is treated. Alpha is the combined result of the\n{{#crossLink \"PhongMaterial/alpha:property\"}}{{/crossLink}} and\n{{#crossLink \"PhongMaterial/alphaMap:property\"}}{{/crossLink}} properties.\n\n* \"opaque\" - The alpha value is ignored and the rendered output is fully opaque.\n* \"mask\" - The rendered output is either fully opaque or fully transparent depending on the alpha value and the specified alpha cutoff value.\n* \"blend\" - The alpha value is used to composite the source and destination areas. The rendered output is combined with the background using the normal painting operation (i.e. the Porter and Duff over operator).",
            "itemtype": "property",
            "name": "alphaMode",
            "default": "\"opaque\"",
            "type": "{String}",
            "class": "PhongMaterial",
            "module": "xeogl",
            "submodule": "materials"
        },
        {
            "file": "src/materials/phongMaterial.js",
            "line": 985,
            "description": "The alpha cutoff value.\n\nSpecifies the cutoff threshold when {{#crossLink \"PhongMaterial/alphaMode:property\"}}{{/crossLink}}\nequals \"mask\". If the alpha is greater than or equal to this value then it is rendered as fully\nopaque, otherwise, it is rendered as fully transparent. A value greater than 1.0 will render the entire\nmaterial as fully transparent. This value is ignored for other modes.\n\nAlpha is the combined result of the\n{{#crossLink \"PhongMaterial/alpha:property\"}}{{/crossLink}} and\n{{#crossLink \"PhongMaterial/alphaMap:property\"}}{{/crossLink}} properties.",
            "itemtype": "property",
            "name": "alphaCutoff",
            "default": "0.5",
            "type": "{Number}",
            "class": "PhongMaterial",
            "module": "xeogl",
            "submodule": "materials"
        },
        {
            "file": "src/materials/phongMaterial.js",
            "line": 1019,
            "description": "Whether backfaces are visible on attached {{#crossLink \"Entity\"}}Entities{{/crossLink}}.\n\nThe backfaces will belong to {{#crossLink \"Geometry\"}}{{/crossLink}} compoents that are also attached to\nthe {{#crossLink \"Entity\"}}Entities{{/crossLink}}.",
            "itemtype": "property",
            "name": "backfaces",
            "default": "false",
            "type": "Boolean",
            "class": "PhongMaterial",
            "module": "xeogl",
            "submodule": "materials"
        },
        {
            "file": "src/materials/phongMaterial.js",
            "line": 1049,
            "description": "Indicates the winding direction of front faces on attached {{#crossLink \"Entity\"}}Entities{{/crossLink}}.\n\nThe faces will belong to {{#crossLink \"Geometry\"}}{{/crossLink}} components that are also attached to\nthe {{#crossLink \"Entity\"}}Entities{{/crossLink}}.",
            "itemtype": "property",
            "name": "frontface",
            "default": "\"ccw\"",
            "type": "String",
            "class": "PhongMaterial",
            "module": "xeogl",
            "submodule": "materials"
        },
        {
            "file": "src/materials/specularMaterial.js",
            "line": 395,
            "description": "RGB diffuse color of this SpecularMaterial.\n\nMultiplies by the *RGB* components of {{#crossLink \"SpecularMaterial/diffuseMap:property\"}}{{/crossLink}}.",
            "itemtype": "property",
            "name": "diffuse",
            "default": "[1.0, 1.0, 1.0]",
            "type": "Float32Array",
            "class": "SpecularMaterial",
            "module": "xeogl",
            "submodule": "materials"
        },
        {
            "file": "src/materials/specularMaterial.js",
            "line": 436,
            "description": "RGB {{#crossLink \"Texture\"}}{{/crossLink}} containing the diffuse color of this SpecularMaterial, with optional *A* component for alpha.\n\nThe *RGB* components multiply by the {{#crossLink \"SpecularMaterial/diffuse:property\"}}{{/crossLink}} property,\nwhile the *A* component, if present, multiplies by the {{#crossLink \"SpecularMaterial/alpha:property\"}}{{/crossLink}} property.\n\nMust be within the same {{#crossLink \"Scene\"}}Scene{{/crossLink}} as this SpecularMaterial.",
            "itemtype": "property",
            "name": "diffuseMap",
            "default": "undefined",
            "type": "{Texture}",
            "class": "SpecularMaterial",
            "module": "xeogl",
            "submodule": "materials"
        },
        {
            "file": "src/materials/specularMaterial.js",
            "line": 452,
            "description": "Fired whenever this SpecularMaterial's {{#crossLink \"SpecularMaterial/diffuseMap:property\"}}{{/crossLink}} property changes.",
            "itemtype": "event",
            "name": "diffuseMap",
            "params": [
                {
                    "name": "value",
                    "description": "Number The property's new value"
                }
            ],
            "class": "SpecularMaterial",
            "module": "xeogl",
            "submodule": "materials"
        },
        {
            "file": "src/materials/specularMaterial.js",
            "line": 466,
            "description": "RGB specular color of this SpecularMaterial.\n\nMultiplies by the {{#crossLink \"SpecularMaterial/specularMap:property\"}}{{/crossLink}}\nand the *A* component of {{#crossLink \"SpecularMaterial/specularGlossinessMap:property\"}}{{/crossLink}}.",
            "itemtype": "property",
            "name": "specular",
            "default": "[1.0, 1.0, 1.0]",
            "type": "Float32Array",
            "class": "SpecularMaterial",
            "module": "xeogl",
            "submodule": "materials"
        },
        {
            "file": "src/materials/specularMaterial.js",
            "line": 508,
            "description": "RGB texture containing the specular color of this SpecularMaterial.\n\nMultiplies by the {{#crossLink \"SpecularMaterial/specular:property\"}}{{/crossLink}} property.\n\nMust be within the same {{#crossLink \"Scene\"}}Scene{{/crossLink}} as this SpecularMaterial.",
            "itemtype": "property",
            "name": "specularMap",
            "default": "undefined",
            "type": "{Texture}",
            "class": "SpecularMaterial",
            "module": "xeogl",
            "submodule": "materials"
        },
        {
            "file": "src/materials/specularMaterial.js",
            "line": 523,
            "description": "Fired whenever this SpecularMaterial's {{#crossLink \"SpecularMaterial/specularGlossinessMap:property\"}}{{/crossLink}} property changes.",
            "itemtype": "event",
            "name": "specularMap",
            "params": [
                {
                    "name": "value",
                    "description": "Number The property's new value"
                }
            ],
            "class": "SpecularMaterial",
            "module": "xeogl",
            "submodule": "materials"
        },
        {
            "file": "src/materials/specularMaterial.js",
            "line": 537,
            "description": "RGBA texture containing this SpecularMaterial's specular color in its *RGB* components and glossiness in its *A* component.\n\nThe *RGB* components multiply by the {{#crossLink \"SpecularMaterial/specular:property\"}}{{/crossLink}} property, while\nthe *A* component multiplies by the {{#crossLink \"SpecularMaterial/glossiness:property\"}}{{/crossLink}} property.\n\nMust be within the same {{#crossLink \"Scene\"}}Scene{{/crossLink}} as this SpecularMaterial.",
            "itemtype": "property",
            "name": "specularGlossinessMap",
            "default": "undefined",
            "type": "{Texture}",
            "class": "SpecularMaterial",
            "module": "xeogl",
            "submodule": "materials"
        },
        {
            "file": "src/materials/specularMaterial.js",
            "line": 553,
            "description": "Fired whenever this SpecularMaterial's {{#crossLink \"SpecularMaterial/specularGlossinessMap:property\"}}{{/crossLink}} property changes.",
            "itemtype": "event",
            "name": "specularGlossinessMap",
            "params": [
                {
                    "name": "value",
                    "description": "Number The property's new value"
                }
            ],
            "class": "SpecularMaterial",
            "module": "xeogl",
            "submodule": "materials"
        },
        {
            "file": "src/materials/specularMaterial.js",
            "line": 567,
            "description": "Factor in the range [0..1] indicating how glossy this SpecularMaterial is.\n\n0 is no glossiness, 1 is full glossiness.\n\nMultiplies by the *R* component of {{#crossLink \"SpecularMaterial/glossinessMap:property\"}}{{/crossLink}}\nand the *A* component of {{#crossLink \"SpecularMaterial/specularGlossinessMap:property\"}}{{/crossLink}}.",
            "itemtype": "property",
            "name": "glossiness",
            "default": "1.0",
            "type": "Number",
            "class": "SpecularMaterial",
            "module": "xeogl",
            "submodule": "materials"
        },
        {
            "file": "src/materials/specularMaterial.js",
            "line": 599,
            "description": "RGB texture containing this SpecularMaterial's glossiness in its *R* component.\n\nThe *R* component multiplies by the {{#crossLink \"SpecularMaterial/glossiness:property\"}}{{/crossLink}} property.\n\nMust be within the same {{#crossLink \"Scene\"}}Scene{{/crossLink}} as this SpecularMaterial.",
            "itemtype": "property",
            "name": "glossinessMap",
            "default": "undefined",
            "type": "{Texture}",
            "class": "SpecularMaterial",
            "module": "xeogl",
            "submodule": "materials"
        },
        {
            "file": "src/materials/specularMaterial.js",
            "line": 614,
            "description": "Fired whenever this SpecularMaterial's {{#crossLink \"SpecularMaterial/glossinessMap:property\"}}{{/crossLink}} property changes.",
            "itemtype": "event",
            "name": "glossinessMap",
            "params": [
                {
                    "name": "value",
                    "description": "Number The property's new value"
                }
            ],
            "class": "SpecularMaterial",
            "module": "xeogl",
            "submodule": "materials"
        },
        {
            "file": "src/materials/specularMaterial.js",
            "line": 628,
            "description": "Factor in the range [0..1] indicating amount of specular Fresnel.",
            "itemtype": "property",
            "name": "specularF0",
            "default": "0.0",
            "type": "Number",
            "class": "SpecularMaterial",
            "module": "xeogl",
            "submodule": "materials"
        },
        {
            "file": "src/materials/specularMaterial.js",
            "line": 655,
            "description": "RGB emissive color of this SpecularMaterial.\n\nMultiplies by {{#crossLink \"SpecularMaterial/emissiveMap:property\"}}{{/crossLink}}.",
            "itemtype": "property",
            "name": "emissive",
            "default": "[0.0, 0.0, 0.0]",
            "type": "Float32Array",
            "class": "SpecularMaterial",
            "module": "xeogl",
            "submodule": "materials"
        },
        {
            "file": "src/materials/specularMaterial.js",
            "line": 696,
            "description": "RGB texture containing the emissive color of this SpecularMaterial.\n\nMultiplies by the {{#crossLink \"SpecularMaterial/emissive:property\"}}{{/crossLink}} property.\n\nMust be within the same {{#crossLink \"Scene\"}}Scene{{/crossLink}} as this SpecularMaterial.",
            "itemtype": "property",
            "name": "emissiveMap",
            "default": "undefined",
            "type": "{Texture}",
            "class": "SpecularMaterial",
            "module": "xeogl",
            "submodule": "materials"
        },
        {
            "file": "src/materials/specularMaterial.js",
            "line": 711,
            "description": "Fired whenever this SpecularMaterial's {{#crossLink \"SpecularMaterial/emissiveMap:property\"}}{{/crossLink}} property changes.",
            "itemtype": "event",
            "name": "emissiveMap",
            "params": [
                {
                    "name": "value",
                    "description": "Number The property's new value"
                }
            ],
            "class": "SpecularMaterial",
            "module": "xeogl",
            "submodule": "materials"
        },
        {
            "file": "src/materials/specularMaterial.js",
            "line": 725,
            "description": "Factor in the range [0..1] indicating how transparent this SpecularMaterial is.\n\nA value of 0.0 is fully transparent, while 1.0 is fully opaque.\n\nMultiplies by the *R* component of {{#crossLink \"SpecularMaterial/alphaMap:property\"}}{{/crossLink}} and\nthe *A* component, if present, of {{#crossLink \"SpecularMaterial/diffuseMap:property\"}}{{/crossLink}}.",
            "itemtype": "property",
            "name": "alpha",
            "default": "1.0",
            "type": "Number",
            "class": "SpecularMaterial",
            "module": "xeogl",
            "submodule": "materials"
        },
        {
            "file": "src/materials/specularMaterial.js",
            "line": 757,
            "description": "RGB {{#crossLink \"Texture\"}}{{/crossLink}} with alpha in its *R* component.\n\nThe *R* component multiplies by the {{#crossLink \"SpecularMaterial/alpha:property\"}}{{/crossLink}} property.\n\nMust be within the same {{#crossLink \"Scene\"}}Scene{{/crossLink}} as this SpecularMaterial.",
            "itemtype": "property",
            "name": "alphaMap",
            "default": "undefined",
            "type": "{Texture}",
            "class": "SpecularMaterial",
            "module": "xeogl",
            "submodule": "materials"
        },
        {
            "file": "src/materials/specularMaterial.js",
            "line": 779,
            "description": "RGB tangent-space normal {{#crossLink \"Texture\"}}{{/crossLink}} attached to this SpecularMaterial.\n\nMust be within the same {{#crossLink \"Scene\"}}Scene{{/crossLink}} as this SpecularMaterial.",
            "itemtype": "property",
            "name": "normalMap",
            "default": "undefined",
            "type": "{Texture}",
            "class": "SpecularMaterial",
            "module": "xeogl",
            "submodule": "materials"
        },
        {
            "file": "src/materials/specularMaterial.js",
            "line": 799,
            "description": "RGB ambient occlusion {{#crossLink \"Texture\"}}{{/crossLink}} attached to this SpecularMaterial.\n\nWithin objectRenderers, multiplies by the specular and diffuse light reflected by surfaces.\n\nMust be within the same {{#crossLink \"Scene\"}}Scene{{/crossLink}} as this SpecularMaterial.",
            "itemtype": "property",
            "name": "occlusionMap",
            "default": "undefined",
            "type": "{Texture}",
            "class": "SpecularMaterial",
            "module": "xeogl",
            "submodule": "materials"
        },
        {
            "file": "src/materials/specularMaterial.js",
            "line": 821,
            "description": "The alpha rendering mode.\n\nThis governs how alpha is treated. Alpha is the combined result of the\n{{#crossLink \"SpecularMaterial/alpha:property\"}}{{/crossLink}} and\n{{#crossLink \"SpecularMaterial/alphaMap:property\"}}{{/crossLink}} properties.\n\n* \"opaque\" - The alpha value is ignored and the rendered output is fully opaque.\n* \"mask\" - The rendered output is either fully opaque or fully transparent depending on the alpha value and the specified alpha cutoff value.\n* \"blend\" - The alpha value is used to composite the source and destination areas. The rendered output is combined with the background using the normal painting operation (i.e. the Porter and Duff over operator)",
            "itemtype": "property",
            "name": "alphaMode",
            "default": "\"opaque\"",
            "type": "{String}",
            "class": "SpecularMaterial",
            "module": "xeogl",
            "submodule": "materials"
        },
        {
            "file": "src/materials/specularMaterial.js",
            "line": 865,
            "description": "The alpha cutoff value.\n\nSpecifies the cutoff threshold when {{#crossLink \"SpecularMaterial/alphaMode:property\"}}{{/crossLink}}\nequals \"mask\". If the alpha is greater than or equal to this value then it is rendered as fully\nopaque, otherwise, it is rendered as fully transparent. A value greater than 1.0 will render the entire\nmaterial as fully transparent. This value is ignored for other modes.\n\nAlpha is the combined result of the\n{{#crossLink \"SpecularMaterial/alpha:property\"}}{{/crossLink}} and\n{{#crossLink \"SpecularMaterial/alphaMap:property\"}}{{/crossLink}} properties.",
            "itemtype": "property",
            "name": "alphaCutoff",
            "default": "0.5",
            "type": "{Number}",
            "class": "SpecularMaterial",
            "module": "xeogl",
            "submodule": "materials"
        },
        {
            "file": "src/materials/specularMaterial.js",
            "line": 900,
            "description": "Whether backfaces are visible on attached {{#crossLink \"Entity\"}}Entities{{/crossLink}}.\n\nThe backfaces will belong to {{#crossLink \"Geometry\"}}{{/crossLink}} compoents that are also attached to\nthe {{#crossLink \"Entity\"}}Entities{{/crossLink}}.",
            "itemtype": "property",
            "name": "backfaces",
            "default": "false",
            "type": "Boolean",
            "class": "SpecularMaterial",
            "module": "xeogl",
            "submodule": "materials"
        },
        {
            "file": "src/materials/specularMaterial.js",
            "line": 930,
            "description": "Indicates the winding direction of front faces on attached {{#crossLink \"Entity\"}}Entities{{/crossLink}}.\n\nThe faces will belong to {{#crossLink \"Geometry\"}}{{/crossLink}} components that are also attached to\nthe {{#crossLink \"Entity\"}}Entities{{/crossLink}}.",
            "itemtype": "property",
            "name": "frontface",
            "default": "\"ccw\"",
            "type": "String",
            "class": "SpecularMaterial",
            "module": "xeogl",
            "submodule": "materials"
        },
        {
            "file": "src/materials/specularMaterial.js",
            "line": 960,
            "description": "The SpecularMaterial's line width.",
            "itemtype": "property",
            "name": "lineWidth",
            "default": "1.0",
            "type": "Number",
            "class": "SpecularMaterial",
            "module": "xeogl",
            "submodule": "materials"
        },
        {
            "file": "src/materials/specularMaterial.js",
            "line": 981,
            "description": "The SpecularMaterial's point size.",
            "itemtype": "property",
            "name": "pointSize",
            "default": "1",
            "type": "Number",
            "class": "SpecularMaterial",
            "module": "xeogl",
            "submodule": "materials"
        },
        {
            "file": "src/materials/texture.js",
            "line": 273,
            "description": "Fired whenever this Texture has loaded the\nimage file that its {{#crossLink \"Texture/src:property\"}}{{/crossLink}} property currently points to.",
            "itemtype": "event",
            "name": "loaded",
            "params": [
                {
                    "name": "value",
                    "description": "The value of the {{#crossLink \"Texture/src:property\"}}{{/crossLink}} property",
                    "type": "HTML Image"
                }
            ],
            "class": "Texture",
            "module": "xeogl",
            "submodule": "materials"
        },
        {
            "file": "src/materials/texture.js",
            "line": 285,
            "description": "Fired when an error occurs that prevents this Texture from loading.",
            "itemtype": "event",
            "name": "error",
            "class": "Texture",
            "module": "xeogl",
            "submodule": "materials"
        },
        {
            "file": "src/materials/texture.js",
            "line": 307,
            "description": "Indicates an HTML DOM Image object to source this Texture from.\n\nSets the {{#crossLink \"Texture/src:property\"}}{{/crossLink}} property to null.",
            "itemtype": "property",
            "name": "image",
            "default": "null",
            "type": "{HTMLImageElement}",
            "class": "Texture",
            "module": "xeogl",
            "submodule": "materials"
        },
        {
            "file": "src/materials/texture.js",
            "line": 334,
            "description": "Indicates a path to an image file to source this Texture from.\n\nSets the {{#crossLink \"Texture/image:property\"}}{{/crossLink}} property to null.",
            "itemtype": "property",
            "name": "src",
            "default": "null",
            "type": "String",
            "class": "Texture",
            "module": "xeogl",
            "submodule": "materials"
        },
        {
            "file": "src/materials/texture.js",
            "line": 361,
            "description": "2D translation vector that will be added to this Texture's *S* and *T* coordinates.",
            "itemtype": "property",
            "name": "translate",
            "default": "[0, 0]",
            "type": "Array(Number)",
            "class": "Texture",
            "module": "xeogl",
            "submodule": "materials"
        },
        {
            "file": "src/materials/texture.js",
            "line": 383,
            "description": "2D scaling vector that will be applied to this Texture's *S* and *T* coordinates.",
            "itemtype": "property",
            "name": "scale",
            "default": "[1, 1]",
            "type": "Array(Number)",
            "class": "Texture",
            "module": "xeogl",
            "submodule": "materials"
        },
        {
            "file": "src/materials/texture.js",
            "line": 405,
            "description": "Rotation, in degrees, that will be applied to this Texture's *S* and *T* coordinates.",
            "itemtype": "property",
            "name": "rotate",
            "default": "0",
            "type": "Number",
            "class": "Texture",
            "module": "xeogl",
            "submodule": "materials"
        },
        {
            "file": "src/materials/texture.js",
            "line": 433,
            "description": "How this Texture is sampled when a texel covers less than one pixel.\n\n\nOptions are:\n\n    * **\"nearest\"** - Uses the value of the texture element that is nearest\n    (in Manhattan distance) to the center of the pixel being textured.\n\n    * **\"linear\"** - Uses the weighted average of the four texture elements that are\n    closest to the center of the pixel being textured.\n\n    * **\"nearestMipmapNearest\"** - Chooses the mipmap that most closely matches the\n    size of the pixel being textured and uses the \"nearest\" criterion (the texture\n    element nearest to the center of the pixel) to produce a texture value.\n\n    * **\"linearMipmapNearest\"** - Chooses the mipmap that most closely matches the size of\n    the pixel being textured and uses the \"linear\" criterion (a weighted average of the\n    four texture elements that are closest to the center of the pixel) to produce a\n    texture value.\n\n    * **\"nearestMipmapLinear\"** - Chooses the two mipmaps that most closely\n    match the size of the pixel being textured and uses the \"nearest\" criterion\n    (the texture element nearest to the center of the pixel) to produce a texture\n    value from each mipmap. The final texture value is a weighted average of those two\n    values.\n\n    * **\"linearMipmapLinear\"** - **(default)** - Chooses the two mipmaps that most closely match the size\n    of the pixel being textured and uses the \"linear\" criterion (a weighted average\n    of the four texture elements that are closest to the center of the pixel) to\n    produce a texture value from each mipmap. The final texture value is a weighted\n    average of those two values.",
            "itemtype": "property",
            "name": "minFilter",
            "default": "\"linearMipmapLinear\"",
            "type": "String",
            "class": "Texture",
            "module": "xeogl",
            "submodule": "materials"
        },
        {
            "file": "src/materials/texture.js",
            "line": 500,
            "description": "How this Texture is sampled when a texel covers more than one pixel.\n\nOptions are:\n\n\n    * **\"nearest\"** - Uses the value of the texture element that is nearest\n    (in Manhattan distance) to the center of the pixel being textured.\n    * **\"linear\"** - **(default)** - Uses the weighted average of the four texture elements that are\n    closest to the center of the pixel being textured.",
            "itemtype": "property",
            "name": "magFilter",
            "default": "\"linear\"",
            "type": "String",
            "class": "Texture",
            "module": "xeogl",
            "submodule": "materials"
        },
        {
            "file": "src/materials/texture.js",
            "line": 540,
            "description": "Wrap parameter for this Texture's *S* coordinate.\n\nOptions are:\n\n\n    * **\"clampToEdge\"** -  causes *S* coordinates to be clamped to the size of the texture.\n    * **\"mirroredRepeat\"** - causes the *S* coordinate to be set to the fractional part of the texture coordinate\n    if the integer part of *S* is even; if the integer part of *S* is odd, then the *S* texture coordinate is\n    set to *1 - frac ⁡ S* , where *frac ⁡ S* represents the fractional part of *S*.\n    * **\"repeat\"** - **(default)** - causes the integer part of the *S* coordinate to be ignored; xeogl uses only the\n    fractional part, thereby creating a repeating pattern.",
            "itemtype": "property",
            "name": "wrapS",
            "default": "\"repeat\"",
            "type": "String",
            "class": "Texture",
            "module": "xeogl",
            "submodule": "materials"
        },
        {
            "file": "src/materials/texture.js",
            "line": 582,
            "description": "Wrap parameter for this Texture's *T* coordinate.\n\nOptions are:\n\n\n    * **\"clampToEdge\"** -  Causes *T* coordinates to be clamped to the size of the texture.\n    * **\"mirroredRepeat\"** - Causes the *T* coordinate to be set to the fractional part of the texture coordinate\n    if the integer part of *T* is even; if the integer part of *T* is odd, then the *T* texture coordinate is\n    set to *1 - frac ⁡ S* , where *frac ⁡ S* represents the fractional part of *T*.\n    * **\"repeat\"** - **(default)** - Causes the integer part of the *T* coordinate to be ignored; xeogl uses only the\n    fractional part, thereby creating a repeating pattern.",
            "itemtype": "property",
            "name": "wrapT",
            "default": "\"repeat\"",
            "type": "String",
            "class": "Texture",
            "module": "xeogl",
            "submodule": "materials"
        },
        {
            "file": "src/materials/texture.js",
            "line": 624,
            "description": "Flips this Texture's source data along its vertical axis when true.",
            "itemtype": "property",
            "name": "flipY",
            "default": "false",
            "type": "Boolean",
            "class": "Texture",
            "module": "xeogl",
            "submodule": "materials"
        },
        {
            "file": "src/materials/texture.js",
            "line": 652,
            "description": "The Texture's encoding format.\n\nSupported values are:\n\n* \"linear\" (default)\n* \"sRGB\"\n* \"gamma\"",
            "itemtype": "property",
            "name": "encoding",
            "default": "\"linear\"",
            "type": "String",
            "class": "Texture",
            "module": "xeogl",
            "submodule": "materials"
        },
        {
            "file": "src/math/math.js",
            "line": 24,
            "description": "The number of radiians in a degree (0.0174532925).",
            "itemtype": "property",
            "name": "DEGTORAD",
            "type": "{Number}",
            "class": "xeogl.math.math",
            "module": "xeogl",
            "submodule": "math",
            "namespace": "xeogl.math"
        },
        {
            "file": "src/math/math.js",
            "line": 32,
            "description": "Returns a new, uninitialized two-element vector.",
            "itemtype": "method",
            "name": "vec2",
            "params": [
                {
                    "name": "values",
                    "description": "Initial values.",
                    "optional": true
                }
            ],
            "static": 1,
            "return": {
                "description": "",
                "type": "Float32Array"
            },
            "class": "xeogl.math.math",
            "module": "xeogl",
            "submodule": "math",
            "namespace": "xeogl.math"
        },
        {
            "file": "src/math/math.js",
            "line": 43,
            "description": "Returns a new, uninitialized three-element vector.",
            "itemtype": "method",
            "name": "vec3",
            "params": [
                {
                    "name": "values",
                    "description": "Initial values.",
                    "optional": true
                }
            ],
            "static": 1,
            "return": {
                "description": "",
                "type": "Float32Array"
            },
            "class": "xeogl.math.math",
            "module": "xeogl",
            "submodule": "math",
            "namespace": "xeogl.math"
        },
        {
            "file": "src/math/math.js",
            "line": 54,
            "description": "Returns a new, uninitialized four-element vector.",
            "itemtype": "method",
            "name": "vec4",
            "params": [
                {
                    "name": "values",
                    "description": "Initial values.",
                    "optional": true
                }
            ],
            "static": 1,
            "return": {
                "description": "",
                "type": "Float32Array"
            },
            "class": "xeogl.math.math",
            "module": "xeogl",
            "submodule": "math",
            "namespace": "xeogl.math"
        },
        {
            "file": "src/math/math.js",
            "line": 65,
            "description": "Returns a new, uninitialized 3x3 matrix.",
            "itemtype": "method",
            "name": "mat3",
            "params": [
                {
                    "name": "values",
                    "description": "Initial values.",
                    "optional": true
                }
            ],
            "static": 1,
            "return": {
                "description": "",
                "type": "Float32Array"
            },
            "class": "xeogl.math.math",
            "module": "xeogl",
            "submodule": "math",
            "namespace": "xeogl.math"
        },
        {
            "file": "src/math/math.js",
            "line": 76,
            "description": "Converts a 3x3 matrix to 4x4",
            "itemtype": "method",
            "name": "mat3ToMat4",
            "params": [
                {
                    "name": "mat3",
                    "description": "3x3 matrix."
                },
                {
                    "name": "mat4",
                    "description": "4x4 matrix"
                }
            ],
            "static": 1,
            "return": {
                "description": "",
                "type": "Float32Array"
            },
            "class": "xeogl.math.math",
            "module": "xeogl",
            "submodule": "math",
            "namespace": "xeogl.math"
        },
        {
            "file": "src/math/math.js",
            "line": 88,
            "description": "Returns a new, uninitialized 4x4 matrix.",
            "itemtype": "method",
            "name": "mat4",
            "params": [
                {
                    "name": "values",
                    "description": "Initial values.",
                    "optional": true
                }
            ],
            "static": 1,
            "return": {
                "description": "",
                "type": "Float32Array"
            },
            "class": "xeogl.math.math",
            "module": "xeogl",
            "submodule": "math",
            "namespace": "xeogl.math"
        },
        {
            "file": "src/math/math.js",
            "line": 99,
            "description": "Converts a 4x4 matrix to 3x3",
            "itemtype": "method",
            "name": "mat4ToMat3",
            "params": [
                {
                    "name": "mat4",
                    "description": "4x4 matrix."
                },
                {
                    "name": "mat3",
                    "description": "3x3 matrix"
                }
            ],
            "static": 1,
            "return": {
                "description": "",
                "type": "Float32Array"
            },
            "class": "xeogl.math.math",
            "module": "xeogl",
            "submodule": "math",
            "namespace": "xeogl.math"
        },
        {
            "file": "src/math/math.js",
            "line": 111,
            "description": "Returns a new UUID.",
            "itemtype": "method",
            "name": "createUUID",
            "static": 1,
            "return": {
                "description": "string The new UUID"
            },
            "class": "xeogl.math.math",
            "module": "xeogl",
            "submodule": "math",
            "namespace": "xeogl.math"
        },
        {
            "file": "src/math/math.js",
            "line": 160,
            "description": "Clamps a value to the given range.",
            "params": [
                {
                    "name": "value",
                    "description": "Value to clamp.",
                    "type": "Number"
                },
                {
                    "name": "min",
                    "description": "Lower bound.",
                    "type": "Number"
                },
                {
                    "name": "max",
                    "description": "Upper bound.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Clamped result.",
                "type": "Number"
            },
            "class": "xeogl.math.math",
            "module": "xeogl",
            "submodule": "math",
            "namespace": "xeogl.math"
        },
        {
            "file": "src/math/math.js",
            "line": 171,
            "description": "Floating-point modulus",
            "itemtype": "method",
            "name": "fmod",
            "static": 1,
            "params": [
                {
                    "name": "a",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "b",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "*"
            },
            "class": "xeogl.math.math",
            "module": "xeogl",
            "submodule": "math",
            "namespace": "xeogl.math"
        },
        {
            "file": "src/math/math.js",
            "line": 190,
            "description": "Negates a four-element vector.",
            "itemtype": "method",
            "name": "negateVec4",
            "static": 1,
            "params": [
                {
                    "name": "v",
                    "description": "Vector to negate",
                    "type": "Array(Number)"
                },
                {
                    "name": "dest",
                    "description": "Destination vector",
                    "type": "Array(Number)",
                    "optional": true
                }
            ],
            "return": {
                "description": "dest if specified, v otherwise",
                "type": "Array(Number)"
            },
            "class": "xeogl.math.math",
            "module": "xeogl",
            "submodule": "math",
            "namespace": "xeogl.math"
        },
        {
            "file": "src/math/math.js",
            "line": 209,
            "description": "Adds one four-element vector to another.",
            "itemtype": "method",
            "name": "addVec4",
            "static": 1,
            "params": [
                {
                    "name": "u",
                    "description": "First vector",
                    "type": "Array(Number)"
                },
                {
                    "name": "v",
                    "description": "Second vector",
                    "type": "Array(Number)"
                },
                {
                    "name": "dest",
                    "description": "Destination vector",
                    "type": "Array(Number)",
                    "optional": true
                }
            ],
            "return": {
                "description": "dest if specified, u otherwise",
                "type": "Array(Number)"
            },
            "class": "xeogl.math.math",
            "module": "xeogl",
            "submodule": "math",
            "namespace": "xeogl.math"
        },
        {
            "file": "src/math/math.js",
            "line": 229,
            "description": "Adds a scalar value to each element of a four-element vector.",
            "itemtype": "method",
            "name": "addVec4Scalar",
            "static": 1,
            "params": [
                {
                    "name": "v",
                    "description": "The vector",
                    "type": "Array(Number)"
                },
                {
                    "name": "s",
                    "description": "The scalar",
                    "type": "Number"
                },
                {
                    "name": "dest",
                    "description": "Destination vector",
                    "type": "Array(Number)",
                    "optional": true
                }
            ],
            "return": {
                "description": "dest if specified, v otherwise",
                "type": "Array(Number)"
            },
            "class": "xeogl.math.math",
            "module": "xeogl",
            "submodule": "math",
            "namespace": "xeogl.math"
        },
        {
            "file": "src/math/math.js",
            "line": 249,
            "description": "Adds one three-element vector to another.",
            "itemtype": "method",
            "name": "addVec3",
            "static": 1,
            "params": [
                {
                    "name": "u",
                    "description": "First vector",
                    "type": "Array(Number)"
                },
                {
                    "name": "v",
                    "description": "Second vector",
                    "type": "Array(Number)"
                },
                {
                    "name": "dest",
                    "description": "Destination vector",
                    "type": "Array(Number)",
                    "optional": true
                }
            ],
            "return": {
                "description": "dest if specified, u otherwise",
                "type": "Array(Number)"
            },
            "class": "xeogl.math.math",
            "module": "xeogl",
            "submodule": "math",
            "namespace": "xeogl.math"
        },
        {
            "file": "src/math/math.js",
            "line": 268,
            "description": "Adds a scalar value to each element of a three-element vector.",
            "itemtype": "method",
            "name": "addVec4Scalar",
            "static": 1,
            "params": [
                {
                    "name": "v",
                    "description": "The vector",
                    "type": "Array(Number)"
                },
                {
                    "name": "s",
                    "description": "The scalar",
                    "type": "Number"
                },
                {
                    "name": "dest",
                    "description": "Destination vector",
                    "type": "Array(Number)",
                    "optional": true
                }
            ],
            "return": {
                "description": "dest if specified, v otherwise",
                "type": "Array(Number)"
            },
            "class": "xeogl.math.math",
            "module": "xeogl",
            "submodule": "math",
            "namespace": "xeogl.math"
        },
        {
            "file": "src/math/math.js",
            "line": 287,
            "description": "Subtracts one four-element vector from another.",
            "itemtype": "method",
            "name": "subVec4",
            "static": 1,
            "params": [
                {
                    "name": "u",
                    "description": "First vector",
                    "type": "Array(Number)"
                },
                {
                    "name": "v",
                    "description": "Vector to subtract",
                    "type": "Array(Number)"
                },
                {
                    "name": "dest",
                    "description": "Destination vector",
                    "type": "Array(Number)",
                    "optional": true
                }
            ],
            "return": {
                "description": "dest if specified, u otherwise",
                "type": "Array(Number)"
            },
            "class": "xeogl.math.math",
            "module": "xeogl",
            "submodule": "math",
            "namespace": "xeogl.math"
        },
        {
            "file": "src/math/math.js",
            "line": 307,
            "description": "Subtracts one three-element vector from another.",
            "itemtype": "method",
            "name": "subVec3",
            "static": 1,
            "params": [
                {
                    "name": "u",
                    "description": "First vector",
                    "type": "Array(Number)"
                },
                {
                    "name": "v",
                    "description": "Vector to subtract",
                    "type": "Array(Number)"
                },
                {
                    "name": "dest",
                    "description": "Destination vector",
                    "type": "Array(Number)",
                    "optional": true
                }
            ],
            "return": {
                "description": "dest if specified, u otherwise",
                "type": "Array(Number)"
            },
            "class": "xeogl.math.math",
            "module": "xeogl",
            "submodule": "math",
            "namespace": "xeogl.math"
        },
        {
            "file": "src/math/math.js",
            "line": 326,
            "description": "Subtracts one two-element vector from another.",
            "itemtype": "method",
            "name": "subVec2",
            "static": 1,
            "params": [
                {
                    "name": "u",
                    "description": "First vector",
                    "type": "Array(Number)"
                },
                {
                    "name": "v",
                    "description": "Vector to subtract",
                    "type": "Array(Number)"
                },
                {
                    "name": "dest",
                    "description": "Destination vector",
                    "type": "Array(Number)",
                    "optional": true
                }
            ],
            "return": {
                "description": "dest if specified, u otherwise",
                "type": "Array(Number)"
            },
            "class": "xeogl.math.math",
            "module": "xeogl",
            "submodule": "math",
            "namespace": "xeogl.math"
        },
        {
            "file": "src/math/math.js",
            "line": 344,
            "description": "Subtracts a scalar value from each element of a four-element vector.",
            "itemtype": "method",
            "name": "subVec4Scalar",
            "static": 1,
            "params": [
                {
                    "name": "v",
                    "description": "The vector",
                    "type": "Array(Number)"
                },
                {
                    "name": "s",
                    "description": "The scalar",
                    "type": "Number"
                },
                {
                    "name": "dest",
                    "description": "Destination vector",
                    "type": "Array(Number)",
                    "optional": true
                }
            ],
            "return": {
                "description": "dest if specified, v otherwise",
                "type": "Array(Number)"
            },
            "class": "xeogl.math.math",
            "module": "xeogl",
            "submodule": "math",
            "namespace": "xeogl.math"
        },
        {
            "file": "src/math/math.js",
            "line": 364,
            "description": "Sets each element of a 4-element vector to a scalar value minus the value of that element.",
            "itemtype": "method",
            "name": "subScalarVec4",
            "static": 1,
            "params": [
                {
                    "name": "v",
                    "description": "The vector",
                    "type": "Array(Number)"
                },
                {
                    "name": "s",
                    "description": "The scalar",
                    "type": "Number"
                },
                {
                    "name": "dest",
                    "description": "Destination vector",
                    "type": "Array(Number)",
                    "optional": true
                }
            ],
            "return": {
                "description": "dest if specified, v otherwise",
                "type": "Array(Number)"
            },
            "class": "xeogl.math.math",
            "module": "xeogl",
            "submodule": "math",
            "namespace": "xeogl.math"
        },
        {
            "file": "src/math/math.js",
            "line": 384,
            "description": "Multiplies one three-element vector by another.",
            "itemtype": "method",
            "name": "mulVec3",
            "static": 1,
            "params": [
                {
                    "name": "u",
                    "description": "First vector",
                    "type": "Array(Number)"
                },
                {
                    "name": "v",
                    "description": "Second vector",
                    "type": "Array(Number)"
                },
                {
                    "name": "dest",
                    "description": "Destination vector",
                    "type": "Array(Number)",
                    "optional": true
                }
            ],
            "return": {
                "description": "dest if specified, u otherwise",
                "type": "Array(Number)"
            },
            "class": "xeogl.math.math",
            "module": "xeogl",
            "submodule": "math",
            "namespace": "xeogl.math"
        },
        {
            "file": "src/math/math.js",
            "line": 404,
            "description": "Multiplies each element of a four-element vector by a scalar.",
            "itemtype": "method",
            "name": "mulVec34calar",
            "static": 1,
            "params": [
                {
                    "name": "v",
                    "description": "The vector",
                    "type": "Array(Number)"
                },
                {
                    "name": "s",
                    "description": "The scalar",
                    "type": "Number"
                },
                {
                    "name": "dest",
                    "description": "Destination vector",
                    "type": "Array(Number)",
                    "optional": true
                }
            ],
            "return": {
                "description": "dest if specified, v otherwise",
                "type": "Array(Number)"
            },
            "class": "xeogl.math.math",
            "module": "xeogl",
            "submodule": "math",
            "namespace": "xeogl.math"
        },
        {
            "file": "src/math/math.js",
            "line": 424,
            "description": "Multiplies each element of a three-element vector by a scalar.",
            "itemtype": "method",
            "name": "mulVec3Scalar",
            "static": 1,
            "params": [
                {
                    "name": "v",
                    "description": "The vector",
                    "type": "Array(Number)"
                },
                {
                    "name": "s",
                    "description": "The scalar",
                    "type": "Number"
                },
                {
                    "name": "dest",
                    "description": "Destination vector",
                    "type": "Array(Number)",
                    "optional": true
                }
            ],
            "return": {
                "description": "dest if specified, v otherwise",
                "type": "Array(Number)"
            },
            "class": "xeogl.math.math",
            "module": "xeogl",
            "submodule": "math",
            "namespace": "xeogl.math"
        },
        {
            "file": "src/math/math.js",
            "line": 443,
            "description": "Multiplies each element of a two-element vector by a scalar.",
            "itemtype": "method",
            "name": "mulVec2Scalar",
            "static": 1,
            "params": [
                {
                    "name": "v",
                    "description": "The vector",
                    "type": "Array(Number)"
                },
                {
                    "name": "s",
                    "description": "The scalar",
                    "type": "Number"
                },
                {
                    "name": "dest",
                    "description": "Destination vector",
                    "type": "Array(Number)",
                    "optional": true
                }
            ],
            "return": {
                "description": "dest if specified, v otherwise",
                "type": "Array(Number)"
            },
            "class": "xeogl.math.math",
            "module": "xeogl",
            "submodule": "math",
            "namespace": "xeogl.math"
        },
        {
            "file": "src/math/math.js",
            "line": 461,
            "description": "Divides one three-element vector by another.",
            "itemtype": "method",
            "name": "divVec3",
            "static": 1,
            "params": [
                {
                    "name": "u",
                    "description": "First vector",
                    "type": "Array(Number)"
                },
                {
                    "name": "v",
                    "description": "Second vector",
                    "type": "Array(Number)"
                },
                {
                    "name": "dest",
                    "description": "Destination vector",
                    "type": "Array(Number)",
                    "optional": true
                }
            ],
            "return": {
                "description": "dest if specified, u otherwise",
                "type": "Array(Number)"
            },
            "class": "xeogl.math.math",
            "module": "xeogl",
            "submodule": "math",
            "namespace": "xeogl.math"
        },
        {
            "file": "src/math/math.js",
            "line": 480,
            "description": "Divides one four-element vector by another.",
            "itemtype": "method",
            "name": "divVec4",
            "static": 1,
            "params": [
                {
                    "name": "u",
                    "description": "First vector",
                    "type": "Array(Number)"
                },
                {
                    "name": "v",
                    "description": "Second vector",
                    "type": "Array(Number)"
                },
                {
                    "name": "dest",
                    "description": "Destination vector",
                    "type": "Array(Number)",
                    "optional": true
                }
            ],
            "return": {
                "description": "dest if specified, u otherwise",
                "type": "Array(Number)"
            },
            "class": "xeogl.math.math",
            "module": "xeogl",
            "submodule": "math",
            "namespace": "xeogl.math"
        },
        {
            "file": "src/math/math.js",
            "line": 500,
            "description": "Divides a scalar by a three-element vector, returning a new vector.",
            "itemtype": "method",
            "name": "divScalarVec3",
            "static": 1,
            "params": [
                {
                    "name": "v",
                    "description": "vec3"
                },
                {
                    "name": "s",
                    "description": "scalar"
                },
                {
                    "name": "dest",
                    "description": "vec3 - optional destination"
                }
            ],
            "return": {
                "description": "[] dest if specified, v otherwise"
            },
            "class": "xeogl.math.math",
            "module": "xeogl",
            "submodule": "math",
            "namespace": "xeogl.math"
        },
        {
            "file": "src/math/math.js",
            "line": 519,
            "description": "Divides a three-element vector by a scalar.",
            "itemtype": "method",
            "name": "divVec3Scalar",
            "static": 1,
            "params": [
                {
                    "name": "v",
                    "description": "vec3"
                },
                {
                    "name": "s",
                    "description": "scalar"
                },
                {
                    "name": "dest",
                    "description": "vec3 - optional destination"
                }
            ],
            "return": {
                "description": "[] dest if specified, v otherwise"
            },
            "class": "xeogl.math.math",
            "module": "xeogl",
            "submodule": "math",
            "namespace": "xeogl.math"
        },
        {
            "file": "src/math/math.js",
            "line": 538,
            "description": "Divides a four-element vector by a scalar.",
            "itemtype": "method",
            "name": "divVec4Scalar",
            "static": 1,
            "params": [
                {
                    "name": "v",
                    "description": "vec4"
                },
                {
                    "name": "s",
                    "description": "scalar"
                },
                {
                    "name": "dest",
                    "description": "vec4 - optional destination"
                }
            ],
            "return": {
                "description": "[] dest if specified, v otherwise"
            },
            "class": "xeogl.math.math",
            "module": "xeogl",
            "submodule": "math",
            "namespace": "xeogl.math"
        },
        {
            "file": "src/math/math.js",
            "line": 559,
            "description": "Divides a scalar by a four-element vector, returning a new vector.",
            "itemtype": "method",
            "name": "divScalarVec4",
            "static": 1,
            "params": [
                {
                    "name": "s",
                    "description": "scalar"
                },
                {
                    "name": "v",
                    "description": "vec4"
                },
                {
                    "name": "dest",
                    "description": "vec4 - optional destination"
                }
            ],
            "return": {
                "description": "[] dest if specified, v otherwise"
            },
            "class": "xeogl.math.math",
            "module": "xeogl",
            "submodule": "math",
            "namespace": "xeogl.math"
        },
        {
            "file": "src/math/math.js",
            "line": 579,
            "description": "Returns the dot product of two four-element vectors.",
            "itemtype": "method",
            "name": "dotVec4",
            "static": 1,
            "params": [
                {
                    "name": "u",
                    "description": "First vector",
                    "type": "Array(Number)"
                },
                {
                    "name": "v",
                    "description": "Second vector",
                    "type": "Array(Number)"
                }
            ],
            "return": {
                "description": "The dot product"
            },
            "class": "xeogl.math.math",
            "module": "xeogl",
            "submodule": "math",
            "namespace": "xeogl.math"
        },
        {
            "file": "src/math/math.js",
            "line": 591,
            "description": "Returns the cross product of two four-element vectors.",
            "itemtype": "method",
            "name": "cross3Vec4",
            "static": 1,
            "params": [
                {
                    "name": "u",
                    "description": "First vector",
                    "type": "Array(Number)"
                },
                {
                    "name": "v",
                    "description": "Second vector",
                    "type": "Array(Number)"
                }
            ],
            "return": {
                "description": "The cross product"
            },
            "class": "xeogl.math.math",
            "module": "xeogl",
            "submodule": "math",
            "namespace": "xeogl.math"
        },
        {
            "file": "src/math/math.js",
            "line": 609,
            "description": "Returns the cross product of two three-element vectors.",
            "itemtype": "method",
            "name": "cross3Vec3",
            "static": 1,
            "params": [
                {
                    "name": "u",
                    "description": "First vector",
                    "type": "Array(Number)"
                },
                {
                    "name": "v",
                    "description": "Second vector",
                    "type": "Array(Number)"
                }
            ],
            "return": {
                "description": "The cross product"
            },
            "class": "xeogl.math.math",
            "module": "xeogl",
            "submodule": "math",
            "namespace": "xeogl.math"
        },
        {
            "file": "src/math/math.js",
            "line": 634,
            "description": "Returns the length of a four-element vector.",
            "itemtype": "method",
            "name": "lenVec4",
            "static": 1,
            "params": [
                {
                    "name": "v",
                    "description": "The vector",
                    "type": "Array(Number)"
                }
            ],
            "return": {
                "description": "The length"
            },
            "class": "xeogl.math.math",
            "module": "xeogl",
            "submodule": "math",
            "namespace": "xeogl.math"
        },
        {
            "file": "src/math/math.js",
            "line": 645,
            "description": "Returns the dot product of two three-element vectors.",
            "itemtype": "method",
            "name": "dotVec4",
            "static": 1,
            "params": [
                {
                    "name": "u",
                    "description": "First vector",
                    "type": "Array(Number)"
                },
                {
                    "name": "v",
                    "description": "Second vector",
                    "type": "Array(Number)"
                }
            ],
            "return": {
                "description": "The dot product"
            },
            "class": "xeogl.math.math",
            "module": "xeogl",
            "submodule": "math",
            "namespace": "xeogl.math"
        },
        {
            "file": "src/math/math.js",
            "line": 657,
            "description": "Returns the dot product of two two-element vectors.",
            "itemtype": "method",
            "name": "dotVec4",
            "static": 1,
            "params": [
                {
                    "name": "u",
                    "description": "First vector",
                    "type": "Array(Number)"
                },
                {
                    "name": "v",
                    "description": "Second vector",
                    "type": "Array(Number)"
                }
            ],
            "return": {
                "description": "The dot product"
            },
            "class": "xeogl.math.math",
            "module": "xeogl",
            "submodule": "math",
            "namespace": "xeogl.math"
        },
        {
            "file": "src/math/math.js",
            "line": 679,
            "description": "Returns the length of a three-element vector.",
            "itemtype": "method",
            "name": "lenVec3",
            "static": 1,
            "params": [
                {
                    "name": "v",
                    "description": "The vector",
                    "type": "Array(Number)"
                }
            ],
            "return": {
                "description": "The length"
            },
            "class": "xeogl.math.math",
            "module": "xeogl",
            "submodule": "math",
            "namespace": "xeogl.math"
        },
        {
            "file": "src/math/math.js",
            "line": 690,
            "description": "Returns the length of a two-element vector.",
            "itemtype": "method",
            "name": "lenVec2",
            "static": 1,
            "params": [
                {
                    "name": "v",
                    "description": "The vector",
                    "type": "Array(Number)"
                }
            ],
            "return": {
                "description": "The length"
            },
            "class": "xeogl.math.math",
            "module": "xeogl",
            "submodule": "math",
            "namespace": "xeogl.math"
        },
        {
            "file": "src/math/math.js",
            "line": 708,
            "itemtype": "method",
            "name": "rcpVec3",
            "static": 1,
            "params": [
                {
                    "name": "v",
                    "description": "vec3"
                },
                {
                    "name": "dest",
                    "description": "vec3 - optional destination"
                }
            ],
            "return": {
                "description": "[] dest if specified, v otherwise"
            },
            "class": "xeogl.math.math",
            "module": "xeogl",
            "submodule": "math",
            "namespace": "xeogl.math"
        },
        {
            "file": "src/math/math.js",
            "line": 720,
            "description": "Normalizes a four-element vector",
            "itemtype": "method",
            "name": "normalizeVec4",
            "static": 1,
            "params": [
                {
                    "name": "v",
                    "description": "vec4"
                },
                {
                    "name": "dest",
                    "description": "vec4 - optional destination"
                }
            ],
            "return": {
                "description": "[] dest if specified, v otherwise"
            },
            "class": "xeogl.math.math",
            "module": "xeogl",
            "submodule": "math",
            "namespace": "xeogl.math"
        },
        {
            "file": "src/math/math.js",
            "line": 734,
            "description": "Normalizes a three-element vector",
            "itemtype": "method",
            "name": "normalizeVec4",
            "static": 1,
            "class": "xeogl.math.math",
            "module": "xeogl",
            "submodule": "math",
            "namespace": "xeogl.math"
        },
        {
            "file": "src/math/math.js",
            "line": 744,
            "description": "Normalizes a two-element vector",
            "itemtype": "method",
            "name": "normalizeVec2",
            "static": 1,
            "class": "xeogl.math.math",
            "module": "xeogl",
            "submodule": "math",
            "namespace": "xeogl.math"
        },
        {
            "file": "src/math/math.js",
            "line": 754,
            "description": "Gets the angle between two vectors",
            "itemtype": "method",
            "name": "angleVec3",
            "params": [
                {
                    "name": "v",
                    "description": ""
                },
                {
                    "name": "w",
                    "description": ""
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "xeogl.math.math",
            "module": "xeogl",
            "submodule": "math",
            "namespace": "xeogl.math"
        },
        {
            "file": "src/math/math.js",
            "line": 767,
            "description": "Creates a three-element vector from the rotation part of a sixteen-element matrix.",
            "params": [
                {
                    "name": "m",
                    "description": ""
                },
                {
                    "name": "dest",
                    "description": ""
                }
            ],
            "class": "xeogl.math.math",
            "module": "xeogl",
            "submodule": "math",
            "namespace": "xeogl.math"
        },
        {
            "file": "src/math/math.js",
            "line": 800,
            "description": "Converts an n-element vector to a JSON-serializable\narray with values rounded to two decimal places.",
            "class": "xeogl.math.math",
            "module": "xeogl",
            "submodule": "math",
            "namespace": "xeogl.math"
        },
        {
            "file": "src/math/math.js",
            "line": 818,
            "description": "Duplicates a 4x4 identity matrix.",
            "itemtype": "method",
            "name": "dupMat4",
            "static": 1,
            "class": "xeogl.math.math",
            "module": "xeogl",
            "submodule": "math",
            "namespace": "xeogl.math"
        },
        {
            "file": "src/math/math.js",
            "line": 827,
            "description": "Extracts a 3x3 matrix from a 4x4 matrix.",
            "itemtype": "method",
            "name": "mat4To3",
            "static": 1,
            "class": "xeogl.math.math",
            "module": "xeogl",
            "submodule": "math",
            "namespace": "xeogl.math"
        },
        {
            "file": "src/math/math.js",
            "line": 840,
            "description": "Returns a 4x4 matrix with each element set to the given scalar value.",
            "itemtype": "method",
            "name": "m4s",
            "static": 1,
            "class": "xeogl.math.math",
            "module": "xeogl",
            "submodule": "math",
            "namespace": "xeogl.math"
        },
        {
            "file": "src/math/math.js",
            "line": 854,
            "description": "Returns a 4x4 matrix with each element set to zero.",
            "itemtype": "method",
            "name": "setMat4ToZeroes",
            "static": 1,
            "class": "xeogl.math.math",
            "module": "xeogl",
            "submodule": "math",
            "namespace": "xeogl.math"
        },
        {
            "file": "src/math/math.js",
            "line": 863,
            "description": "Returns a 4x4 matrix with each element set to 1.0.",
            "itemtype": "method",
            "name": "setMat4ToOnes",
            "static": 1,
            "class": "xeogl.math.math",
            "module": "xeogl",
            "submodule": "math",
            "namespace": "xeogl.math"
        },
        {
            "file": "src/math/math.js",
            "line": 872,
            "description": "Returns a 4x4 matrix with each element set to 1.0.",
            "itemtype": "method",
            "name": "setMat4ToOnes",
            "static": 1,
            "class": "xeogl.math.math",
            "module": "xeogl",
            "submodule": "math",
            "namespace": "xeogl.math"
        },
        {
            "file": "src/math/math.js",
            "line": 886,
            "description": "Returns a 4x4 matrix with diagonal elements set to the given vector.",
            "itemtype": "method",
            "name": "diagonalMat4c",
            "static": 1,
            "class": "xeogl.math.math",
            "module": "xeogl",
            "submodule": "math",
            "namespace": "xeogl.math"
        },
        {
            "file": "src/math/math.js",
            "line": 895,
            "description": "Returns a 4x4 matrix with diagonal elements set to the given scalar.",
            "itemtype": "method",
            "name": "diagonalMat4s",
            "static": 1,
            "class": "xeogl.math.math",
            "module": "xeogl",
            "submodule": "math",
            "namespace": "xeogl.math"
        },
        {
            "file": "src/math/math.js",
            "line": 904,
            "description": "Returns a 4x4 identity matrix.",
            "itemtype": "method",
            "name": "identityMat4",
            "static": 1,
            "class": "xeogl.math.math",
            "module": "xeogl",
            "submodule": "math",
            "namespace": "xeogl.math"
        },
        {
            "file": "src/math/math.js",
            "line": 936,
            "description": "Returns a 3x3 identity matrix.",
            "itemtype": "method",
            "name": "identityMat3",
            "static": 1,
            "class": "xeogl.math.math",
            "module": "xeogl",
            "submodule": "math",
            "namespace": "xeogl.math"
        },
        {
            "file": "src/math/math.js",
            "line": 960,
            "description": "Tests if the given 4x4 matrix is the identity matrix.",
            "itemtype": "method",
            "name": "isIdentityMat4",
            "static": 1,
            "class": "xeogl.math.math",
            "module": "xeogl",
            "submodule": "math",
            "namespace": "xeogl.math"
        },
        {
            "file": "src/math/math.js",
            "line": 975,
            "description": "Negates the given 4x4 matrix.",
            "itemtype": "method",
            "name": "negateMat4",
            "static": 1,
            "class": "xeogl.math.math",
            "module": "xeogl",
            "submodule": "math",
            "namespace": "xeogl.math"
        },
        {
            "file": "src/math/math.js",
            "line": 1003,
            "description": "Adds the given 4x4 matrices together.",
            "itemtype": "method",
            "name": "addMat4",
            "static": 1,
            "class": "xeogl.math.math",
            "module": "xeogl",
            "submodule": "math",
            "namespace": "xeogl.math"
        },
        {
            "file": "src/math/math.js",
            "line": 1031,
            "description": "Adds the given scalar to each element of the given 4x4 matrix.",
            "itemtype": "method",
            "name": "addMat4Scalar",
            "static": 1,
            "class": "xeogl.math.math",
            "module": "xeogl",
            "submodule": "math",
            "namespace": "xeogl.math"
        },
        {
            "file": "src/math/math.js",
            "line": 1059,
            "description": "Adds the given scalar to each element of the given 4x4 matrix.",
            "itemtype": "method",
            "name": "addScalarMat4",
            "static": 1,
            "class": "xeogl.math.math",
            "module": "xeogl",
            "submodule": "math",
            "namespace": "xeogl.math"
        },
        {
            "file": "src/math/math.js",
            "line": 1068,
            "description": "Subtracts the second 4x4 matrix from the first.",
            "itemtype": "method",
            "name": "subMat4",
            "static": 1,
            "class": "xeogl.math.math",
            "module": "xeogl",
            "submodule": "math",
            "namespace": "xeogl.math"
        },
        {
            "file": "src/math/math.js",
            "line": 1096,
            "description": "Subtracts the given scalar from each element of the given 4x4 matrix.",
            "itemtype": "method",
            "name": "subMat4Scalar",
            "static": 1,
            "class": "xeogl.math.math",
            "module": "xeogl",
            "submodule": "math",
            "namespace": "xeogl.math"
        },
        {
            "file": "src/math/math.js",
            "line": 1124,
            "description": "Subtracts the given scalar from each element of the given 4x4 matrix.",
            "itemtype": "method",
            "name": "subScalarMat4",
            "static": 1,
            "class": "xeogl.math.math",
            "module": "xeogl",
            "submodule": "math",
            "namespace": "xeogl.math"
        },
        {
            "file": "src/math/math.js",
            "line": 1152,
            "description": "Multiplies the two given 4x4 matrix by each other.",
            "itemtype": "method",
            "name": "mulMat4",
            "static": 1,
            "class": "xeogl.math.math",
            "module": "xeogl",
            "submodule": "math",
            "namespace": "xeogl.math"
        },
        {
            "file": "src/math/math.js",
            "line": 1193,
            "description": "Multiplies the two given 3x3 matrices by each other.",
            "itemtype": "method",
            "name": "mulMat4",
            "static": 1,
            "class": "xeogl.math.math",
            "module": "xeogl",
            "submodule": "math",
            "namespace": "xeogl.math"
        },
        {
            "file": "src/math/math.js",
            "line": 1227,
            "description": "Multiplies each element of the given 4x4 matrix by the given scalar.",
            "itemtype": "method",
            "name": "mulMat4Scalar",
            "static": 1,
            "class": "xeogl.math.math",
            "module": "xeogl",
            "submodule": "math",
            "namespace": "xeogl.math"
        },
        {
            "file": "src/math/math.js",
            "line": 1255,
            "description": "Multiplies the given 4x4 matrix by the given four-element vector.",
            "itemtype": "method",
            "name": "mulMat4v4",
            "static": 1,
            "class": "xeogl.math.math",
            "module": "xeogl",
            "submodule": "math",
            "namespace": "xeogl.math"
        },
        {
            "file": "src/math/math.js",
            "line": 1270,
            "description": "Transposes the given 4x4 matrix.",
            "itemtype": "method",
            "name": "transposeMat4",
            "static": 1,
            "class": "xeogl.math.math",
            "module": "xeogl",
            "submodule": "math",
            "namespace": "xeogl.math"
        },
        {
            "file": "src/math/math.js",
            "line": 1316,
            "description": "Returns the determinant of the given 4x4 matrix.",
            "itemtype": "method",
            "name": "determinantMat4",
            "static": 1,
            "class": "xeogl.math.math",
            "module": "xeogl",
            "submodule": "math",
            "namespace": "xeogl.math"
        },
        {
            "file": "src/math/math.js",
            "line": 1335,
            "description": "Returns the inverse of the given 4x4 matrix.",
            "itemtype": "method",
            "name": "inverseMat4",
            "static": 1,
            "class": "xeogl.math.math",
            "module": "xeogl",
            "submodule": "math",
            "namespace": "xeogl.math"
        },
        {
            "file": "src/math/math.js",
            "line": 1385,
            "description": "Returns the trace of the given 4x4 matrix.",
            "itemtype": "method",
            "name": "traceMat4",
            "static": 1,
            "class": "xeogl.math.math",
            "module": "xeogl",
            "submodule": "math",
            "namespace": "xeogl.math"
        },
        {
            "file": "src/math/math.js",
            "line": 1394,
            "description": "Returns 4x4 translation matrix.",
            "itemtype": "method",
            "name": "translationMat4",
            "static": 1,
            "class": "xeogl.math.math",
            "module": "xeogl",
            "submodule": "math",
            "namespace": "xeogl.math"
        },
        {
            "file": "src/math/math.js",
            "line": 1407,
            "description": "Returns 3x3 translation matrix.",
            "itemtype": "method",
            "name": "translationMat3",
            "static": 1,
            "class": "xeogl.math.math",
            "module": "xeogl",
            "submodule": "math",
            "namespace": "xeogl.math"
        },
        {
            "file": "src/math/math.js",
            "line": 1419,
            "description": "Returns 4x4 translation matrix.",
            "itemtype": "method",
            "name": "translationMat4c",
            "static": 1,
            "class": "xeogl.math.math",
            "module": "xeogl",
            "submodule": "math",
            "namespace": "xeogl.math"
        },
        {
            "file": "src/math/math.js",
            "line": 1434,
            "description": "Returns 4x4 translation matrix.",
            "itemtype": "method",
            "name": "translationMat4s",
            "static": 1,
            "class": "xeogl.math.math",
            "module": "xeogl",
            "submodule": "math",
            "namespace": "xeogl.math"
        },
        {
            "file": "src/math/math.js",
            "line": 1443,
            "description": "Efficiently post-concatenates a translation to the given matrix.",
            "params": [
                {
                    "name": "v",
                    "description": ""
                },
                {
                    "name": "m",
                    "description": ""
                }
            ],
            "class": "xeogl.math.math",
            "module": "xeogl",
            "submodule": "math",
            "namespace": "xeogl.math"
        },
        {
            "file": "src/math/math.js",
            "line": 1452,
            "description": "Efficiently post-concatenates a translation to the given matrix.",
            "params": [
                {
                    "name": "x",
                    "description": ""
                },
                {
                    "name": "y",
                    "description": ""
                },
                {
                    "name": "z",
                    "description": ""
                },
                {
                    "name": "m",
                    "description": ""
                }
            ],
            "class": "xeogl.math.math",
            "module": "xeogl",
            "submodule": "math",
            "namespace": "xeogl.math"
        },
        {
            "file": "src/math/math.js",
            "line": 1508,
            "description": "Returns 4x4 rotation matrix.",
            "itemtype": "method",
            "name": "rotationMat4v",
            "static": 1,
            "class": "xeogl.math.math",
            "module": "xeogl",
            "submodule": "math",
            "namespace": "xeogl.math"
        },
        {
            "file": "src/math/math.js",
            "line": 1560,
            "description": "Returns 4x4 rotation matrix.",
            "itemtype": "method",
            "name": "rotationMat4c",
            "static": 1,
            "class": "xeogl.math.math",
            "module": "xeogl",
            "submodule": "math",
            "namespace": "xeogl.math"
        },
        {
            "file": "src/math/math.js",
            "line": 1569,
            "description": "Returns 4x4 scale matrix.",
            "itemtype": "method",
            "name": "scalingMat4v",
            "static": 1,
            "class": "xeogl.math.math",
            "module": "xeogl",
            "submodule": "math",
            "namespace": "xeogl.math"
        },
        {
            "file": "src/math/math.js",
            "line": 1582,
            "description": "Returns 3x3 scale matrix.",
            "itemtype": "method",
            "name": "scalingMat3v",
            "static": 1,
            "class": "xeogl.math.math",
            "module": "xeogl",
            "submodule": "math",
            "namespace": "xeogl.math"
        },
        {
            "file": "src/math/math.js",
            "line": 1594,
            "description": "Returns 4x4 scale matrix.",
            "itemtype": "method",
            "name": "scalingMat4c",
            "static": 1,
            "class": "xeogl.math.math",
            "module": "xeogl",
            "submodule": "math",
            "namespace": "xeogl.math"
        },
        {
            "file": "src/math/math.js",
            "line": 1609,
            "description": "Efficiently post-concatenates a scaling to the given matrix.",
            "itemtype": "method",
            "name": "scaleMat4c",
            "params": [
                {
                    "name": "x",
                    "description": ""
                },
                {
                    "name": "y",
                    "description": ""
                },
                {
                    "name": "z",
                    "description": ""
                },
                {
                    "name": "m",
                    "description": ""
                }
            ],
            "class": "xeogl.math.math",
            "module": "xeogl",
            "submodule": "math",
            "namespace": "xeogl.math"
        },
        {
            "file": "src/math/math.js",
            "line": 1637,
            "description": "Efficiently post-concatenates a scaling to the given matrix.",
            "itemtype": "method",
            "name": "scaleMat4c",
            "params": [
                {
                    "name": "xyz",
                    "description": ""
                },
                {
                    "name": "m",
                    "description": ""
                }
            ],
            "class": "xeogl.math.math",
            "module": "xeogl",
            "submodule": "math",
            "namespace": "xeogl.math"
        },
        {
            "file": "src/math/math.js",
            "line": 1665,
            "description": "Returns 4x4 scale matrix.",
            "itemtype": "method",
            "name": "scalingMat4s",
            "static": 1,
            "class": "xeogl.math.math",
            "module": "xeogl",
            "submodule": "math",
            "namespace": "xeogl.math"
        },
        {
            "file": "src/math/math.js",
            "line": 1674,
            "description": "Creates a matrix from a quaternion rotation and vector translation",
            "params": [
                {
                    "name": "q",
                    "description": "Rotation quaternion",
                    "type": "Float32Array"
                },
                {
                    "name": "v",
                    "description": "Translation vector",
                    "type": "Float32Array"
                },
                {
                    "name": "dest",
                    "description": "Destination matrix",
                    "type": "Float32Array"
                }
            ],
            "return": {
                "description": "dest",
                "type": "Float32Array"
            },
            "class": "xeogl.math.math",
            "module": "xeogl",
            "submodule": "math",
            "namespace": "xeogl.math"
        },
        {
            "file": "src/math/math.js",
            "line": 1724,
            "description": "Gets Euler angles from a 4x4 matrix.",
            "params": [
                {
                    "name": "mat",
                    "description": "The 4x4 matrix.",
                    "type": "Float32Array"
                },
                {
                    "name": "order",
                    "description": "Desired Euler angle order: \"XYZ\", \"YXZ\", \"ZXY\" etc.",
                    "type": "String"
                },
                {
                    "name": "dest",
                    "description": "Destination Euler angles, created by default.",
                    "type": "Float32Array",
                    "optional": true
                }
            ],
            "return": {
                "description": "The Euler angles.",
                "type": "Float32Array"
            },
            "class": "xeogl.math.math",
            "module": "xeogl",
            "submodule": "math",
            "namespace": "xeogl.math"
        },
        {
            "file": "src/math/math.js",
            "line": 1821,
            "description": "Returns a 4x4 'lookat' viewing transform matrix.",
            "itemtype": "method",
            "name": "lookAtMat4v",
            "params": [
                {
                    "name": "pos",
                    "description": "vec3 position of the viewer"
                },
                {
                    "name": "target",
                    "description": "vec3 point the viewer is looking at"
                },
                {
                    "name": "up",
                    "description": "vec3 pointing \"up\""
                },
                {
                    "name": "dest",
                    "description": "mat4 Optional, mat4 matrix will be written into"
                }
            ],
            "return": {
                "description": "dest if specified, a new mat4 otherwise",
                "type": "Mat4"
            },
            "class": "xeogl.math.math",
            "module": "xeogl",
            "submodule": "math",
            "namespace": "xeogl.math"
        },
        {
            "file": "src/math/math.js",
            "line": 1916,
            "description": "Returns a 4x4 'lookat' viewing transform matrix.",
            "itemtype": "method",
            "name": "lookAtMat4c",
            "static": 1,
            "class": "xeogl.math.math",
            "module": "xeogl",
            "submodule": "math",
            "namespace": "xeogl.math"
        },
        {
            "file": "src/math/math.js",
            "line": 1925,
            "description": "Returns a 4x4 orthographic projection matrix.",
            "itemtype": "method",
            "name": "orthoMat4c",
            "static": 1,
            "class": "xeogl.math.math",
            "module": "xeogl",
            "submodule": "math",
            "namespace": "xeogl.math"
        },
        {
            "file": "src/math/math.js",
            "line": 1961,
            "description": "Returns a 4x4 perspective projection matrix.",
            "itemtype": "method",
            "name": "frustumMat4v",
            "static": 1,
            "class": "xeogl.math.math",
            "module": "xeogl",
            "submodule": "math",
            "namespace": "xeogl.math"
        },
        {
            "file": "src/math/math.js",
            "line": 2005,
            "description": "Returns a 4x4 perspective projection matrix.",
            "itemtype": "method",
            "name": "frustumMat4v",
            "static": 1,
            "class": "xeogl.math.math",
            "module": "xeogl",
            "submodule": "math",
            "namespace": "xeogl.math"
        },
        {
            "file": "src/math/math.js",
            "line": 2036,
            "description": "Returns a 4x4 perspective projection matrix.",
            "itemtype": "method",
            "name": "perspectiveMat4v",
            "static": 1,
            "class": "xeogl.math.math",
            "module": "xeogl",
            "submodule": "math",
            "namespace": "xeogl.math"
        },
        {
            "file": "src/math/math.js",
            "line": 2057,
            "description": "Transforms a three-element position by a 4x4 matrix.",
            "itemtype": "method",
            "name": "transformPoint3",
            "static": 1,
            "class": "xeogl.math.math",
            "module": "xeogl",
            "submodule": "math",
            "namespace": "xeogl.math"
        },
        {
            "file": "src/math/math.js",
            "line": 2073,
            "description": "Transforms a homogeneous coordinate by a 4x4 matrix.",
            "itemtype": "method",
            "name": "transformPoint3",
            "static": 1,
            "class": "xeogl.math.math",
            "module": "xeogl",
            "submodule": "math",
            "namespace": "xeogl.math"
        },
        {
            "file": "src/math/math.js",
            "line": 2091,
            "description": "Transforms an array of three-element positions by a 4x4 matrix.",
            "itemtype": "method",
            "name": "transformPoints3",
            "static": 1,
            "class": "xeogl.math.math",
            "module": "xeogl",
            "submodule": "math",
            "namespace": "xeogl.math"
        },
        {
            "file": "src/math/math.js",
            "line": 2132,
            "description": "Transforms an array of positions by a 4x4 matrix.",
            "itemtype": "method",
            "name": "transformPositions3",
            "static": 1,
            "class": "xeogl.math.math",
            "module": "xeogl",
            "submodule": "math",
            "namespace": "xeogl.math"
        },
        {
            "file": "src/math/math.js",
            "line": 2180,
            "description": "Transforms an array of positions by a 4x4 matrix.",
            "itemtype": "method",
            "name": "transformPositions4",
            "static": 1,
            "class": "xeogl.math.math",
            "module": "xeogl",
            "submodule": "math",
            "namespace": "xeogl.math"
        },
        {
            "file": "src/math/math.js",
            "line": 2228,
            "description": "Transforms a three-element vector by a 4x4 matrix.",
            "itemtype": "method",
            "name": "transformVec3",
            "static": 1,
            "class": "xeogl.math.math",
            "module": "xeogl",
            "submodule": "math",
            "namespace": "xeogl.math"
        },
        {
            "file": "src/math/math.js",
            "line": 2242,
            "description": "Transforms a four-element vector by a 4x4 matrix.",
            "itemtype": "method",
            "name": "transformVec4",
            "static": 1,
            "class": "xeogl.math.math",
            "module": "xeogl",
            "submodule": "math",
            "namespace": "xeogl.math"
        },
        {
            "file": "src/math/math.js",
            "line": 2257,
            "description": "Rotate a 3D vector around the x-axis",
            "itemtype": "method",
            "name": "rotateVec3X",
            "params": [
                {
                    "name": "a",
                    "description": "The vec3 point to rotate",
                    "type": "Float32Array"
                },
                {
                    "name": "b",
                    "description": "The origin of the rotation",
                    "type": "Float32Array"
                },
                {
                    "name": "c",
                    "description": "The angle of rotation",
                    "type": "Number"
                },
                {
                    "name": "dest",
                    "description": "The receiving vec3",
                    "type": "Float32Array"
                }
            ],
            "return": {
                "description": "dest",
                "type": "Float32Array"
            },
            "static": 1,
            "class": "xeogl.math.math",
            "module": "xeogl",
            "submodule": "math",
            "namespace": "xeogl.math"
        },
        {
            "file": "src/math/math.js",
            "line": 2290,
            "description": "Rotate a 3D vector around the y-axis",
            "itemtype": "method",
            "name": "rotateVec3Y",
            "params": [
                {
                    "name": "a",
                    "description": "The vec3 point to rotate",
                    "type": "Float32Array"
                },
                {
                    "name": "b",
                    "description": "The origin of the rotation",
                    "type": "Float32Array"
                },
                {
                    "name": "c",
                    "description": "The angle of rotation",
                    "type": "Number"
                },
                {
                    "name": "dest",
                    "description": "The receiving vec3",
                    "type": "Float32Array"
                }
            ],
            "return": {
                "description": "dest",
                "type": "Float32Array"
            },
            "static": 1,
            "class": "xeogl.math.math",
            "module": "xeogl",
            "submodule": "math",
            "namespace": "xeogl.math"
        },
        {
            "file": "src/math/math.js",
            "line": 2323,
            "description": "Rotate a 3D vector around the z-axis",
            "itemtype": "method",
            "name": "rotateVec3Z",
            "params": [
                {
                    "name": "a",
                    "description": "The vec3 point to rotate",
                    "type": "Float32Array"
                },
                {
                    "name": "b",
                    "description": "The origin of the rotation",
                    "type": "Float32Array"
                },
                {
                    "name": "c",
                    "description": "The angle of rotation",
                    "type": "Number"
                },
                {
                    "name": "dest",
                    "description": "The receiving vec3",
                    "type": "Float32Array"
                }
            ],
            "return": {
                "description": "dest",
                "type": "Float32Array"
            },
            "static": 1,
            "class": "xeogl.math.math",
            "module": "xeogl",
            "submodule": "math",
            "namespace": "xeogl.math"
        },
        {
            "file": "src/math/math.js",
            "line": 2356,
            "description": "Transforms a four-element vector by a 4x4 projection matrix.",
            "itemtype": "method",
            "name": "projectVec4",
            "params": [
                {
                    "name": "p",
                    "description": "3D View-space coordinate",
                    "type": "Float32Array"
                },
                {
                    "name": "q",
                    "description": "2D Projected coordinate",
                    "type": "Float32Array"
                }
            ],
            "return": {
                "description": "2D Projected coordinate",
                "type": "Float32Array"
            },
            "static": 1,
            "class": "xeogl.math.math",
            "module": "xeogl",
            "submodule": "math",
            "namespace": "xeogl.math"
        },
        {
            "file": "src/math/math.js",
            "line": 2373,
            "description": "Unprojects a three-element vector.",
            "itemtype": "method",
            "name": "unprojectVec3",
            "params": [
                {
                    "name": "p",
                    "description": "3D Projected coordinate",
                    "type": "Float32Array"
                },
                {
                    "name": "viewMat",
                    "description": "View matrix",
                    "type": "Float32Array"
                }
            ],
            "return": {
                "description": "projMat Projection matrix",
                "type": "Float32Array"
            },
            "static": 1,
            "class": "xeogl.math.math",
            "module": "xeogl",
            "submodule": "math",
            "namespace": "xeogl.math"
        },
        {
            "file": "src/math/math.js",
            "line": 2391,
            "description": "Linearly interpolates between two 3D vectors.",
            "itemtype": "method",
            "name": "lerpVec3",
            "static": 1,
            "class": "xeogl.math.math",
            "module": "xeogl",
            "submodule": "math",
            "namespace": "xeogl.math"
        },
        {
            "file": "src/math/math.js",
            "line": 2406,
            "description": "Flattens a two-dimensional array into a one-dimensional array.",
            "itemtype": "method",
            "name": "flatten",
            "static": 1,
            "params": [
                {
                    "name": "a",
                    "description": "A 2D array",
                    "type": "Array of Arrays"
                }
            ],
            "return": {
                "description": "Flattened 1D array"
            },
            "class": "xeogl.math.math",
            "module": "xeogl",
            "submodule": "math",
            "namespace": "xeogl.math"
        },
        {
            "file": "src/math/math.js",
            "line": 2444,
            "description": "Initializes a quaternion from Euler angles.",
            "params": [
                {
                    "name": "euler",
                    "description": "The Euler angles.",
                    "type": "Float32Array"
                },
                {
                    "name": "order",
                    "description": "Euler angle order: \"XYZ\", \"YXZ\", \"ZXY\" etc.",
                    "type": "String"
                },
                {
                    "name": "dest",
                    "description": "Destination quaternion, created by default.",
                    "type": "Float32Array",
                    "optional": true
                }
            ],
            "return": {
                "description": "The quaternion.",
                "type": "Float32Array"
            },
            "class": "xeogl.math.math",
            "module": "xeogl",
            "submodule": "math",
            "namespace": "xeogl.math"
        },
        {
            "file": "src/math/mathBoundaries.js",
            "line": 1,
            "description": "Boundary math functions.",
            "class": "Model",
            "module": "xeogl",
            "namespace": "xeogl.math"
        },
        {
            "file": "src/math/mathBoundaries.js",
            "line": 10,
            "description": "Returns a new, uninitialized 3D axis-aligned bounding box.",
            "access": "private",
            "tagname": "",
            "class": "Model",
            "module": "xeogl",
            "namespace": "xeogl.math"
        },
        {
            "file": "src/math/mathBoundaries.js",
            "line": 19,
            "description": "Returns a new, uninitialized 2D axis-aligned bounding box.",
            "access": "private",
            "tagname": "",
            "class": "Model",
            "module": "xeogl",
            "namespace": "xeogl.math"
        },
        {
            "file": "src/math/mathBoundaries.js",
            "line": 28,
            "description": "Returns a new, uninitialized 3D oriented bounding box (OBB).",
            "access": "private",
            "tagname": "",
            "class": "Model",
            "module": "xeogl",
            "namespace": "xeogl.math"
        },
        {
            "file": "src/math/mathBoundaries.js",
            "line": 37,
            "description": "Returns a new, uninitialized 2D oriented bounding box (OBB).",
            "access": "private",
            "tagname": "",
            "class": "Model",
            "module": "xeogl",
            "namespace": "xeogl.math"
        },
        {
            "file": "src/math/mathBoundaries.js",
            "line": 47,
            "description": "Transforms an OBB3 by a 4x4 matrix.",
            "access": "private",
            "tagname": "",
            "class": "Model",
            "module": "xeogl",
            "namespace": "xeogl.math"
        },
        {
            "file": "src/math/mathBoundaries.js",
            "line": 95,
            "description": "Gets the diagonal size of an AABB3 given as minima and maxima.",
            "access": "private",
            "tagname": "",
            "class": "Model",
            "module": "xeogl",
            "namespace": "xeogl.math"
        },
        {
            "file": "src/math/mathBoundaries.js",
            "line": 122,
            "description": "Get a diagonal boundary size that is symmetrical about the given point.",
            "access": "private",
            "tagname": "",
            "class": "Model",
            "module": "xeogl",
            "namespace": "xeogl.math"
        },
        {
            "file": "src/math/mathBoundaries.js",
            "line": 160,
            "description": "Gets the center of an AABB.",
            "access": "private",
            "tagname": "",
            "class": "Model",
            "module": "xeogl",
            "namespace": "xeogl.math"
        },
        {
            "file": "src/math/mathBoundaries.js",
            "line": 175,
            "description": "Gets the center of a 2D AABB.",
            "access": "private",
            "tagname": "",
            "class": "Model",
            "module": "xeogl",
            "namespace": "xeogl.math"
        },
        {
            "file": "src/math/mathBoundaries.js",
            "line": 189,
            "description": "Collapses a 3D axis-aligned boundary, ready to expand to fit 3D points.\nCreates new AABB if none supplied.",
            "access": "private",
            "tagname": "",
            "class": "Model",
            "module": "xeogl",
            "namespace": "xeogl.math"
        },
        {
            "file": "src/math/mathBoundaries.js",
            "line": 209,
            "description": "Converts an axis-aligned 3D boundary into an oriented boundary consisting of\nan array of eight 3D positions, one for each corner of the boundary.",
            "access": "private",
            "tagname": "",
            "class": "Model",
            "module": "xeogl",
            "namespace": "xeogl.math"
        },
        {
            "file": "src/math/mathBoundaries.js",
            "line": 262,
            "description": "Finds the minimum axis-aligned 3D boundary enclosing the homogeneous 3D points (x,y,z,w) given in a flattened array.",
            "access": "private",
            "tagname": "",
            "class": "Model",
            "module": "xeogl",
            "namespace": "xeogl.math"
        },
        {
            "file": "src/math/mathBoundaries.js",
            "line": 340,
            "description": "Finds the minimum axis-aligned 3D boundary enclosing the homogeneous 3D points (x,y,z,w) given in a flattened array.",
            "access": "private",
            "tagname": "",
            "class": "Model",
            "module": "xeogl",
            "namespace": "xeogl.math"
        },
        {
            "file": "src/math/mathBoundaries.js",
            "line": 399,
            "description": "Finds the minimum axis-aligned 3D boundary enclosing the given 3D points.",
            "access": "private",
            "tagname": "",
            "class": "Model",
            "module": "xeogl",
            "namespace": "xeogl.math"
        },
        {
            "file": "src/math/mathBoundaries.js",
            "line": 458,
            "description": "Finds the minimum boundary sphere enclosing the given 3D points.",
            "access": "private",
            "tagname": "",
            "class": "Model",
            "module": "xeogl",
            "namespace": "xeogl.math"
        },
        {
            "file": "src/math/mathBoundaries.js",
            "line": 506,
            "description": "Finds the minimum boundary sphere enclosing the given 3D points.",
            "access": "private",
            "tagname": "",
            "class": "Model",
            "module": "xeogl",
            "namespace": "xeogl.math"
        },
        {
            "file": "src/math/mathBoundaries.js",
            "line": 560,
            "description": "Gets the center of a bounding sphere.",
            "access": "private",
            "tagname": "",
            "class": "Model",
            "module": "xeogl",
            "namespace": "xeogl.math"
        },
        {
            "file": "src/math/mathBoundaries.js",
            "line": 575,
            "description": "Expands the first axis-aligned 3D boundary to enclose the second, if required.",
            "access": "private",
            "tagname": "",
            "class": "Model",
            "module": "xeogl",
            "namespace": "xeogl.math"
        },
        {
            "file": "src/math/mathBoundaries.js",
            "line": 609,
            "description": "Expands an axis-aligned 3D boundary to enclose the given point, if needed.",
            "access": "private",
            "tagname": "",
            "class": "Model",
            "module": "xeogl",
            "namespace": "xeogl.math"
        },
        {
            "file": "src/math/mathBoundaries.js",
            "line": 643,
            "description": "Collapses a 2D axis-aligned boundary, ready to expand to fit 2D points.\nCreates new AABB if none supplied.",
            "access": "private",
            "tagname": "",
            "class": "Model",
            "module": "xeogl",
            "namespace": "xeogl.math"
        },
        {
            "file": "src/math/mathBoundaries.js",
            "line": 661,
            "description": "Finds the minimum 2D projected axis-aligned boundary enclosing the given 3D points.",
            "access": "private",
            "tagname": "",
            "class": "Model",
            "module": "xeogl",
            "namespace": "xeogl.math"
        },
        {
            "file": "src/math/mathBoundaries.js",
            "line": 716,
            "description": "Expands the first axis-aligned 2D boundary to enclose the second, if required.",
            "access": "private",
            "tagname": "",
            "class": "Model",
            "module": "xeogl",
            "namespace": "xeogl.math"
        },
        {
            "file": "src/math/mathBoundaries.js",
            "line": 742,
            "description": "Expands an axis-aligned 2D boundary to enclose the given point, if required.",
            "access": "private",
            "tagname": "",
            "class": "Model",
            "module": "xeogl",
            "namespace": "xeogl.math"
        },
        {
            "file": "src/math/mathCurves.js",
            "line": 1,
            "description": "Curve math functions.",
            "class": "Model",
            "module": "xeogl",
            "namespace": "xeogl.math"
        },
        {
            "file": "src/math/mathGeometry.js",
            "line": 1,
            "description": "Geometry math functions.",
            "class": "Model",
            "module": "xeogl",
            "namespace": "xeogl.math"
        },
        {
            "file": "src/math/mathGeometry.js",
            "line": 10,
            "description": "Calculates the normal vector of a triangle.",
            "access": "private",
            "tagname": "",
            "class": "Model",
            "module": "xeogl",
            "namespace": "xeogl.math"
        },
        {
            "file": "src/math/mathGeometry.js",
            "line": 45,
            "description": "Finds the intersection of a 3D ray with a 3D triangle.",
            "access": "private",
            "tagname": "",
            "class": "Model",
            "module": "xeogl",
            "namespace": "xeogl.math"
        },
        {
            "file": "src/math/mathGeometry.js",
            "line": 94,
            "description": "Finds the intersection of a 3D ray with a plane defined by 3 points.",
            "access": "private",
            "tagname": "",
            "class": "Model",
            "module": "xeogl",
            "namespace": "xeogl.math"
        },
        {
            "file": "src/math/mathGeometry.js",
            "line": 130,
            "description": "Gets barycentric coordinates from cartesian coordinates within a triangle.\nGets barycentric coordinates from cartesian coordinates within a triangle.",
            "access": "private",
            "tagname": "",
            "class": "Model",
            "module": "xeogl",
            "namespace": "xeogl.math"
        },
        {
            "file": "src/math/mathGeometry.js",
            "line": 178,
            "description": "Returns true if the given barycentric coordinates are within their triangle.",
            "access": "private",
            "tagname": "",
            "class": "Model",
            "module": "xeogl",
            "namespace": "xeogl.math"
        },
        {
            "file": "src/math/mathGeometry.js",
            "line": 191,
            "description": "Gets cartesian coordinates from barycentric coordinates within a triangle.",
            "access": "private",
            "tagname": "",
            "class": "Model",
            "module": "xeogl",
            "namespace": "xeogl.math"
        },
        {
            "file": "src/math/mathGeometryBuild.js",
            "line": 1,
            "description": "Boundary math functions.",
            "class": "Model",
            "module": "xeogl",
            "namespace": "xeogl.math"
        },
        {
            "file": "src/math/mathGeometryBuild.js",
            "line": 10,
            "description": "Builds normal vectors from positions and indices.",
            "access": "private",
            "tagname": "",
            "class": "Model",
            "module": "xeogl",
            "namespace": "xeogl.math"
        },
        {
            "file": "src/math/mathGeometryBuild.js",
            "line": 103,
            "description": "Builds vertex tangent vectors from positions, UVs and indices.",
            "access": "private",
            "tagname": "",
            "class": "Model",
            "module": "xeogl",
            "namespace": "xeogl.math"
        },
        {
            "file": "src/math/mathGeometryBuild.js",
            "line": 178,
            "description": "Builds vertex and index arrays needed by color-indexed triangle picking.",
            "access": "private",
            "tagname": "",
            "class": "Model",
            "module": "xeogl",
            "namespace": "xeogl.math"
        },
        {
            "file": "src/math/mathGeometryBuild.js",
            "line": 263,
            "description": "Removes duplicate vertices from a triangle mesh.",
            "return": {
                "description": "}",
                "type": "Positions: Array, uv: *, normals: *,indices: *"
            },
            "class": "Model",
            "module": "xeogl",
            "namespace": "xeogl.math"
        },
        {
            "file": "src/math/mathGeometryBuild.js",
            "line": 361,
            "description": "Converts surface-perpendicular face normals to vertex normals. Assumes that the mesh contains disjoint triangles\nthat don't share vertex array elements. Works by finding groups of vertices that have the same location and\naveraging their normal vectors.",
            "return": {
                "description": "}",
                "type": "Positions: Array, normals: *"
            },
            "class": "Model",
            "module": "xeogl",
            "namespace": "xeogl.math"
        },
        {
            "file": "src/math/mathKDTree.js",
            "line": 1,
            "description": "KD-tree functions",
            "class": "Model",
            "module": "xeogl",
            "namespace": "xeogl.math"
        },
        {
            "file": "src/math/mathKDTree.js",
            "line": 13,
            "description": "Returns a KD-tree that contains the triangles of the given mesh",
            "access": "private",
            "tagname": "",
            "class": "Model",
            "module": "xeogl",
            "namespace": "xeogl.math"
        },
        {
            "file": "src/math/mathRays.js",
            "line": 1,
            "description": "Ray casting support functions.",
            "class": "Model",
            "module": "xeogl",
            "namespace": "xeogl.math"
        },
        {
            "file": "src/math/mathRays.js",
            "line": 10,
            "description": "Transforms a Canvas-space position into a World-space ray, in the context of a Camera.",
            "itemtype": "method",
            "name": "canvasPosToWorldRay",
            "static": 1,
            "params": [
                {
                    "name": "camera",
                    "description": "The Camera.",
                    "type": "Camera"
                },
                {
                    "name": "canvasPos",
                    "description": "The Canvas-space position.",
                    "type": "Float32Array"
                },
                {
                    "name": "worldRayOrigin",
                    "description": "The World-space ray origin.",
                    "type": "Float32Array"
                },
                {
                    "name": "worldRayDir",
                    "description": "The World-space ray direction.",
                    "type": "Float32Array"
                }
            ],
            "class": "Model",
            "module": "xeogl",
            "namespace": "xeogl.math"
        },
        {
            "file": "src/math/mathRays.js",
            "line": 73,
            "description": "Transforms a Canvas-space position to an Entity's Local-space coordinate system, in the context of a Camera.",
            "itemtype": "method",
            "name": "canvasPosToLocalRay",
            "static": 1,
            "params": [
                {
                    "name": "camera",
                    "description": "The Camera.",
                    "type": "Camera"
                },
                {
                    "name": "entity",
                    "description": "The Entity.",
                    "type": "Entity"
                },
                {
                    "name": "canvasPos",
                    "description": "The Canvas-space position.",
                    "type": "Float32Array"
                },
                {
                    "name": "localRayOrigin",
                    "description": "The Local-space ray origin.",
                    "type": "Float32Array"
                },
                {
                    "name": "localRayDir",
                    "description": "The Local-space ray direction.",
                    "type": "Float32Array"
                }
            ],
            "class": "Model",
            "module": "xeogl",
            "namespace": "xeogl.math"
        },
        {
            "file": "src/math/mathRays.js",
            "line": 94,
            "description": "Transforms a ray from World-space to an Entity's Local-space coordinate system.",
            "itemtype": "method",
            "name": "worldRayToLocalRay",
            "static": 1,
            "params": [
                {
                    "name": "entity",
                    "description": "The Entity.",
                    "type": "Entity"
                },
                {
                    "name": "worldRayOrigin",
                    "description": "The World-space ray origin.",
                    "type": "Float32Array"
                },
                {
                    "name": "worldRayDir",
                    "description": "The World-space ray direction.",
                    "type": "Float32Array"
                },
                {
                    "name": "localRayOrigin",
                    "description": "The Local-space ray origin.",
                    "type": "Float32Array"
                },
                {
                    "name": "localRayDir",
                    "description": "The Local-space ray direction.",
                    "type": "Float32Array"
                }
            ],
            "class": "Model",
            "module": "xeogl",
            "namespace": "xeogl.math"
        },
        {
            "file": "src/models/model.js",
            "line": 283,
            "description": "JavaScript class name for this Component.",
            "itemtype": "property",
            "name": "type",
            "type": "String",
            "final": 1,
            "class": "Model",
            "module": "xeogl",
            "submodule": "models"
        },
        {
            "file": "src/models/model.js",
            "line": 294,
            "description": "The {{#crossLink \"Components\"}}{{/crossLink}} within this Model, mapped to their IDs.\n\nFires an {{#crossLink \"Model/updated:event\"}}{{/crossLink}} event on change.",
            "itemtype": "property",
            "name": "components",
            "type": "{{String:Component}}",
            "class": "Model",
            "module": "xeogl",
            "submodule": "models"
        },
        {
            "file": "src/models/model.js",
            "line": 304,
            "description": "The number of {{#crossLink \"Components\"}}{{/crossLink}} within this Model.",
            "itemtype": "property",
            "name": "numComponents",
            "type": "Number",
            "class": "Model",
            "module": "xeogl",
            "submodule": "models"
        },
        {
            "file": "src/models/model.js",
            "line": 312,
            "description": "A map of maps; for each {{#crossLink \"Component\"}}{{/crossLink}} type in this Model,\na map to IDs to {{#crossLink \"Component\"}}{{/crossLink}} instances, eg.\n\n````\n\"xeogl.Geometry\": {\n  \"alpha\": <xeogl.Geometry>,\n  \"beta\": <xeogl.Geometry>\n},\n\"xeogl.Rotate\": {\n  \"charlie\": <xeogl.Rotate>,\n  \"delta\": <xeogl.Rotate>,\n  \"echo\": <xeogl.Rotate>,\n},\n//...\n````",
            "itemtype": "property",
            "name": "types",
            "type": "{String:{String:xeogl.Component}}",
            "class": "Model",
            "module": "xeogl",
            "submodule": "models"
        },
        {
            "file": "src/models/model.js",
            "line": 334,
            "description": "The {{#crossLink \"Entity\"}}Entity{{/crossLink}} component instances within this Model, mapped to their IDs.",
            "itemtype": "property",
            "name": "entities",
            "type": "{{String:Entity}}",
            "class": "Model",
            "module": "xeogl",
            "submodule": "models"
        },
        {
            "file": "src/models/model.js",
            "line": 375,
            "description": "Adds a {{#crossLink \"Component\"}}Component{{/crossLink}} or subtype to this Model.\n\nThe {{#crossLink \"Component\"}}Component(s){{/crossLink}} may be specified by ID, instance, JSON definition or type.\n\nSee class comment for usage examples.\n\nThe {{#crossLink \"Component\"}}Components{{/crossLink}} must be in the same {{#crossLink \"Scene\"}}{{/crossLink}} as this Model.\n\nFires an {{#crossLink \"Model/added:event\"}}{{/crossLink}} event.",
            "itemtype": "method",
            "name": "add",
            "params": [
                {
                    "name": "component",
                    "description": "ID, definition or instance of a {{#crossLink \"Component\"}}Component{{/crossLink}} type or subtype.",
                    "type": "Number|String|*|Component"
                }
            ],
            "class": "Model",
            "module": "xeogl",
            "submodule": "models"
        },
        {
            "file": "src/models/model.js",
            "line": 528,
            "description": "Fired whenever an individual {{#crossLink \"Component\"}}{{/crossLink}} is added to this {{#crossLink \"Model\"}}{{/crossLink}}.",
            "itemtype": "event",
            "name": "added",
            "params": [
                {
                    "name": "value",
                    "description": "The {{#crossLink \"Component\"}}{{/crossLink}} that was added.",
                    "type": "Component"
                }
            ],
            "class": "Model",
            "module": "xeogl",
            "submodule": "models"
        },
        {
            "file": "src/models/model.js",
            "line": 567,
            "description": "Destroys all {{#crossLink \"Component\"}}Components{{/crossLink}} in this Model.",
            "itemtype": "method",
            "name": "destroyAll",
            "class": "Model",
            "module": "xeogl",
            "submodule": "models"
        },
        {
            "file": "src/models/model.js",
            "line": 603,
            "description": "Removes all {{#crossLink \"Component\"}}Components{{/crossLink}} from this Model.",
            "itemtype": "method",
            "name": "removeAll",
            "class": "Model",
            "module": "xeogl",
            "submodule": "models"
        },
        {
            "file": "src/models/model.js",
            "line": 615,
            "description": "Removes a {{#crossLink \"Component\"}}{{/crossLink}} from this model, without destroying it.\n\nNote that if the Component is owned by the Model, where it was created like this:\n\n````javascript\nvar myComponent = new xeogl.Rotate(myModel, {... });\n````\n\nthen even after removing it, calling {{#crossLink \"Model/destroyAll:method\"}}destroyAll{{/crossLink}} on the\nModel will still destroy the component.",
            "params": [
                {
                    "name": "component",
                    "description": ""
                }
            ],
            "class": "Model",
            "module": "xeogl",
            "submodule": "models"
        },
        {
            "file": "src/models/model.js",
            "line": 690,
            "description": "Fired whenever an individual {{#crossLink \"Component\"}}{{/crossLink}} is removed from this {{#crossLink \"Model\"}}{{/crossLink}}.",
            "itemtype": "event",
            "name": "removed",
            "params": [
                {
                    "name": "value",
                    "description": "The {{#crossLink \"Component\"}}{{/crossLink}} that was removed.",
                    "type": "Component"
                }
            ],
            "class": "Model",
            "module": "xeogl",
            "submodule": "models"
        },
        {
            "file": "src/models/model.js",
            "line": 702,
            "description": "Iterates with a callback over the {{#crossLink \"Component\"}}Components{{/crossLink}} in this Model.",
            "itemtype": "method",
            "name": "iterate",
            "params": [
                {
                    "name": "callback",
                    "description": "Callback called for each {{#crossLink \"Component\"}}{{/crossLink}}.",
                    "type": "Function"
                },
                {
                    "name": "scope",
                    "description": "Optional scope for the callback, defaults to this Model.",
                    "type": "Object",
                    "optional": true,
                    "optdefault": "this"
                }
            ],
            "class": "Model",
            "module": "xeogl",
            "submodule": "models"
        },
        {
            "file": "src/models/model.js",
            "line": 721,
            "description": "The Local-to-World-space (modelling) {{#crossLink \"Transform\"}}{{/crossLink}} attached to this Model.\n\nMust be within the same {{#crossLink \"Scene\"}}{{/crossLink}} as this Model.\n\nInternally, the given {{#crossLink \"Transform\"}}{{/crossLink}} will be inserted above each top-most\n{{#crossLink \"Transform\"}}Transform{{/crossLink}} that the Model attaches to\nits {{#crossLink \"Entity\"}}Entities{{/crossLink}}.\n\nFires an {{#crossLink \"Model/transform:event\"}}{{/crossLink}} event on change.",
            "itemtype": "property",
            "name": "transform",
            "type": "Transform",
            "class": "Model",
            "module": "xeogl",
            "submodule": "models"
        },
        {
            "file": "src/models/model.js",
            "line": 739,
            "description": "Fired whenever this Model's {{#crossLink \"Model/transform:property\"}}{{/crossLink}} property changes.",
            "itemtype": "event",
            "name": "transform",
            "params": [
                {
                    "name": "value",
                    "description": "The property's new value"
                }
            ],
            "class": "Model",
            "module": "xeogl",
            "submodule": "models"
        },
        {
            "file": "src/models/model.js",
            "line": 762,
            "description": "World-space axis-aligned 3D boundary (AABB) of this Model.\n\nThe AABB is represented by a six-element Float32Array containing the min/max extents of the\naxis-aligned volume, ie. ````[xmin, ymin,zmin,xmax,ymax, zmax]````.",
            "itemtype": "property",
            "name": "aabb",
            "final": 1,
            "type": "{Float32Array}",
            "class": "Model",
            "module": "xeogl",
            "submodule": "models"
        },
        {
            "file": "src/models/model.js",
            "line": 829,
            "description": "Indicates whether this Model's Entities are visible or not.",
            "itemtype": "property",
            "name": "visible",
            "default": "true",
            "type": "Boolean",
            "class": "Model",
            "module": "xeogl",
            "submodule": "models"
        },
        {
            "file": "src/models/model.js",
            "line": 853,
            "description": "Indicates whether this Model's Entities are culled or not.",
            "itemtype": "property",
            "name": "culled",
            "default": "false",
            "type": "Boolean",
            "class": "Model",
            "module": "xeogl",
            "submodule": "models"
        },
        {
            "file": "src/models/model.js",
            "line": 877,
            "description": "Flag which indicates if this Model's Entities are rendered with ghosted effect.",
            "itemtype": "property",
            "name": "ghosted",
            "default": "false",
            "type": "Boolean",
            "class": "Model",
            "module": "xeogl",
            "submodule": "models"
        },
        {
            "file": "src/models/model.js",
            "line": 901,
            "description": "Flag which indicates if this Model's Entities are rendered with highlighted effect.",
            "itemtype": "property",
            "name": "highlighted",
            "default": "false",
            "type": "Boolean",
            "class": "Model",
            "module": "xeogl",
            "submodule": "models"
        },
        {
            "file": "src/models/model.js",
            "line": 925,
            "description": "Flag which indicates if this Model's Entities are rendered as selected.",
            "itemtype": "property",
            "name": "selected",
            "default": "false",
            "type": "Boolean",
            "class": "Model",
            "module": "xeogl",
            "submodule": "models"
        },
        {
            "file": "src/models/model.js",
            "line": 949,
            "description": "Flag which indicates if this Model's Entities are rendered with outlined effect.",
            "itemtype": "property",
            "name": "outlined",
            "default": "false",
            "type": "Boolean",
            "class": "Model",
            "module": "xeogl",
            "submodule": "models"
        },
        {
            "file": "src/models/model.js",
            "line": 985,
            "description": "Fired whenever this Model's World-space boundary changes.\n\nGet the latest boundary from the Model's {{#crossLink \"Model/aabb:property\"}}{{/crossLink}} property.",
            "itemtype": "event",
            "name": "boundary",
            "class": "Model",
            "module": "xeogl",
            "submodule": "models"
        },
        {
            "file": "src/transforms/lookat.js",
            "line": 101,
            "description": "Rotate 'eye' about 'look', around the 'up' vector",
            "params": [
                {
                    "name": "angle",
                    "description": "Angle of rotation in degrees",
                    "type": "Number"
                }
            ],
            "class": "Lookat",
            "module": "xeogl",
            "submodule": "transforms"
        },
        {
            "file": "src/transforms/lookat.js",
            "line": 119,
            "description": "Rotate 'eye' about 'look' around the right axis (orthogonal to \"up\" and \"look\").",
            "params": [
                {
                    "name": "angle",
                    "description": "Angle of rotation in degrees",
                    "type": "Number"
                }
            ],
            "class": "Lookat",
            "module": "xeogl",
            "submodule": "transforms"
        },
        {
            "file": "src/transforms/lookat.js",
            "line": 138,
            "description": "Rotate 'look' about 'eye', around the 'up' vector.",
            "params": [
                {
                    "name": "angle",
                    "description": "Angle of rotation in degrees",
                    "type": "Number"
                }
            ],
            "class": "Lookat",
            "module": "xeogl",
            "submodule": "transforms"
        },
        {
            "file": "src/transforms/lookat.js",
            "line": 159,
            "description": "Rotate 'look' about 'eye', around the right axis (orthogonal to \"up\" and \"look\").",
            "params": [
                {
                    "name": "angle",
                    "description": "Angle of rotation in degrees",
                    "type": "Number"
                }
            ],
            "class": "Lookat",
            "module": "xeogl",
            "submodule": "transforms"
        },
        {
            "file": "src/transforms/lookat.js",
            "line": 178,
            "description": "Pans the camera along X, Y and Z axis.",
            "params": [
                {
                    "name": "pan",
                    "description": "The pan vector"
                }
            ],
            "class": "Lookat",
            "module": "xeogl",
            "submodule": "transforms"
        },
        {
            "file": "src/transforms/lookat.js",
            "line": 214,
            "description": "Increments/decrements zoom factor, ie. distance between eye and look.",
            "params": [
                {
                    "name": "delta",
                    "description": ""
                }
            ],
            "class": "Lookat",
            "module": "xeogl",
            "submodule": "transforms"
        },
        {
            "file": "src/transforms/lookat.js",
            "line": 235,
            "description": "Position of this Lookat's eye.\n\nFires an {{#crossLink \"Lookat/eye:event\"}}{{/crossLink}} event on change.",
            "itemtype": "property",
            "name": "eye",
            "default": "[0,0,10]",
            "type": "Float32Array",
            "class": "Lookat",
            "module": "xeogl",
            "submodule": "transforms"
        },
        {
            "file": "src/transforms/lookat.js",
            "line": 251,
            "description": "Fired whenever this Lookat's  {{#crossLink \"Lookat/eye:property\"}}{{/crossLink}} property changes.",
            "itemtype": "event",
            "name": "eye",
            "params": [
                {
                    "name": "value",
                    "description": "The property's new value"
                }
            ],
            "class": "Lookat",
            "module": "xeogl",
            "submodule": "transforms"
        },
        {
            "file": "src/transforms/lookat.js",
            "line": 265,
            "description": "Position of this Lookat's point-of-interest.\n\nFires a {{#crossLink \"Lookat/look:event\"}}{{/crossLink}} event on change.",
            "itemtype": "property",
            "name": "look",
            "default": "[0,0,0]",
            "type": "Float32Array",
            "class": "Lookat",
            "module": "xeogl",
            "submodule": "transforms"
        },
        {
            "file": "src/transforms/lookat.js",
            "line": 281,
            "description": "Fired whenever this Lookat's  {{#crossLink \"Lookat/look:property\"}}{{/crossLink}} property changes.",
            "itemtype": "event",
            "name": "look",
            "params": [
                {
                    "name": "value",
                    "description": "The property's new value"
                }
            ],
            "class": "Lookat",
            "module": "xeogl",
            "submodule": "transforms"
        },
        {
            "file": "src/transforms/lookat.js",
            "line": 295,
            "description": "Direction of the \"up\" vector.\nFires an {{#crossLink \"Lookat/up:event\"}}{{/crossLink}} event on change.",
            "itemtype": "property",
            "name": "up",
            "default": "[0,1,0]",
            "type": "Float32Array",
            "class": "Lookat",
            "module": "xeogl",
            "submodule": "transforms"
        },
        {
            "file": "src/transforms/lookat.js",
            "line": 309,
            "description": "Fired whenever this Lookat's  {{#crossLink \"Lookat/up:property\"}}{{/crossLink}} property changes.",
            "itemtype": "event",
            "name": "up",
            "params": [
                {
                    "name": "value",
                    "description": "The property's new value"
                }
            ],
            "class": "Lookat",
            "module": "xeogl",
            "submodule": "transforms"
        },
        {
            "file": "src/transforms/lookat.js",
            "line": 323,
            "description": "Indicates the up, right and forward axis of the World coordinate system.\n\nHas format: ````[rightX, rightY, rightZ, upX, upY, upZ, forwardX, forwardY, forwardZ]````",
            "itemtype": "property",
            "name": "worldAxis",
            "default": "[1, 0, 0, 0, 1, 0, 0, 0, 1]",
            "type": "Float32Array",
            "class": "Lookat",
            "module": "xeogl",
            "submodule": "transforms"
        },
        {
            "file": "src/transforms/lookat.js",
            "line": 356,
            "description": "Direction of World-space \"up\".",
            "itemtype": "property",
            "name": "worldUp",
            "default": "[0,1,0]",
            "type": "Float32Array",
            "final": 1,
            "class": "Lookat",
            "module": "xeogl",
            "submodule": "transforms"
        },
        {
            "file": "src/transforms/lookat.js",
            "line": 369,
            "description": "Direction of World-space \"right\".",
            "itemtype": "property",
            "name": "worldRight",
            "default": "[1,0,0]",
            "type": "Float32Array",
            "final": 1,
            "class": "Lookat",
            "module": "xeogl",
            "submodule": "transforms"
        },
        {
            "file": "src/transforms/lookat.js",
            "line": 382,
            "description": "Direction of World-space \"forwards\".",
            "itemtype": "property",
            "name": "worldForward",
            "default": "[0,0,-1]",
            "type": "Float32Array",
            "final": 1,
            "class": "Lookat",
            "module": "xeogl",
            "submodule": "transforms"
        },
        {
            "file": "src/transforms/lookat.js",
            "line": 395,
            "description": "Whether to lock yaw rotation to pivot about the World-space \"up\" axis.\n\nFires a {{#crossLink \"Lookat/gimbalLock:event\"}}{{/crossLink}} event on change.",
            "itemtype": "property",
            "name": "gimbalLock",
            "default": "true",
            "type": "Boolean",
            "class": "Lookat",
            "module": "xeogl",
            "submodule": "transforms"
        },
        {
            "file": "src/transforms/lookat.js",
            "line": 410,
            "description": "Fired whenever this Lookat's  {{#crossLink \"Lookat/gimbalLock:property\"}}{{/crossLink}} property changes.",
            "itemtype": "event",
            "name": "gimbalLock",
            "params": [
                {
                    "name": "value",
                    "description": "The property's new value"
                }
            ],
            "class": "Lookat",
            "module": "xeogl",
            "submodule": "transforms"
        },
        {
            "file": "src/transforms/lookat.js",
            "line": 424,
            "description": "Distance from \"look\" to \"eye\".",
            "itemtype": "property",
            "name": "eyeLookDist",
            "type": "Number",
            "class": "Lookat",
            "module": "xeogl",
            "submodule": "transforms"
        },
        {
            "file": "src/transforms/quaternion.js",
            "line": 103,
            "description": "The quaternion elements.",
            "itemtype": "property",
            "name": "xyzw",
            "default": "[0,0,0,1]",
            "type": "{Float32Array}",
            "class": "Quaternion",
            "module": "xeogl",
            "submodule": "transforms"
        },
        {
            "file": "src/transforms/quaternion.js",
            "line": 125,
            "description": "Rotates this Quaternion.",
            "itemtype": "method",
            "name": "rotate",
            "params": [
                {
                    "name": "angleAxis",
                    "description": "Rotation in angle-axis form.",
                    "type": "Float32Array"
                }
            ],
            "class": "Quaternion",
            "module": "xeogl",
            "submodule": "transforms"
        },
        {
            "file": "src/transforms/rotate.js",
            "line": 119,
            "description": "Vector indicating the axis of rotation.",
            "itemtype": "property",
            "name": "xyz",
            "default": "[0,1,0]",
            "type": "{Float32Array}",
            "class": "Rotate",
            "module": "xeogl",
            "submodule": "transforms"
        },
        {
            "file": "src/transforms/rotate.js",
            "line": 138,
            "description": "Angle of rotation in degrees.",
            "itemtype": "property",
            "name": "angle",
            "default": "0",
            "type": "{Number}",
            "class": "Rotate",
            "module": "xeogl",
            "submodule": "transforms"
        },
        {
            "file": "src/transforms/scale.js",
            "line": 107,
            "description": "Vector indicating a scale factor for each axis.",
            "itemtype": "property",
            "name": "xyz",
            "default": "[1,1,1]",
            "type": "{Float32Array}",
            "class": "Scale",
            "module": "xeogl",
            "submodule": "transforms"
        },
        {
            "file": "src/transforms/transform.js",
            "line": 208,
            "description": "Fired whenever this Transform's {{#crossLink \"Transform/leafMatrix:property\"}}{{/crossLink}} property changes.\n\nThis event does not carry the updated property value. Instead, subscribers will need to read\nthat property again to get its updated value (which may be lazy-computed then).",
            "itemtype": "event",
            "name": "updated",
            "class": "Transform",
            "module": "xeogl",
            "submodule": "transforms"
        },
        {
            "file": "src/transforms/transform.js",
            "line": 284,
            "description": "The parent Transform.",
            "itemtype": "property",
            "name": "parent",
            "type": "Transform",
            "class": "Transform",
            "module": "xeogl",
            "submodule": "transforms"
        },
        {
            "file": "src/transforms/transform.js",
            "line": 331,
            "description": "Flag that indicates whether this Transform is post-multiplied (default) or pre-multiplied by\nits {{#crossLink \"Transform/parent:property\"}}{{/crossLink}} Transform.",
            "itemtype": "property",
            "name": "postMultiply",
            "default": "true",
            "type": "Boolean",
            "class": "Transform",
            "module": "xeogl",
            "submodule": "transforms"
        },
        {
            "file": "src/transforms/transform.js",
            "line": 363,
            "description": "The Transform's local matrix.\n\nFires a {{#crossLink \"Transform/matrix:event\"}}{{/crossLink}} event on change.",
            "itemtype": "property",
            "name": "matrix",
            "default": "[1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1]",
            "type": "{Float32Array}",
            "class": "Transform",
            "module": "xeogl",
            "submodule": "transforms"
        },
        {
            "file": "src/transforms/transform.js",
            "line": 382,
            "description": "Fired whenever this Transform's {{#crossLink \"Transform/matrix:property\"}}{{/crossLink}} property changes.",
            "itemtype": "event",
            "name": "matrix",
            "params": [
                {
                    "name": "value",
                    "description": "The property's new value"
                }
            ],
            "class": "Transform",
            "module": "xeogl",
            "submodule": "transforms"
        },
        {
            "file": "src/transforms/transform.js",
            "line": 402,
            "description": "Returns the product of all {{#crossLink \"Transform/matrix:property\"}}{{/crossLink}}'s on Transforms\non the path via {{#crossLink \"Transform/parent:property\"}}{{/crossLink}} up to the root.\n\nThe value of this property will have a fresh value after each\n{{#crossLink \"Transform/updated:property\"}}{{/crossLink}} event, which is fired whenever any Transform\non the path receives an update for its {{#crossLink \"Transform/matrix:property\"}}{{/crossLink}} or\n{{#crossLink \"Transform/matrix:property\"}}{{/crossLink}} property.",
            "itemtype": "property",
            "name": "leafMatrix",
            "default": "[1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1]",
            "type": "{Float32Array}",
            "class": "Transform",
            "module": "xeogl",
            "submodule": "transforms"
        },
        {
            "file": "src/transforms/transform.js",
            "line": 427,
            "description": "Returns the product of all {{#crossLink \"Transform/normalMatrix:property\"}}{{/crossLink}}'s on Transforms\non the path via {{#crossLink \"Transform/parent:property\"}}{{/crossLink}} up to the root.\n\nThe value of this property will have a fresh value after each\n{{#crossLink \"Transform/updated:property\"}}{{/crossLink}} event, which is fired whenever any Transform\non the path receives an update for its {{#crossLink \"Transform/matrix:property\"}}{{/crossLink}} or\n{{#crossLink \"Transform/matrix:property\"}}{{/crossLink}} property.",
            "itemtype": "property",
            "name": "leafNormalMatrix",
            "default": "[1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1]",
            "type": "{Float32Array}",
            "class": "Transform",
            "module": "xeogl",
            "submodule": "transforms"
        },
        {
            "file": "src/transforms/translate.js",
            "line": 111,
            "description": "Vector indicating a translation amount for each axis.",
            "itemtype": "property",
            "name": "xyz",
            "default": "[0,0,0]",
            "type": "{Float32Array}",
            "class": "Translate",
            "module": "xeogl",
            "submodule": "transforms"
        },
        {
            "file": "src/viewport/viewport.js",
            "line": 90,
            "description": "The canvas-space boundary of this Viewport, indicated as [min, max, width, height].\n\nDefaults to the size of the parent\n{{#crossLink \"Scene\"}}Scene's{{/crossLink}} {{#crossLink \"Canvas\"}}{{/crossLink}}.\n\nIgnores attempts to set value when {{#crossLink \"Viewport/autoBoundary:property\"}}{{/crossLink}} is ````true````.\n\nFires a {{#crossLink \"Viewport/boundary:event\"}}{{/crossLink}} event on change.",
            "itemtype": "property",
            "name": "boundary",
            "default": "[size of Scene Canvas]",
            "type": "{Array of Number}",
            "class": "Viewport",
            "module": "xeogl",
            "submodule": "rendering"
        },
        {
            "file": "src/viewport/viewport.js",
            "line": 126,
            "description": "Fired whenever this Viewport's {{#crossLink \"Viewport/boundary:property\"}}{{/crossLink}} property changes.",
            "itemtype": "event",
            "name": "boundary",
            "params": [
                {
                    "name": "value",
                    "description": "The property's new value",
                    "type": "Boolean"
                }
            ],
            "class": "Viewport",
            "module": "xeogl",
            "submodule": "rendering"
        },
        {
            "file": "src/viewport/viewport.js",
            "line": 140,
            "description": "Indicates whether this Viewport's {{#crossLink \"Viewport/boundary:property\"}}{{/crossLink}} automatically\nsynchronizes with the size of the parent {{#crossLink \"Scene\"}}Scene's{{/crossLink}} {{#crossLink \"Canvas\"}}{{/crossLink}}.\n\nWhen set true, then this Viewport will fire a {{#crossLink \"Viewport/boundary/event\"}}{{/crossLink}} whenever\nthe {{#crossLink \"Canvas\"}}{{/crossLink}} resizes. Also fires that event as soon as this ````autoBoundary````\nproperty is changed.\n\nFires a {{#crossLink \"Viewport/autoBoundary:event\"}}{{/crossLink}} event on change.",
            "itemtype": "property",
            "name": "autoBoundary",
            "default": "false",
            "type": "Boolean",
            "class": "Viewport",
            "module": "xeogl",
            "submodule": "rendering"
        },
        {
            "file": "src/viewport/viewport.js",
            "line": 177,
            "description": "Fired whenever this Viewport's {{#crossLink \"Viewport/boundary:property\"}}{{/crossLink}} property changes.",
            "itemtype": "event",
            "name": "boundary",
            "params": [
                {
                    "name": "value",
                    "description": "The property's new value",
                    "type": "Boolean"
                }
            ],
            "class": "Viewport",
            "module": "xeogl",
            "submodule": "rendering"
        },
        {
            "file": "src/viewport/viewport.js",
            "line": 192,
            "description": "Fired whenever this Viewport's {{#crossLink \"autoBoundary/autoBoundary:property\"}}{{/crossLink}} property changes.",
            "itemtype": "event",
            "name": "autoBoundary",
            "params": [
                {
                    "name": "value",
                    "description": "The property's new value"
                }
            ],
            "class": "Viewport",
            "module": "xeogl",
            "submodule": "rendering"
        },
        {
            "file": "src/component.js",
            "line": 234,
            "description": "The parent {{#crossLink \"Scene\"}}{{/crossLink}} that contains this Component.",
            "itemtype": "property",
            "name": "scene",
            "type": "{Scene}",
            "final": 1,
            "class": "Component",
            "module": "xeogl"
        },
        {
            "file": "src/component.js",
            "line": 282,
            "description": "Arbitrary, user-defined metadata on this component.",
            "itemtype": "property",
            "name": "metadata",
            "type": "Object",
            "class": "Component",
            "module": "xeogl"
        },
        {
            "file": "src/component.js",
            "line": 290,
            "description": "Indicates whether this is one of the {{#crossLink \"Scene\"}}Scene{{/crossLink}}'s built-in Components.",
            "itemtype": "property",
            "name": "isDefault",
            "type": "Boolean",
            "class": "Component",
            "module": "xeogl"
        },
        {
            "file": "src/component.js",
            "line": 298,
            "description": "Unique ID for this Component within its parent {{#crossLink \"Scene\"}}Scene{{/crossLink}}.",
            "itemtype": "property",
            "name": "id",
            "type": "String",
            "final": 1,
            "class": "Component",
            "module": "xeogl"
        },
        {
            "file": "src/component.js",
            "line": 307,
            "description": "True as soon as this Component has been destroyed",
            "itemtype": "property",
            "name": "destroyed",
            "type": "Boolean",
            "class": "Component",
            "module": "xeogl"
        },
        {
            "file": "src/component.js",
            "line": 351,
            "description": "JavaScript class name for this Component.\n\nFor example: \"xeogl.AmbientLight\", \"xeogl.ColorTarget\", \"xeogl.Lights\" etc.",
            "itemtype": "property",
            "name": "type",
            "type": "String",
            "final": 1,
            "class": "Component",
            "module": "xeogl"
        },
        {
            "file": "src/component.js",
            "line": 362,
            "description": "An array of strings that indicates the chain of super-types within this component's inheritance hierarchy.\n\nFor example, if this component is a {{#crossLink \"Rotate\"}}{{/crossLink}}, which\nextends {{#crossLink \"Transform\"}}{{/crossLink}}, which in turn extends {{#crossLink \"Component\"}}{{/crossLink}},\nthen this property will have the value:\n\n````json\n[\"xeogl.Component\", \"xeogl.Transform\"]\n````\n\nNote that the chain is ordered downwards in the hierarchy, ie. from super-class down towards sub-class.",
            "itemtype": "property",
            "name": "superTypes",
            "type": "{Array of String}",
            "final": 1,
            "class": "Component",
            "module": "xeogl"
        },
        {
            "file": "src/component.js",
            "line": 381,
            "description": "Tests if this component is of the given type, or is a subclass of the given type.\n\nThe type may be given as either a string or a component constructor.\n\nThis method works by walking up the inheritance type chain, which this component provides in\nproperty {{#crossLink \"Component/superTypes:property\"}}{{/crossLink}}, returning true as soon as one of the type strings in\nthe chain matches the given type, of false if none match.\n\n#### Examples:\n\n````javascript\nvar myRotate = new xeogl.Rotate({ ... });\n\nmyRotate.isType(xeogl.Component); // Returns true for all xeogl components\nmyRotate.isType(\"xeogl.Component\"); // Returns true for all xeogl components\nmyRotate.isType(xeogl.Rotate); // Returns true\nmyRotate.isType(xeogl.Transform); // Returns true\nmyRotate.isType(\"xeogl.Transform\"); // Returns true\nmyRotate.isType(xeogl.Entity); // Returns false, because xeogl.Rotate does not (even indirectly) extend xeogl.Entity\n````",
            "itemtype": "method",
            "name": "isType",
            "params": [
                {
                    "name": "type",
                    "description": "Component type to compare with, eg \"xeogl.PhongMaterial\", or a xeogl component constructor.",
                    "type": "String|Function"
                }
            ],
            "return": {
                "description": "True if this component is of given type or is subclass of the given type.",
                "type": "Boolean"
            },
            "class": "Component",
            "module": "xeogl"
        },
        {
            "file": "src/component.js",
            "line": 417,
            "description": "Initializes this component",
            "params": [
                {
                    "name": "cfg",
                    "description": ""
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Component",
            "module": "xeogl"
        },
        {
            "file": "src/component.js",
            "line": 425,
            "description": "Fires an event on this component.\n\nNotifies existing subscribers to the event, optionally retains the event to give to\nany subsequent notifications on the event as they are made.",
            "itemtype": "method",
            "name": "fire",
            "params": [
                {
                    "name": "event",
                    "description": "The event type name",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "The event parameters",
                    "type": "Object"
                },
                {
                    "name": "forget",
                    "description": "When true, does not retain for subsequent subscribers",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "class": "Component",
            "module": "xeogl"
        },
        {
            "file": "src/component.js",
            "line": 464,
            "description": "Subscribes to an event on this component.\n\nThe callback is be called with this component as scope.",
            "itemtype": "method",
            "name": "on",
            "params": [
                {
                    "name": "event",
                    "description": "The event",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "Called fired on the event",
                    "type": "Function"
                },
                {
                    "name": "scope",
                    "description": "Scope for the callback",
                    "type": "Object",
                    "optional": true,
                    "optdefault": "this"
                }
            ],
            "return": {
                "description": "Handle to the subscription, which may be used to unsubscribe with {@link #off}.",
                "type": "String"
            },
            "class": "Component",
            "module": "xeogl"
        },
        {
            "file": "src/component.js",
            "line": 506,
            "description": "Cancels an event subscription that was previously made with {{#crossLink \"Component/on:method\"}}{{/crossLink}} or\n{{#crossLink \"Component/once:method\"}}{{/crossLink}}.",
            "itemtype": "method",
            "name": "off",
            "params": [
                {
                    "name": "handle",
                    "description": "Publication handle",
                    "type": "String"
                }
            ],
            "class": "Component",
            "module": "xeogl"
        },
        {
            "file": "src/component.js",
            "line": 531,
            "description": "Subscribes to the next occurrence of the given event, then un-subscribes as soon as the event is handled.\n\nThis is equivalent to calling {{#crossLink \"Component/on:method\"}}{{/crossLink}}, and then calling\n{{#crossLink \"Component/off:method\"}}{{/crossLink}} inside the callback function.",
            "itemtype": "method",
            "name": "once",
            "params": [
                {
                    "name": "event",
                    "description": "Data event to listen to",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "Called when fresh data is available at the event",
                    "type": "Function(data)"
                },
                {
                    "name": "scope",
                    "description": "Scope for the callback",
                    "type": "Object",
                    "optional": true,
                    "optdefault": "this"
                }
            ],
            "class": "Component",
            "module": "xeogl"
        },
        {
            "file": "src/component.js",
            "line": 552,
            "description": "Returns true if there are any subscribers to the given event on this component.",
            "itemtype": "method",
            "name": "hasSubs",
            "params": [
                {
                    "name": "event",
                    "description": "The event",
                    "type": "String"
                }
            ],
            "return": {
                "description": "True if there are any subscribers to the given event on this component.",
                "type": "Boolean"
            },
            "class": "Component",
            "module": "xeogl"
        },
        {
            "file": "src/component.js",
            "line": 563,
            "description": "Logs a console debugging message for this component.\n\nThe console message will have this format: *````[LOG] [<component type> <component id>: <message>````*\n\nAlso fires the message as a {{#crossLink \"Scene/log:event\"}}{{/crossLink}} event on the\nparent {{#crossLink \"Scene\"}}Scene{{/crossLink}}.",
            "itemtype": "method",
            "name": "log",
            "params": [
                {
                    "name": "message",
                    "description": "The message to log",
                    "type": "String"
                }
            ],
            "class": "Component",
            "module": "xeogl"
        },
        {
            "file": "src/component.js",
            "line": 584,
            "description": "Logs a warning for this component to the JavaScript console.\n\nThe console message will have this format: *````[WARN] [<component type> =<component id>: <message>````*\n\nAlso fires the message as a {{#crossLink \"Scene/warn:event\"}}{{/crossLink}} event on the\nparent {{#crossLink \"Scene\"}}Scene{{/crossLink}}.",
            "itemtype": "method",
            "name": "warn",
            "params": [
                {
                    "name": "message",
                    "description": "The message to log",
                    "type": "String"
                }
            ],
            "class": "Component",
            "module": "xeogl"
        },
        {
            "file": "src/component.js",
            "line": 601,
            "description": "Logs an error for this component to the JavaScript console.\n\nThe console message will have this format: *````[ERROR] [<component type> =<component id>: <message>````*\n\nAlso fires the message as an {{#crossLink \"Scene/error:event\"}}{{/crossLink}} event on the\nparent {{#crossLink \"Scene\"}}Scene{{/crossLink}}.",
            "itemtype": "method",
            "name": "error",
            "params": [
                {
                    "name": "message",
                    "description": "The message to log",
                    "type": "String"
                }
            ],
            "class": "Component",
            "module": "xeogl"
        },
        {
            "file": "src/component.js",
            "line": 618,
            "description": "Adds a child component to this.\nWhen component not given, attaches the scene's default instance for the given name (if any).\nPublishes the new child component on this component, keyed to the given name.",
            "params": [
                {
                    "name": "params",
                    "description": "",
                    "type": "*",
                    "props": [
                        {
                            "name": "name",
                            "description": "component name",
                            "type": "String"
                        },
                        {
                            "name": "component",
                            "description": "The component",
                            "type": "Component",
                            "optional": true
                        },
                        {
                            "name": "type",
                            "description": "Optional expected type of base type of the child; when supplied, will\ncause an exception if the given child is not the same type or a subtype of this.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "sceneDefault",
                            "description": "",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "sceneSingleton",
                            "description": "",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "onAttached",
                            "description": "Optional callback called when component attached",
                            "type": "Function",
                            "optional": true,
                            "props": [
                                {
                                    "name": "callback",
                                    "description": "Callback function",
                                    "type": "Function",
                                    "optional": true
                                },
                                {
                                    "name": "scope",
                                    "description": "Optional scope for callback",
                                    "type": "Function",
                                    "optional": true
                                }
                            ]
                        },
                        {
                            "name": "onDetached",
                            "description": "Optional callback called when component is detached",
                            "type": "Function",
                            "optional": true,
                            "props": [
                                {
                                    "name": "callback",
                                    "description": "Callback function",
                                    "type": "Function",
                                    "optional": true
                                },
                                {
                                    "name": "scope",
                                    "description": "Optional scope for callback",
                                    "type": "Function",
                                    "optional": true
                                }
                            ]
                        },
                        {
                            "name": "recompiles",
                            "description": "When true, fires \"dirty\" events on this component",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        }
                    ]
                },
                {
                    "name": "}",
                    "description": "[params.on] Callbacks to subscribe to properties on component",
                    "type": "String:Function"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Component",
            "module": "xeogl"
        },
        {
            "file": "src/component.js",
            "line": 883,
            "description": "Convenience method for creating a Component within this Component's {{#crossLink \"Scene\"}}{{/crossLink}}.\n\nThe method is given a component configuration, like so:\n\n````javascript\nvar material = myComponent.create({\n     type: \"xeogl.PhongMaterial\",\n     diffuse: [1,0,0],\n     specular: [1,1,0]\n}, \"myMaterial\");\n````",
            "itemtype": "method",
            "name": "create",
            "params": [
                {
                    "name": "cfg",
                    "description": "Configuration for the component instance.",
                    "type": "*",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "*"
            },
            "class": "Component",
            "module": "xeogl"
        },
        {
            "file": "src/component.js",
            "line": 955,
            "description": "Protected method, called by sub-classes to queue a call to _update().",
            "access": "protected",
            "tagname": "",
            "params": [
                {
                    "name": "priority",
                    "description": "",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "1"
                }
            ],
            "class": "Component",
            "module": "xeogl"
        },
        {
            "file": "src/component.js",
            "line": 971,
            "access": "private",
            "tagname": "",
            "class": "Component",
            "module": "xeogl"
        },
        {
            "file": "src/component.js",
            "line": 983,
            "description": "Protected virtual template method, optionally implemented\nby sub-classes to perform a scheduled task.",
            "access": "protected",
            "tagname": "",
            "class": "Component",
            "module": "xeogl"
        },
        {
            "file": "src/component.js",
            "line": 991,
            "description": "Destroys this component.\n\nFires a {{#crossLink \"Component/destroyed:event\"}}{{/crossLink}} event on this Component.\n\nAutomatically disassociates this component from other components, causing them to fall back on any\ndefaults that this component overrode on them.\n\nTODO: describe effect with respect to #create",
            "itemtype": "method",
            "name": "destroy",
            "class": "Component",
            "module": "xeogl"
        },
        {
            "file": "src/component.js",
            "line": 1051,
            "description": "Fired when this Component is destroyed.",
            "itemtype": "event",
            "name": "destroyed",
            "class": "Component",
            "module": "xeogl"
        },
        {
            "file": "src/component.js",
            "line": 1058,
            "description": "Protected template method, implemented by sub-classes\nto clean up just before the component is destroyed.",
            "access": "protected",
            "tagname": "",
            "class": "Component",
            "module": "xeogl"
        },
        {
            "file": "src/scene.js",
            "line": 430,
            "description": "Fired whenever a debug message logged on a component within this Scene.",
            "itemtype": "event",
            "name": "log",
            "params": [
                {
                    "name": "value",
                    "description": "The debug message",
                    "type": "String"
                }
            ],
            "class": "Scene",
            "module": "xeogl"
        },
        {
            "file": "src/scene.js",
            "line": 436,
            "description": "Fired whenever an error is logged on a component within this Scene.",
            "itemtype": "event",
            "name": "error",
            "params": [
                {
                    "name": "value",
                    "description": "The error message",
                    "type": "String"
                }
            ],
            "class": "Scene",
            "module": "xeogl"
        },
        {
            "file": "src/scene.js",
            "line": 442,
            "description": "Fired whenever a warning is logged on a component within this Scene.",
            "itemtype": "event",
            "name": "warn",
            "params": [
                {
                    "name": "value",
                    "description": "The warning message",
                    "type": "String"
                }
            ],
            "class": "Scene",
            "module": "xeogl"
        },
        {
            "file": "src/scene.js",
            "line": 457,
            "description": "The number of models currently loading.",
            "itemtype": "property",
            "name": "loading",
            "type": "{Number}",
            "class": "Scene",
            "module": "xeogl"
        },
        {
            "file": "src/scene.js",
            "line": 465,
            "description": "The epoch time (in milliseconds since 1970) when this Scene was instantiated.",
            "itemtype": "property",
            "name": "timeCreated",
            "type": "{Number}",
            "class": "Scene",
            "module": "xeogl"
        },
        {
            "file": "src/scene.js",
            "line": 473,
            "description": "The {{#crossLink \"Component\"}}Component{{/crossLink}}s within\nthis Scene, mapped to their IDs.\n\nWill also contain the {{#crossLink \"Entity\"}}{{/crossLink}}s\ncontained in {{#crossLink \"Entity/components:property\"}}{{/crossLink}}.",
            "itemtype": "property",
            "name": "components",
            "type": "{String:xeogl.Component}",
            "class": "Scene",
            "module": "xeogl"
        },
        {
            "file": "src/scene.js",
            "line": 485,
            "description": "For each {{#crossLink \"Component\"}}Component{{/crossLink}} type, a map of\nIDs to instances.",
            "itemtype": "property",
            "name": "types",
            "type": "{String:{String:xeogl.Component}}",
            "class": "Scene",
            "module": "xeogl"
        },
        {
            "file": "src/scene.js",
            "line": 494,
            "description": "The {{#crossLink \"Entity\"}}{{/crossLink}}s within\nthis Scene, mapped to their IDs.\n\nThe {{#crossLink \"Entity\"}}{{/crossLink}}s in this map\nwill also be contained in {{#crossLink \"Entity/components:property\"}}{{/crossLink}}.",
            "itemtype": "property",
            "name": "entities",
            "type": "{String:xeogl.Entity}",
            "class": "Scene",
            "module": "xeogl"
        },
        {
            "file": "src/scene.js",
            "line": 506,
            "description": "The {{#crossLink \"Model\"}}{{/crossLink}}s within\nthis Scene, mapped to their IDs.",
            "itemtype": "property",
            "name": "entities",
            "type": "{String:xeogl.Model}",
            "class": "Scene",
            "module": "xeogl"
        },
        {
            "file": "src/scene.js",
            "line": 518,
            "description": "Manages the HTML5 canvas for this Scene.",
            "final": 1,
            "itemtype": "property",
            "name": "canvas",
            "type": "{Canvas}",
            "class": "Scene",
            "module": "xeogl"
        },
        {
            "file": "src/scene.js",
            "line": 548,
            "description": "Publishes input events that occur on this Scene's canvas.",
            "final": 1,
            "itemtype": "property",
            "name": "input",
            "type": "{Input}",
            "class": "Scene",
            "module": "xeogl"
        },
        {
            "file": "src/scene.js",
            "line": 812,
            "description": "Renders a single frame of this Scene.\n\nThe Scene will periodically render itself after any updates, but you can call this method to force a render\nif required. This method is typically used when we want to synchronously take a snapshot of the canvas and\nneed everything rendered right at that moment.",
            "itemtype": "method",
            "name": "render",
            "params": [
                {
                    "name": "forceRender",
                    "description": "Forces a render when true, otherwise only renders if something has changed in this Scene\nsince the last render.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "class": "Scene",
            "module": "xeogl"
        },
        {
            "file": "src/scene.js",
            "line": 863,
            "description": "Fired when about to render a frame for a Scene.",
            "itemtype": "event",
            "name": "rendering",
            "params": [
                {
                    "name": "sceneID",
                    "description": "The ID of this Scene.",
                    "type": "String"
                },
                {
                    "name": "pass",
                    "description": "Index of the pass we are about to render (see {{#crossLink \"Scene/passes:property\"}}{{/crossLink}}).",
                    "type": "Number"
                }
            ],
            "class": "Scene",
            "module": "xeogl"
        },
        {
            "file": "src/scene.js",
            "line": 876,
            "description": "Fired when we have just rendered a frame for a Scene.",
            "itemtype": "event",
            "name": "rendering",
            "params": [
                {
                    "name": "sceneID",
                    "description": "The ID of this Scene.",
                    "type": "String"
                },
                {
                    "name": "pass",
                    "description": "Index of the pass we rendered (see {{#crossLink \"Scene/passes:property\"}}{{/crossLink}}).",
                    "type": "Number"
                }
            ],
            "class": "Scene",
            "module": "xeogl"
        },
        {
            "file": "src/scene.js",
            "line": 930,
            "description": "The number of {{#crossLink \"Scene/tick:property\"}}{{/crossLink}} that happen between each render or this Scene.",
            "itemtype": "property",
            "name": "ticksPerRender",
            "default": "1",
            "type": "Number",
            "class": "Scene",
            "module": "xeogl"
        },
        {
            "file": "src/scene.js",
            "line": 964,
            "description": "The number of times this Scene renders per frame.",
            "itemtype": "property",
            "name": "passes",
            "default": "1",
            "type": "Number",
            "class": "Scene",
            "module": "xeogl"
        },
        {
            "file": "src/scene.js",
            "line": 1000,
            "description": "When doing multiple passes per frame, specifies whether to clear the\ncanvas before each pass (true) or just before the first pass (false).",
            "itemtype": "property",
            "name": "clearEachPass",
            "default": "false",
            "type": "Boolean",
            "class": "Scene",
            "module": "xeogl"
        },
        {
            "file": "src/scene.js",
            "line": 1028,
            "description": "When true, expects all textures and colors are premultiplied gamma.",
            "itemtype": "property",
            "name": "gammaInput",
            "default": "false",
            "type": "Boolean",
            "class": "Scene",
            "module": "xeogl"
        },
        {
            "file": "src/scene.js",
            "line": 1059,
            "description": "Whether or not to render pixels with pre-multiplied gama.",
            "itemtype": "property",
            "name": "gammaOutput",
            "default": "true",
            "type": "Boolean",
            "class": "Scene",
            "module": "xeogl"
        },
        {
            "file": "src/scene.js",
            "line": 1090,
            "description": "The gamma factor to use when {{#crossLink \"Scene/property:gammaOutput\"}}{{/crossLink}} is set true.",
            "itemtype": "property",
            "name": "gammaOutput",
            "default": "1.0",
            "type": "Number",
            "class": "Scene",
            "module": "xeogl"
        },
        {
            "file": "src/scene.js",
            "line": 1117,
            "description": "The default modelling {{#crossLink \"Transform\"}}{{/crossLink}} for this Scene.\n\nThis {{#crossLink \"Transform\"}}{{/crossLink}} has an {{#crossLink \"Component/id:property\"}}id{{/crossLink}} equal to \"default.transform\",\nwith all other properties initialised to their default values (ie. an identity matrix).\n\n{{#crossLink \"Entity\"}}Entities{{/crossLink}} within this Scene are attached to\nthis {{#crossLink \"Transform\"}}{{/crossLink}} by default.",
            "itemtype": "property",
            "name": "transform",
            "final": 1,
            "type": "Transform",
            "class": "Scene",
            "module": "xeogl"
        },
        {
            "file": "src/scene.js",
            "line": 1140,
            "description": "The default geometry for this Scene, which is a {{#crossLink \"BoxGeometry\"}}BoxGeometry{{/crossLink}}.\n\nThis {{#crossLink \"BoxGeometry\"}}BoxGeometry{{/crossLink}} has an {{#crossLink \"Component/id:property\"}}id{{/crossLink}} equal to \"default.geometry\".\n\n{{#crossLink \"Entity\"}}Entities{{/crossLink}} within this Scene are attached to this\n{{#crossLink \"Geometry\"}}Geometry{{/crossLink}} by default.",
            "itemtype": "property",
            "name": "geometry",
            "final": 1,
            "type": "BoxGeometry",
            "class": "Scene",
            "module": "xeogl"
        },
        {
            "file": "src/scene.js",
            "line": 1161,
            "description": "The default drawing material for this Scene, which is a {{#crossLink \"PhongMaterial\"}}PhongMaterial{{/crossLink}}.\n\nThis {{#crossLink \"PhongMaterial\"}}PhongMaterial{{/crossLink}} has\nan {{#crossLink \"Component/id:property\"}}id{{/crossLink}} equal to \"default.material\", with all\nother properties initialised to their default values.\n\n{{#crossLink \"Entity\"}}Entities{{/crossLink}} within this Scene are attached to this\n{{#crossLink \"PhongMaterial\"}}PhongMaterial{{/crossLink}} by default.",
            "itemtype": "property",
            "name": "material",
            "final": 1,
            "type": "PhongMaterial",
            "class": "Scene",
            "module": "xeogl"
        },
        {
            "file": "src/scene.js",
            "line": 1185,
            "description": "The Scene's default {{#crossLink \"EmphasisMaterial\"}}EmphasisMaterial{{/crossLink}} for the appearance of {{#crossLink \"Entities\"}}Entities{{/crossLink}} when they are ghosted.\n\nThis {{#crossLink \"EmphasisMaterial\"}}EmphasisMaterial{{/crossLink}} has\nan {{#crossLink \"Component/id:property\"}}id{{/crossLink}} equal to \"default.ghostMaterial\", with all\nother properties initialised to their default values.\n\n{{#crossLink \"Entity\"}}Entities{{/crossLink}} within this Scene are attached to this\n{{#crossLink \"EmphasisMaterial\"}}EmphasisMaterial{{/crossLink}} by default.",
            "itemtype": "property",
            "name": "ghostMaterial",
            "final": 1,
            "type": "EmphasisMaterial",
            "class": "Scene",
            "module": "xeogl"
        },
        {
            "file": "src/scene.js",
            "line": 1209,
            "description": "The Scene's default {{#crossLink \"EmphasisMaterial\"}}EmphasisMaterial{{/crossLink}} for the appearance of {{#crossLink \"Entities\"}}Entities{{/crossLink}} when they are highlighted.\n\nThis {{#crossLink \"HighlightMaterial\"}}HighlightMaterial{{/crossLink}} has\nan {{#crossLink \"Component/id:property\"}}id{{/crossLink}} equal to \"default.highlightMaterial\", with all\nother properties initialised to their default values.\n\n{{#crossLink \"Entity\"}}Entities{{/crossLink}} within this Scene are attached to this\n{{#crossLink \"HighlightMaterial\"}}HighlightMaterial{{/crossLink}} by default.",
            "itemtype": "property",
            "name": "highlightMaterial",
            "final": 1,
            "type": "HighlightMaterial",
            "class": "Scene",
            "module": "xeogl"
        },
        {
            "file": "src/scene.js",
            "line": 1233,
            "description": "The Scene's default {{#crossLink \"EmphasisMaterial\"}}EmphasisMaterial{{/crossLink}} for the appearance of {{#crossLink \"Entities\"}}Entities{{/crossLink}} when they are selected.\n\nThis {{#crossLink \"SelectedMaterial\"}}SelectedMaterial{{/crossLink}} has\nan {{#crossLink \"Component/id:property\"}}id{{/crossLink}} equal to \"default.selectedMaterial\", with all\nother properties initialised to their default values.\n\n{{#crossLink \"Entity\"}}Entities{{/crossLink}} within this Scene are attached to this\n{{#crossLink \"SelectedMaterial\"}}SelectedMaterial{{/crossLink}} by default.",
            "itemtype": "property",
            "name": "selectedMaterial",
            "final": 1,
            "type": "SelectedMaterial",
            "class": "Scene",
            "module": "xeogl"
        },
        {
            "file": "src/scene.js",
            "line": 1257,
            "description": "The Scene's default {{#crossLink \"OutlineMaterial\"}}OutlineMaterial{{/crossLink}} for the appearance of {{#crossLink \"Entities\"}}Entities{{/crossLink}} when they are outlined.\n\nThis {{#crossLink \"OutlineMaterial\"}}OutlineMaterial{{/crossLink}} has\nan {{#crossLink \"Component/id:property\"}}id{{/crossLink}} equal to \"default.outlineMaterial\", with all\nother properties initialised to their default values.\n\n{{#crossLink \"Entity\"}}Entities{{/crossLink}} within this Scene are attached to this\n{{#crossLink \"OutlineMaterial\"}}OutlineMaterial{{/crossLink}} by default.",
            "itemtype": "property",
            "name": "outlineMaterial",
            "final": 1,
            "type": "OutlineMaterial",
            "class": "Scene",
            "module": "xeogl"
        },
        {
            "file": "src/scene.js",
            "line": 1280,
            "description": "The {{#crossLink \"Viewport\"}}{{/crossLink}} belonging to this Scene.",
            "itemtype": "property",
            "name": "viewport",
            "final": 1,
            "type": "Viewport",
            "class": "Scene",
            "module": "xeogl"
        },
        {
            "file": "src/scene.js",
            "line": 1293,
            "description": "The {{#crossLink \"Lights\"}}Lights{{/crossLink}} belonging to this Scene.",
            "itemtype": "property",
            "name": "lights",
            "final": 1,
            "type": "Lights",
            "class": "Scene",
            "module": "xeogl"
        },
        {
            "file": "src/scene.js",
            "line": 1306,
            "description": "The {{#crossLink \"Camera\"}}Camera{{/crossLink}} belonging to this Scene.",
            "itemtype": "property",
            "name": "camera",
            "final": 1,
            "type": "Camera",
            "class": "Scene",
            "module": "xeogl"
        },
        {
            "file": "src/scene.js",
            "line": 1319,
            "description": "The {{#crossLink \"Clips\"}}Clips{{/crossLink}} belonging to this Scene.",
            "itemtype": "property",
            "name": "clips",
            "final": 1,
            "type": "Clips",
            "class": "Scene",
            "module": "xeogl"
        },
        {
            "file": "src/scene.js",
            "line": 1332,
            "description": "World-space 3D center of this Scene.",
            "itemtype": "property",
            "name": "center",
            "final": 1,
            "type": "{Float32Array}",
            "class": "Scene",
            "module": "xeogl"
        },
        {
            "file": "src/scene.js",
            "line": 1360,
            "description": "World-space axis-aligned 3D boundary (AABB) of this Scene.\n\nThe AABB is represented by a six-element Float32Array containing the min/max extents of the\naxis-aligned volume, ie. ````[xmin, ymin,zmin,xmax,ymax, zmax]````.",
            "itemtype": "property",
            "name": "aabb",
            "final": 1,
            "type": "{Float32Array}",
            "class": "Scene",
            "module": "xeogl"
        },
        {
            "file": "src/scene.js",
            "line": 1451,
            "description": "Attempts to pick an {{#crossLink \"Entity\"}}Entity{{/crossLink}} in this Scene.\n\nIgnores {{#crossLink \"Entity\"}}Entities{{/crossLink}} with {{#crossLink \"Entity/pickable:property\"}}pickable{{/crossLink}}\nset *false*.\n\nPicking the {{#crossLink \"Entity\"}}{{/crossLink}} at the given canvas coordinates:\n\n````javascript\nvar hit = scene.pick({\n    canvasPos: [23, 131]\n });\n\nif (hit) { // Picked an Entity\n    var entity = hit.entity;\n}\n````\n\n**Usage:**\n\nPicking the {{#crossLink \"Entity\"}}{{/crossLink}} that intersects a ray cast through the canvas:\n\n````javascript\nvar hit = scene.pick({\n    pickSurface: true,\n    canvasPos: [23, 131]\n });\n\nif (hit) { // Picked an Entity\n\n    var entity = hit.entity;\n\n    // These properties are only on the hit result when we do a ray-pick:\n\n    var primitive = hit.primitive; // Type of primitive that was picked, usually \"triangles\"\n    var primIndex = hit.primIndex; // Position of triangle's first index in the picked Entity's Geometry's indices array\n    var indices = hit.indices; // UInt32Array containing the triangle's vertex indices\n    var localPos = hit.localPos; // Float32Array containing the picked Local-space position on the triangle\n    var worldPos = hit.worldPos; // Float32Array containing the picked World-space position on the triangle\n    var viewPos = hit.viewPos; // Float32Array containing the picked View-space position on the triangle\n    var bary = hit.bary; // Float32Array containing the picked barycentric position within the triangle\n    var normal = hit.normal; // Float32Array containing the interpolated normal vector at the picked position on the triangle\n    var uv = hit.uv; // Float32Array containing the interpolated UV coordinates at the picked position on the triangle\n}\n````\n\nPicking the {{#crossLink \"Entity\"}}{{/crossLink}} that intersects an arbitrarily-aligned World-space ray:\n\n````javascript\nvar hit = scene.pick({\n    pickSurface: true,       // Picking with arbitrarily-positioned ray\n    origin: [0,0,-5],    // Ray origin\n    direction: [0,0,1]   // Ray direction\n});\n\nif (hit) { // Picked an Entity with the ray\n\n    var entity = hit.entity;\n\n    var primitive = hit.primitive; // Type of primitive that was picked, usually \"triangles\"\n    var primIndex = hit.primIndex; // Position of triangle's first index in the picked Entity's Geometry's indices array\n    var indices = hit.indices; // UInt32Array containing the triangle's vertex indices\n    var localPos = hit.localPos; // Float32Array containing the picked Local-space position on the triangle\n    var worldPos = hit.worldPos; // Float32Array containing the picked World-space position on the triangle\n    var viewPos = hit.viewPos; // Float32Array containing the picked View-space position on the triangle\n    var bary = hit.bary; // Float32Array containing the picked barycentric position within the triangle\n    var normal = hit.normal; // Float32Array containing the interpolated normal vector at the picked position on the triangle\n    var uv = hit.uv; // Float32Array containing the interpolated UV coordinates at the picked position on the triangle\n    var origin = hit.origin; // Float32Array containing the World-space ray origin\n    var direction = hit.direction; // Float32Array containing the World-space ray direction\n}\n````",
            "itemtype": "method",
            "name": "pick",
            "params": [
                {
                    "name": "params",
                    "description": "Picking parameters.",
                    "type": "*",
                    "props": [
                        {
                            "name": "pickSurface",
                            "description": "Whether to find the picked position on the surface of the Entity.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "canvasPos",
                            "description": "Canvas-space coordinates. When ray-picking, this will override the\n**origin** and ** direction** parameters and will cause the ray to be fired through the canvas at this position,\ndirectly along the negative View-space Z-axis.",
                            "type": "Float32Array",
                            "optional": true
                        },
                        {
                            "name": "origin",
                            "description": "World-space ray origin when ray-picking. Ignored when canvasPos given.",
                            "type": "Float32Array",
                            "optional": true
                        },
                        {
                            "name": "direction",
                            "description": "World-space ray direction when ray-picking. Also indicates the length of the ray. Ignored when canvasPos given.",
                            "type": "Float32Array",
                            "optional": true
                        },
                        {
                            "name": "include",
                            "description": "IDs of {{#crossLink \"Entity\"}}Entities{{/crossLink}} to pick from amongst. When given, ignores {{#crossLink \"Entity\"}}Entities{{/crossLink}} whose IDs are not in this list.",
                            "type": "Array",
                            "optional": true
                        },
                        {
                            "name": "exclude",
                            "description": "IDs of {{#crossLink \"Entity\"}}Entities{{/crossLink}} to ignore. When given, will pick *through* these {{#crossLink \"Entity\"}}Entities{{/crossLink}}, as if they were not there.",
                            "type": "Array",
                            "optional": true
                        }
                    ]
                }
            ],
            "return": {
                "description": "Hit record, returned when an {{#crossLink \"Entity\"}}{{/crossLink}} is picked, else null. See\nmethod comments for description.",
                "type": "*"
            },
            "class": "Scene",
            "module": "xeogl"
        },
        {
            "file": "src/scene.js",
            "line": 1837,
            "description": "Convenience method which returns the collective axis-aligned boundary of the {{#crossLink \"Entity\"}}Entities{{/crossLink}}\nand/or {{#crossLink \"Model\"}}Models{{/crossLink}} with the given IDs.\n\nWhen no arguments are given, returns the total boundary of all objects in the scene.\n\nOnly {{#crossLink \"Entity\"}}Entities{{/crossLink}} with {{#crossLink \"Entity/collidable:property\"}}collidable{{/crossLink}}\nset ````true```` are included in the boundary.\n\n## Usage\n\n````JavaScript\nscene.getAABB(); // Gets collective boundary of all objects in the scene\nscene.getAABB(\"saw\"); // Gets collective boundary of all objects in saw model\nscene.getAABB([\"saw\", \"gearbox\"]); // Gets collective boundary of all objects in saw and gearbox models\nscene.getAABB(\"saw#0.1\"); // Get boundary of an object in the saw model\nscene.getAABB([\"saw#0.1\", \"saw#0.2\"]); // Get collective boundary of two objects in saw model\n````",
            "itemtype": "method",
            "name": "getAABB",
            "params": [
                {
                    "name": "target",
                    "description": "IDs of models, objects and/or annotations",
                    "type": "String|String[]"
                }
            ],
            "return": {
                "description": "An axis-aligned World-space bounding box, given as elements ````[xmin, ymin, zmin, xmax, ymax, zmax]````.",
                "type": "[Number, Number, Number, Number, Number, Number]"
            },
            "class": "Scene",
            "module": "xeogl"
        },
        {
            "file": "src/scene.js",
            "line": 1937,
            "description": "Resets this Scene to its default state.\n\nReferences to any components in this Scene will become invalid.",
            "itemtype": "method",
            "name": "clear",
            "class": "Scene",
            "module": "xeogl"
        },
        {
            "file": "src/xeogl.js",
            "line": 65,
            "description": "Semantic version number. The value for this is set by an expression that's concatenated to\nthe end of the built binary by the xeogl build script.",
            "itemtype": "property",
            "name": "version",
            "type": "{String}",
            "class": "xeogl",
            "module": "xeogl",
            "namespace": "xeogl"
        },
        {
            "file": "src/xeogl.js",
            "line": 74,
            "description": "Information about available WebGL support",
            "class": "xeogl",
            "module": "xeogl",
            "namespace": "xeogl"
        },
        {
            "file": "src/xeogl.js",
            "line": 130,
            "description": "Tracks statistics within xeogl, such as numbers of\nscenes, textures, geometries etc.",
            "final": 1,
            "itemtype": "property",
            "name": "stats",
            "type": "{*}",
            "class": "xeogl",
            "module": "xeogl",
            "namespace": "xeogl"
        },
        {
            "file": "src/xeogl.js",
            "line": 193,
            "description": "Existing {{#crossLink \"Scene\"}}Scene{{/crossLink}}s , mapped to their IDs",
            "itemtype": "property",
            "name": "scenes",
            "type": "{{String:xeogl.Scene}}",
            "class": "xeogl",
            "module": "xeogl",
            "namespace": "xeogl"
        },
        {
            "file": "src/xeogl.js",
            "line": 204,
            "description": "For each component type, a list of its supertypes, ordered upwards in the hierarchy.",
            "type": "{{}}",
            "access": "private",
            "tagname": "",
            "class": "xeogl",
            "module": "xeogl",
            "namespace": "xeogl"
        },
        {
            "file": "src/xeogl.js",
            "line": 308,
            "description": "Fired on each game loop iteration.",
            "itemtype": "event",
            "name": "tick",
            "params": [
                {
                    "name": "sceneID",
                    "description": "The ID of this Scene.",
                    "type": "String"
                },
                {
                    "name": "startTime",
                    "description": "The time in seconds since 1970 that this Scene was instantiated.",
                    "type": "Number"
                },
                {
                    "name": "time",
                    "description": "The time in seconds since 1970 of this \"tick\" event.",
                    "type": "Number"
                },
                {
                    "name": "prevTime",
                    "description": "The time of the previous \"tick\" event from this Scene.",
                    "type": "Number"
                },
                {
                    "name": "deltaTime",
                    "description": "The time in seconds since the previous \"tick\" event from this Scene.",
                    "type": "Number"
                }
            ],
            "class": "xeogl",
            "module": "xeogl",
            "namespace": "xeogl"
        },
        {
            "file": "src/xeogl.js",
            "line": 364,
            "description": "The default {{#crossLink \"Scene\"}}Scene{{/crossLink}}.\n\nComponents created without an explicit parent {{#crossLink \"Scene\"}}Scene{{/crossLink}} will be created within this\n{{#crossLink \"Scene\"}}Scene{{/crossLink}} by default.\n\nxeogl creates the default {{#crossLink \"Scene\"}}Scene{{/crossLink}} as soon as you either\nreference this property for the first time, or create your first {{#crossLink \"Entity\"}}Entity{{/crossLink}} without\na specified {{#crossLink \"Scene\"}}Scene{{/crossLink}}.",
            "itemtype": "property",
            "name": "scene",
            "final": 1,
            "type": "Scene",
            "class": "xeogl",
            "module": "xeogl",
            "namespace": "xeogl"
        },
        {
            "file": "src/xeogl.js",
            "line": 393,
            "description": "Registers a scene on xeogl.\nThis is called within the xeogl.Scene constructor.",
            "itemtype": "method",
            "name": "_addScene",
            "params": [
                {
                    "name": "scene",
                    "description": "The scene",
                    "type": "Scene"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "xeogl",
            "module": "xeogl",
            "namespace": "xeogl"
        },
        {
            "file": "src/xeogl.js",
            "line": 448,
            "description": "Schedule a task for xeogl to run at the next frame.\n\nInternally, this pushes the task to a FIFO queue. Within each frame interval, xeogl processes the queue\nfor a certain period of time, popping tasks and running them. After each frame interval, tasks that did not\nget a chance to run during the task are left in the queue to be run next time.",
            "itemtype": "method",
            "name": "scheduleTask",
            "params": [
                {
                    "name": "callback",
                    "description": "Callback that runs the task.",
                    "type": "Function"
                },
                {
                    "name": "scope",
                    "description": "Scope for the callback.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "class": "xeogl",
            "module": "xeogl",
            "namespace": "xeogl"
        },
        {
            "file": "src/xeogl.js",
            "line": 497,
            "description": "Destroys all user-created {{#crossLink \"Scene\"}}Scenes{{/crossLink}} and\nclears the default {{#crossLink \"Scene\"}}Scene{{/crossLink}}.",
            "itemtype": "method",
            "name": "clear",
            "demo": "foo",
            "class": "xeogl",
            "module": "xeogl",
            "namespace": "xeogl"
        },
        {
            "file": "src/xeogl.js",
            "line": 526,
            "description": "Tests if the given object is an array",
            "access": "private",
            "tagname": "",
            "class": "xeogl",
            "module": "xeogl",
            "namespace": "xeogl"
        },
        {
            "file": "src/xeogl.js",
            "line": 534,
            "description": "Tests if the given value is a string",
            "params": [
                {
                    "name": "value",
                    "description": ""
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "access": "private",
            "tagname": "",
            "class": "xeogl",
            "module": "xeogl",
            "namespace": "xeogl"
        },
        {
            "file": "src/xeogl.js",
            "line": 544,
            "description": "Tests if the given value is a number",
            "params": [
                {
                    "name": "value",
                    "description": ""
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "access": "private",
            "tagname": "",
            "class": "xeogl",
            "module": "xeogl",
            "namespace": "xeogl"
        },
        {
            "file": "src/xeogl.js",
            "line": 554,
            "description": "Tests if the given value is an ID",
            "params": [
                {
                    "name": "value",
                    "description": ""
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "access": "private",
            "tagname": "",
            "class": "xeogl",
            "module": "xeogl",
            "namespace": "xeogl"
        },
        {
            "file": "src/xeogl.js",
            "line": 564,
            "description": "Tests if the given components are the same, where the components can be either IDs or instances.",
            "params": [
                {
                    "name": "c1",
                    "description": ""
                },
                {
                    "name": "c2",
                    "description": ""
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "access": "private",
            "tagname": "",
            "class": "xeogl",
            "module": "xeogl",
            "namespace": "xeogl"
        },
        {
            "file": "src/xeogl.js",
            "line": 583,
            "description": "Tests if the given value is a function",
            "params": [
                {
                    "name": "value",
                    "description": ""
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "access": "private",
            "tagname": "",
            "class": "xeogl",
            "module": "xeogl",
            "namespace": "xeogl"
        },
        {
            "file": "src/xeogl.js",
            "line": 593,
            "description": "Tests if the given value is a JavaScript JSON object, eg, ````{ foo: \"bar\" }````.",
            "params": [
                {
                    "name": "value",
                    "description": ""
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "access": "private",
            "tagname": "",
            "class": "xeogl",
            "module": "xeogl",
            "namespace": "xeogl"
        },
        {
            "file": "src/xeogl.js",
            "line": 606,
            "description": "Tests if the given component type is a subtype of another component supertype.",
            "params": [
                {
                    "name": "type",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "superType",
                    "description": "",
                    "type": "String",
                    "optional": true,
                    "optdefault": "\"xeogl.Component\""
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "access": "private",
            "tagname": "",
            "class": "xeogl",
            "module": "xeogl",
            "namespace": "xeogl"
        },
        {
            "file": "src/xeogl.js",
            "line": 636,
            "class": "xeogl",
            "module": "xeogl",
            "namespace": "xeogl"
        },
        {
            "file": "src/xeogl.js",
            "line": 642,
            "class": "xeogl",
            "module": "xeogl",
            "namespace": "xeogl"
        },
        {
            "file": "src/xeogl.js",
            "line": 653,
            "description": "Add non-null/defined properties of o to o2",
            "access": "private",
            "tagname": "",
            "class": "xeogl",
            "module": "xeogl",
            "namespace": "xeogl"
        },
        {
            "file": "src/xeogl.js",
            "line": 668,
            "description": "Add properties of o to o2 where undefined or null on o2",
            "access": "private",
            "tagname": "",
            "class": "xeogl",
            "module": "xeogl",
            "namespace": "xeogl"
        },
        {
            "file": "src/xeogl.js",
            "line": 683,
            "description": "Returns true if the given map is empty.",
            "params": [
                {
                    "name": "obj",
                    "description": ""
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "access": "private",
            "tagname": "",
            "class": "xeogl",
            "module": "xeogl",
            "namespace": "xeogl"
        },
        {
            "file": "src/xeogl.js",
            "line": 698,
            "description": "Returns the given ID as a string, in quotes if the ID was a string to begin with.\n\nThis is useful for logging IDs.",
            "params": [
                {
                    "name": "id",
                    "description": "The ID",
                    "type": "Number| String"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "access": "private",
            "tagname": "",
            "class": "xeogl",
            "module": "xeogl",
            "namespace": "xeogl"
        },
        {
            "file": "src/xeogl.js",
            "line": 711,
            "description": "Returns the concatenation of two typed arrays.",
            "params": [
                {
                    "name": "a",
                    "description": ""
                },
                {
                    "name": "b",
                    "description": ""
                }
            ],
            "return": {
                "description": "",
                "type": "*|a"
            },
            "access": "private",
            "tagname": "",
            "class": "xeogl",
            "module": "xeogl",
            "namespace": "xeogl"
        },
        {
            "file": "examples/js/animation/cameraFollowAnimation.js",
            "line": 131,
            "description": "The World-space {{#crossLink \"Boundary3D\"}}{{/crossLink}} followed by this CameraFollowAnimation.\n\nMust be within the same {{#crossLink \"Scene\"}}{{/crossLink}} as this CameraFollowAnimation. Defaults to the parent\n{{#crossLink \"Scene\"}}Scene{{/crossLink}} when set to a null or undefined value.",
            "itemtype": "property",
            "name": "target",
            "type": "Component",
            "class": "CameraFollowAnimation",
            "module": "xeogl",
            "submodule": "animation"
        },
        {
            "file": "examples/js/animation/cameraFollowAnimation.js",
            "line": 144,
            "description": "Fired whenever this CameraFollowAnimation's {{#crossLink \"CameraFollowAnimation/target:property\"}}{{/crossLink}} property changes.",
            "itemtype": "event",
            "name": "target",
            "params": [
                {
                    "name": "value",
                    "description": "The property's new value"
                }
            ],
            "class": "CameraFollowAnimation",
            "module": "xeogl",
            "submodule": "animation"
        },
        {
            "file": "examples/js/animation/cameraFollowAnimation.js",
            "line": 171,
            "description": "Indicates whether this CameraFollowAnimation will either fly or jump to each updated position of the\n{{#crossLink \"CameraFollowAnimation/target:property\"}}{{/crossLink}}.\n\nLeave this false if the target updates continuously, otherwise leave it true\nif you want the camera to fly smoothly to each updated target extents\nfor a less disorientating experience.",
            "itemtype": "property",
            "name": "fly",
            "type": "Boolean",
            "default": "false",
            "class": "CameraFollowAnimation",
            "module": "xeogl",
            "submodule": "animation"
        },
        {
            "file": "examples/js/animation/cameraFollowAnimation.js",
            "line": 194,
            "description": "When true, will ensure that this CameraFollowAnimation always adjusts the distance between the {{#crossLink \"Camera\"}}\ncamera{{/crossLink}}'s {{#crossLink \"Lookat/eye:property\"}}eye{{/crossLink}} and {{#crossLink \"Lookat/look:property\"}}{{/crossLink}}\npositions so as to ensure that the {{#crossLink \"CameraFollowAnimation/target:property\"}}{{/crossLink}} is always filling the view volume.\n\nWhen false, the eye will remain at its current distance from the look position.",
            "itemtype": "property",
            "name": "fit",
            "type": "Boolean",
            "default": "true",
            "class": "CameraFollowAnimation",
            "module": "xeogl",
            "submodule": "animation"
        },
        {
            "file": "examples/js/animation/cameraFollowAnimation.js",
            "line": 217,
            "description": "When {{#crossLink \"CameraFollowAnimation/fit:property\"}}{{/crossLink}} is set, to fit the target\n{{#crossLink \"CameraFollowAnimation/target:property\"}}{{/crossLink}} in view, this property indicates how much\nof the total field-of-view, in degrees, that the {{#crossLink \"CameraFollowAnimation/target:property\"}}{{/crossLink}} should fill.",
            "itemtype": "property",
            "name": "fitFOV",
            "default": "45",
            "type": "Number",
            "class": "CameraFollowAnimation",
            "module": "xeogl",
            "submodule": "animation"
        },
        {
            "file": "examples/js/animation/cameraFollowAnimation.js",
            "line": 238,
            "description": "When true, will cause this CameraFollowAnimation to point the {{#crossLink \"Camera\"}}{{/crossLink}}\nin the direction that it is travelling.",
            "itemtype": "property",
            "name": "trail",
            "type": "Boolean",
            "default": "false",
            "class": "CameraFollowAnimation",
            "module": "xeogl",
            "submodule": "animation"
        },
        {
            "file": "examples/js/animation/cameraPath.js",
            "line": 24,
            "description": "JavaScript class name for this Component.",
            "itemtype": "property",
            "name": "type",
            "type": "String",
            "final": 1,
            "class": "CameraPath",
            "module": "xeogl",
            "submodule": "animation"
        },
        {
            "file": "examples/js/animation/cameraPath.js",
            "line": 48,
            "description": "The frames set on the constructor and added with {{#crossLink \"CameraPath/addFrame:method\"}}{{/crossLink}}.",
            "itemtype": "property",
            "name": "frames",
            "type": "{[]}",
            "final": 1,
            "class": "CameraPath",
            "module": "xeogl",
            "submodule": "animation"
        },
        {
            "file": "examples/js/animation/cameraPath.js",
            "line": 62,
            "description": "The {{#crossLink \"SplineCurve\"}}{{/crossLink}} which defines the path along which a\n{{#crossLink \"Camera/property:eye\"}}Camera's eye position{{/crossLink}} travels.\n\nThis property is read-only and is internally created and destroyed by this CameraPath.",
            "itemtype": "property",
            "name": "eyeCurve",
            "type": "{SplineCurve}",
            "final": 1,
            "class": "CameraPath",
            "module": "xeogl",
            "submodule": "animation"
        },
        {
            "file": "examples/js/animation/cameraPath.js",
            "line": 79,
            "description": "The {{#crossLink \"SplineCurve\"}}{{/crossLink}} which defines the path along which a\n{{#crossLink \"Camera/property:eye\"}}Camera's look position{{/crossLink}} travels.\n\nThis property is read-only and is internally created and destroyed by this CameraPath.",
            "itemtype": "property",
            "name": "lookCurve",
            "type": "{SplineCurve}",
            "final": 1,
            "class": "CameraPath",
            "module": "xeogl",
            "submodule": "animation"
        },
        {
            "file": "examples/js/animation/cameraPath.js",
            "line": 96,
            "description": "The {{#crossLink \"SplineCurve\"}}{{/crossLink}} which defines the path along which a\n{{#crossLink \"Camera/property:up\"}}Camera's up vector{{/crossLink}} travels.\n\nThis property is read-only and is internally created and destroyed by this CameraPath.",
            "itemtype": "property",
            "name": "upCurve",
            "type": "{SplineCurve}",
            "final": 1,
            "class": "CameraPath",
            "module": "xeogl",
            "submodule": "animation"
        },
        {
            "file": "examples/js/animation/cameraPath.js",
            "line": 114,
            "description": "Adds a frame to this CameraPath, given as the current position of a {{#crossLink \"Camera\"}}{{/crossLink}}.",
            "params": [
                {
                    "name": "t",
                    "description": "Time instant for the new frame.",
                    "type": "Number"
                },
                {
                    "name": "camera",
                    "description": "The {{#crossLink \"Camera\"}}{{/crossLink}}.",
                    "type": "Camera"
                }
            ],
            "class": "CameraPath",
            "module": "xeogl",
            "submodule": "animation"
        },
        {
            "file": "examples/js/animation/cameraPath.js",
            "line": 125,
            "description": "Adds a frame to this CameraPath, specified as values for eye, look and up vectors at a given time instant.",
            "params": [
                {
                    "name": "t",
                    "description": "Time instant for the new frame;",
                    "type": "Number"
                },
                {
                    "name": "eye",
                    "description": "A three-element vector specifying the eye position for the new frame.",
                    "type": "Float32Array"
                },
                {
                    "name": "look",
                    "description": "A three-element vector specifying the look position for the new frame.",
                    "type": "Float32Array"
                },
                {
                    "name": "up",
                    "description": "A three-element vector specifying the up vector for the new frame.",
                    "type": "Float32Array"
                }
            ],
            "class": "CameraPath",
            "module": "xeogl",
            "submodule": "animation"
        },
        {
            "file": "examples/js/animation/cameraPath.js",
            "line": 146,
            "description": "Adds multiple frames to this CameraPath, each frame specified as a set of values for eye, look and up\nvectors at a given time instant.",
            "params": [
                {
                    "name": "frames",
                    "description": "An array of frames.",
                    "type": "Array"
                }
            ],
            "class": "CameraPath",
            "module": "xeogl",
            "submodule": "animation"
        },
        {
            "file": "examples/js/animation/cameraPath.js",
            "line": 160,
            "description": "Sets the position of the {{#crossLink \"Scene\"}}{{/crossLink}}'s {{#crossLink \"Camera\"}}{{/crossLink}} to a position interpolated within this CameraPath\nat the given time instant.",
            "params": [
                {
                    "name": "t",
                    "description": "Time instant.",
                    "type": "Number"
                }
            ],
            "class": "CameraPath",
            "module": "xeogl",
            "submodule": "animation"
        },
        {
            "file": "examples/js/animation/cameraPath.js",
            "line": 182,
            "description": "Gets eye, look and up vectors on this CameraPath at a given instant.",
            "params": [
                {
                    "name": "t",
                    "description": "Time instant.",
                    "type": "Number"
                },
                {
                    "name": "eye",
                    "description": "The eye position to update.",
                    "type": "Float32Array"
                },
                {
                    "name": "look",
                    "description": "The look position to update.",
                    "type": "Float32Array"
                },
                {
                    "name": "up",
                    "description": "The up vector to update.",
                    "type": "Float32Array"
                }
            ],
            "class": "CameraPath",
            "module": "xeogl",
            "submodule": "animation"
        },
        {
            "file": "examples/js/animation/cameraPath.js",
            "line": 197,
            "description": "Removes all frames from this CameraPath.",
            "class": "CameraPath",
            "module": "xeogl",
            "submodule": "animation"
        },
        {
            "file": "examples/js/animation/cameraPathAnimation.js",
            "line": 143,
            "description": "JavaScript class name for this Component.",
            "itemtype": "property",
            "name": "type",
            "type": "String",
            "final": 1,
            "class": "CameraPathAnimation",
            "module": "xeogl",
            "submodule": "animation"
        },
        {
            "file": "examples/js/animation/cameraPathAnimation.js",
            "line": 237,
            "description": "The {{#crossLink \"CameraPath\"}}{{/crossLink}} for this CameraPathAnimation.\n\nFires a {{#crossLink \"CameraPathAnimation/cameraPath:event\"}}{{/crossLink}} event on change.",
            "itemtype": "property",
            "name": "cameraPath",
            "type": "CameraPath",
            "class": "CameraPathAnimation",
            "module": "xeogl",
            "submodule": "animation"
        },
        {
            "file": "examples/js/animation/cameraPathAnimation.js",
            "line": 261,
            "description": "The rate at which this CameraPathAnimation plays.",
            "itemtype": "property",
            "name": "rate",
            "type": "Number",
            "class": "CameraPathAnimation",
            "module": "xeogl",
            "submodule": "animation"
        },
        {
            "file": "examples/js/animation/cameraPathAnimation.js",
            "line": 279,
            "description": "Begins playing this CameraPathAnimation from the current time.",
            "itemtype": "method",
            "name": "play",
            "class": "CameraPathAnimation",
            "module": "xeogl",
            "submodule": "animation"
        },
        {
            "file": "examples/js/animation/cameraPathAnimation.js",
            "line": 292,
            "description": "Begins playing this CameraPathAnimation from the current time to the given time.",
            "itemtype": "method",
            "name": "playToT",
            "params": [
                {
                    "name": "t",
                    "description": "Time instant.",
                    "type": "Number"
                }
            ],
            "class": "CameraPathAnimation",
            "module": "xeogl",
            "submodule": "animation"
        },
        {
            "file": "examples/js/animation/cameraPathAnimation.js",
            "line": 313,
            "description": "Begins playing this CameraPathAnimation from the current time to the time at the given frame.",
            "itemtype": "method",
            "name": "playToFrame",
            "params": [
                {
                    "name": "frameIdx",
                    "description": "Index of the frame to play to.",
                    "type": "Number"
                }
            ],
            "class": "CameraPathAnimation",
            "module": "xeogl",
            "submodule": "animation"
        },
        {
            "file": "examples/js/animation/cameraPathAnimation.js",
            "line": 339,
            "description": "Flies this CameraPathAnimation's {{#crossLink \"Camera\"}}{{/crossLink}} to the time at the given frame.",
            "itemtype": "method",
            "name": "flyToFrame",
            "params": [
                {
                    "name": "frameIdx",
                    "description": "Index of the frame to play to.",
                    "type": "Number"
                },
                {
                    "name": "ok",
                    "description": "Callback to fire when playing is complete.",
                    "type": "Function",
                    "optional": true
                }
            ],
            "class": "CameraPathAnimation",
            "module": "xeogl",
            "submodule": "animation"
        },
        {
            "file": "examples/js/animation/cameraPathAnimation.js",
            "line": 365,
            "description": "Scrubs (sets) this CameraPathAnimation to the the given time.",
            "itemtype": "method",
            "name": "scrubToT",
            "params": [
                {
                    "name": "t",
                    "description": "Time instant.",
                    "type": "Number"
                }
            ],
            "class": "CameraPathAnimation",
            "module": "xeogl",
            "submodule": "animation"
        },
        {
            "file": "examples/js/animation/cameraPathAnimation.js",
            "line": 392,
            "description": "Scrubs this CameraPathAnimation to the given frame.",
            "itemtype": "method",
            "name": "scrubToFrame",
            "params": [
                {
                    "name": "frameIdx",
                    "description": "Index of the frame to scrub to.",
                    "type": "Number"
                }
            ],
            "class": "CameraPathAnimation",
            "module": "xeogl",
            "submodule": "animation"
        },
        {
            "file": "examples/js/animation/cameraPathAnimation.js",
            "line": 426,
            "description": "Stops playing this CameraPathAnimation.",
            "itemtype": "method",
            "name": "stop",
            "class": "CameraPathAnimation",
            "module": "xeogl",
            "submodule": "animation"
        },
        {
            "file": "examples/js/annotations/annotation.js",
            "line": 249,
            "description": "Fired whenever the mouse is clicked on this Annotation's {{#crossLink \"Annotation/pin:property\"}}{{/crossLink}}.",
            "itemtype": "event",
            "name": "pinClicked",
            "class": "Annotation",
            "module": "xeogl",
            "submodule": "annotations"
        },
        {
            "file": "examples/js/annotations/annotation.js",
            "line": 259,
            "description": "Short piece of text to show inside the pin for the Annotation.\n\nUsually this would be a single number or letter.\n\nAutomatically truncated to 2 characters.\n\nFires a {{#crossLink \"Annotation/glyph:event\"}}{{/crossLink}} event on change.",
            "itemtype": "property",
            "name": "glyph",
            "default": "\"\"",
            "type": "{String}",
            "class": "Annotation",
            "module": "xeogl",
            "submodule": "annotations"
        },
        {
            "file": "examples/js/annotations/annotation.js",
            "line": 282,
            "description": "Fired whenever this Annotation's {{#crossLink \"Annotation/glyph:property\"}}{{/crossLink}} property changes.",
            "itemtype": "event",
            "name": "glyph",
            "params": [
                {
                    "name": "value",
                    "description": "The property's new value",
                    "type": "Number"
                }
            ],
            "class": "Annotation",
            "module": "xeogl",
            "submodule": "annotations"
        },
        {
            "file": "examples/js/annotations/annotation.js",
            "line": 295,
            "description": "Title text for the Annotation's label.\n\nAutomatically truncated to 64 characters.\n\nFires a {{#crossLink \"Annotation/title:event\"}}{{/crossLink}} event on change.",
            "itemtype": "property",
            "name": "title",
            "default": "\"\"",
            "type": "{String}",
            "class": "Annotation",
            "module": "xeogl",
            "submodule": "annotations"
        },
        {
            "file": "examples/js/annotations/annotation.js",
            "line": 316,
            "description": "Fired whenever this Annotation's {{#crossLink \"Annotation/title:property\"}}{{/crossLink}} property changes.",
            "itemtype": "event",
            "name": "title",
            "params": [
                {
                    "name": "value",
                    "description": "The property's new value",
                    "type": "Number"
                }
            ],
            "class": "Annotation",
            "module": "xeogl",
            "submodule": "annotations"
        },
        {
            "file": "examples/js/annotations/annotation.js",
            "line": 329,
            "description": "Description text for the Annotation's label.\n\nAutomatically truncated to 1025 characters.\n\nFires a {{#crossLink \"Annotation/desc:event\"}}{{/crossLink}} event on change.",
            "itemtype": "property",
            "name": "desc",
            "default": "\"\"",
            "type": "{String}",
            "class": "Annotation",
            "module": "xeogl",
            "submodule": "annotations"
        },
        {
            "file": "examples/js/annotations/annotation.js",
            "line": 350,
            "description": "Fired whenever this Annotation's {{#crossLink \"Annotation/desc:property\"}}{{/crossLink}} property changes.",
            "itemtype": "event",
            "name": "desc",
            "params": [
                {
                    "name": "value",
                    "description": "The property's new value",
                    "type": "Number"
                }
            ],
            "class": "Annotation",
            "module": "xeogl",
            "submodule": "annotations"
        },
        {
            "file": "examples/js/annotations/annotation.js",
            "line": 363,
            "description": "Position of the eye when looking at the Annotation.\n\nFires a {{#crossLink \"Annotation/eye:event\"}}{{/crossLink}} event on change.",
            "itemtype": "property",
            "name": "eye",
            "default": "[0,0,10]",
            "type": "{Float32Array}",
            "class": "Annotation",
            "module": "xeogl",
            "submodule": "annotations"
        },
        {
            "file": "examples/js/annotations/annotation.js",
            "line": 383,
            "description": "Fired whenever this Annotation's {{#crossLink \"Annotation/eye:property\"}}{{/crossLink}} property changes.",
            "itemtype": "event",
            "name": "eye",
            "params": [
                {
                    "name": "value",
                    "description": "The property's new value",
                    "type": "Number"
                }
            ],
            "class": "Annotation",
            "module": "xeogl",
            "submodule": "annotations"
        },
        {
            "file": "examples/js/annotations/annotation.js",
            "line": 396,
            "description": "Point-of-interest when looking at the Annotation.\n\nFires a {{#crossLink \"Annotation/look:event\"}}{{/crossLink}} event on change.",
            "itemtype": "property",
            "name": "look",
            "default": "[0,0,0]",
            "type": "{Float32Array}",
            "class": "Annotation",
            "module": "xeogl",
            "submodule": "annotations"
        },
        {
            "file": "examples/js/annotations/annotation.js",
            "line": 416,
            "description": "Fired whenever this Annotation's {{#crossLink \"Annotation/look:property\"}}{{/crossLink}} property changes.",
            "itemtype": "event",
            "name": "look",
            "params": [
                {
                    "name": "value",
                    "description": "The property's new value",
                    "type": "Number"
                }
            ],
            "class": "Annotation",
            "module": "xeogl",
            "submodule": "annotations"
        },
        {
            "file": "examples/js/annotations/annotation.js",
            "line": 429,
            "description": "\"Up\" vector when looking at the Annotation.\n\nFires a {{#crossLink \"Annotation/up:event\"}}{{/crossLink}} event on change.",
            "itemtype": "property",
            "name": "up",
            "default": "[0,1,0]",
            "type": "{Float32Array}",
            "class": "Annotation",
            "module": "xeogl",
            "submodule": "annotations"
        },
        {
            "file": "examples/js/annotations/annotation.js",
            "line": 449,
            "description": "Fired whenever this Annotation's {{#crossLink \"Annotation/up:property\"}}{{/crossLink}} property changes.",
            "itemtype": "event",
            "name": "up",
            "params": [
                {
                    "name": "value",
                    "description": "The property's new value",
                    "type": "Number"
                }
            ],
            "class": "Annotation",
            "module": "xeogl",
            "submodule": "annotations"
        },
        {
            "file": "examples/js/annotations/annotation.js",
            "line": 462,
            "description": "Specifies whether a UI element is shown at the Annotation's pin position (typically a circle).\n\nFires a {{#crossLink \"Annotation/pinShown:event\"}}{{/crossLink}} event on change.",
            "itemtype": "property",
            "name": "pinShown",
            "default": "true",
            "type": "{Boolean}",
            "class": "Annotation",
            "module": "xeogl",
            "submodule": "annotations"
        },
        {
            "file": "examples/js/annotations/annotation.js",
            "line": 484,
            "description": "Fired whenever this Annotation's {{#crossLink \"Annotation/pinShown:property\"}}{{/crossLink}} property changes.",
            "itemtype": "event",
            "name": "pinShown",
            "params": [
                {
                    "name": "value",
                    "description": "The property's new value",
                    "type": "Number"
                }
            ],
            "class": "Annotation",
            "module": "xeogl",
            "submodule": "annotations"
        },
        {
            "file": "examples/js/annotations/annotation.js",
            "line": 497,
            "description": "Specifies whether the label is shown for the Annotation.\n\nFires a {{#crossLink \"Annotation/labelShown:event\"}}{{/crossLink}} event on change.",
            "itemtype": "property",
            "name": "labelShown",
            "default": "true",
            "type": "{Boolean}",
            "class": "Annotation",
            "module": "xeogl",
            "submodule": "annotations"
        },
        {
            "file": "examples/js/annotations/annotation.js",
            "line": 518,
            "description": "Fired whenever this Annotation's {{#crossLink \"Annotation/labelShown:property\"}}{{/crossLink}} property changes.",
            "itemtype": "event",
            "name": "labelShown",
            "params": [
                {
                    "name": "value",
                    "description": "The property's new value",
                    "type": "Number"
                }
            ],
            "class": "Annotation",
            "module": "xeogl",
            "submodule": "annotations"
        },
        {
            "file": "examples/js/annotations/pin.js",
            "line": 285,
            "description": "The {{#crossLink \"Entity\"}}{{/crossLink}} this Pin is attached to.\n\nYou can attach a Pin to a different {{#crossLink \"Entity\"}}{{/crossLink}} at any time.\n\nNote that {{#crossLink \"Pin/primIndex:property\"}}{{/crossLink}} should always\nbe within the {{#crossLink \"Geometry/indices:property\"}}{{/crossLink}} of the {{#crossLink \"Geometry\"}}{{/crossLink}} belonging to the {{#crossLink \"Entity\"}}Entity{{/crossLink}}.\n\nFires an {{#crossLink \"Pin/entity:event\"}}{{/crossLink}} event on change.",
            "itemtype": "property",
            "name": "entity",
            "type": "{Number | String | xeogl.Entity}",
            "class": "Pin",
            "module": "xeogl",
            "submodule": "annotations"
        },
        {
            "file": "examples/js/annotations/pin.js",
            "line": 302,
            "description": "Fired whenever this Pin's {{#crossLink \"Pin/entity:property\"}}{{/crossLink}} property changes.",
            "itemtype": "event",
            "name": "entity",
            "params": [
                {
                    "name": "value",
                    "description": "The property's new value"
                }
            ],
            "class": "Pin",
            "module": "xeogl",
            "submodule": "annotations"
        },
        {
            "file": "examples/js/annotations/pin.js",
            "line": 322,
            "description": "Index of the triangle containing this pin.\n\nWithin the {{#crossLink \"Geometry/indices:property\"}}{{/crossLink}} of the {{#crossLink \"Geometry\"}}{{/crossLink}} attached to the {{#crossLink \"Entity\"}}{{/crossLink}}, this is the index of the first element for that triangle.\n\nFires a {{#crossLink \"Pin/primIndex:event\"}}{{/crossLink}} event on change.",
            "itemtype": "property",
            "name": "primIndex",
            "default": "0",
            "type": "Number",
            "class": "Pin",
            "module": "xeogl",
            "submodule": "annotations"
        },
        {
            "file": "examples/js/annotations/pin.js",
            "line": 347,
            "description": "Fired whenever this Pin's {{#crossLink \"Pin/primIndex:property\"}}{{/crossLink}} property changes.",
            "itemtype": "event",
            "name": "primIndex",
            "params": [
                {
                    "name": "value",
                    "description": "Number The property's new value"
                }
            ],
            "class": "Pin",
            "module": "xeogl",
            "submodule": "annotations"
        },
        {
            "file": "examples/js/annotations/pin.js",
            "line": 361,
            "description": "Barycentric coordinates of this Pin within its triangle.\n\nA value of ````[0.3, 0.3, 0.3]```` is the center of the triangle.\n\nFires a {{#crossLink \"Pin/bary:event\"}}{{/crossLink}} event on change.",
            "itemtype": "property",
            "name": "bary",
            "default": "[0.3,0.3,0.3]",
            "type": "Float32Array",
            "class": "Pin",
            "module": "xeogl",
            "submodule": "annotations"
        },
        {
            "file": "examples/js/annotations/pin.js",
            "line": 378,
            "description": "Fired whenever this Pin's {{#crossLink \"Pin/bary:property\"}}{{/crossLink}} property changes.",
            "itemtype": "event",
            "name": "bary",
            "params": [
                {
                    "name": "value",
                    "description": "Float32Array The property's new value"
                }
            ],
            "class": "Pin",
            "module": "xeogl",
            "submodule": "annotations"
        },
        {
            "file": "examples/js/annotations/pin.js",
            "line": 391,
            "description": "How far the Pin is lifted out of its triangle, along the surface normal vector.\n\nThis is used when occlusion culling, to ensure that the Pin is not lost inside\nthe surface it's attached to.\n\nFires a {{#crossLink \"Pin/offset:event\"}}{{/crossLink}} event on change.",
            "itemtype": "property",
            "name": "offset",
            "default": "0.2",
            "type": "Number",
            "class": "Pin",
            "module": "xeogl",
            "submodule": "annotations"
        },
        {
            "file": "examples/js/annotations/pin.js",
            "line": 409,
            "description": "Fired whenever this Pin's {{#crossLink \"Pin/offset:property\"}}{{/crossLink}} property changes.",
            "itemtype": "event",
            "name": "offset",
            "params": [
                {
                    "name": "value",
                    "description": "Number The property's new value"
                }
            ],
            "class": "Pin",
            "module": "xeogl",
            "submodule": "annotations"
        },
        {
            "file": "examples/js/annotations/pin.js",
            "line": 423,
            "description": "Indicates whether occlusion testing is performed for this Pin.\n\nWhen this is true, then {{#crossLink \"Pin/visible:property\"}}{{/crossLink}} will\nbe false whenever the Pin is hidden behind something else in the 3D view.\n\nSet this false if the Pin is to remain visible when hidden behind things while\nbeing within the canvas.\n\nFires a {{#crossLink \"Pin/occludable:event\"}}{{/crossLink}} event on change.",
            "itemtype": "property",
            "name": "occludable",
            "default": "false",
            "type": "Float32Array",
            "class": "Pin",
            "module": "xeogl",
            "submodule": "annotations"
        },
        {
            "file": "examples/js/annotations/pin.js",
            "line": 462,
            "description": "Fired whenever this Pin's {{#crossLink \"Pin/occludable:property\"}}{{/crossLink}} property changes.",
            "itemtype": "event",
            "name": "occludable",
            "params": [
                {
                    "name": "value",
                    "description": "Float32Array The property's new value"
                }
            ],
            "class": "Pin",
            "module": "xeogl",
            "submodule": "annotations"
        },
        {
            "file": "examples/js/annotations/pin.js",
            "line": 475,
            "description": "Local-space 3D coordinates of this Pin.\n\nThis is read-only and is automatically calculated.\n\nFires a {{#crossLink \"Pin/localPos:event\"}}{{/crossLink}} event on change.",
            "itemtype": "property",
            "name": "localPos",
            "default": "[0,0,0]",
            "type": "Float32Array",
            "final": 1,
            "class": "Pin",
            "module": "xeogl",
            "submodule": "annotations"
        },
        {
            "file": "examples/js/annotations/pin.js",
            "line": 495,
            "description": "World-space 3D coordinates of this Pin.\n\nThis is read-only and is automatically calculated.\n\nFires a {{#crossLink \"Pin/worldPos:event\"}}{{/crossLink}} event on change.",
            "itemtype": "property",
            "name": "worldPos",
            "default": "[0,0,0]",
            "type": "Float32Array",
            "final": 1,
            "class": "Pin",
            "module": "xeogl",
            "submodule": "annotations"
        },
        {
            "file": "examples/js/annotations/pin.js",
            "line": 515,
            "description": "View-space 3D coordinates of this Pin.\n\nThis is read-only and is automatically calculated.",
            "itemtype": "property",
            "name": "viewPos",
            "default": "[0,0]",
            "type": "Float32Array",
            "final": 1,
            "class": "Pin",
            "module": "xeogl",
            "submodule": "annotations"
        },
        {
            "file": "examples/js/annotations/pin.js",
            "line": 534,
            "description": "Canvas-space 2D coordinates of this Pin.\n\nThis is read-only and is automatically calculated.",
            "itemtype": "property",
            "name": "canvasPos",
            "default": "[0,0]",
            "type": "Float32Array",
            "final": 1,
            "class": "Pin",
            "module": "xeogl",
            "submodule": "annotations"
        },
        {
            "file": "examples/js/annotations/pin.js",
            "line": 567,
            "description": "World-space normal vector of this Pin.\n\nThis is read-only and is automatically calculated.\n\nFires a {{#crossLink \"Pin/worldNormal:event\"}}{{/crossLink}} event on change.",
            "itemtype": "property",
            "name": "worldNormal",
            "default": "[0,0,1]",
            "type": "Float32Array",
            "final": 1,
            "class": "Pin",
            "module": "xeogl",
            "submodule": "annotations"
        },
        {
            "file": "examples/js/annotations/pin.js",
            "line": 587,
            "description": "Indicates if this Pin is currently visible.\n\nThis is read-only and is automatically calculated.\n\nThe Pin is invisible whenever:\n\n* {{#crossLink \"Pin/canvasPos:property\"}}{{/crossLink}} is currently outside the canvas, or\n* {{#crossLink \"Pin/occludable:property\"}}{{/crossLink}} is true and the Pin is currently occluded by something in the 3D view.\n\nFires a {{#crossLink \"Pin/visible:event\"}}{{/crossLink}} event on change.",
            "itemtype": "property",
            "name": "visible",
            "default": "true",
            "type": "Boolean",
            "final": 1,
            "class": "Pin",
            "module": "xeogl",
            "submodule": "annotations"
        },
        {
            "file": "examples/js/annotations/pin.js",
            "line": 659,
            "description": "Fired whenever this Pin's {{#crossLink \"Pin/localPos:property\"}}{{/crossLink}} property changes.",
            "itemtype": "event",
            "name": "localPos",
            "class": "Pin",
            "module": "xeogl",
            "submodule": "annotations"
        },
        {
            "file": "examples/js/annotations/pin.js",
            "line": 668,
            "description": "Fired whenever this Pin's {{#crossLink \"Pin/worldPos:property\"}}{{/crossLink}} property changes.",
            "itemtype": "event",
            "name": "worldPos",
            "class": "Pin",
            "module": "xeogl",
            "submodule": "annotations"
        },
        {
            "file": "examples/js/annotations/pin.js",
            "line": 674,
            "description": "Fired whenever this Pin's {{#crossLink \"Pin/worldNormal:property\"}}{{/crossLink}} property changes.",
            "itemtype": "event",
            "name": "worldNormal",
            "class": "Pin",
            "module": "xeogl",
            "submodule": "annotations"
        },
        {
            "file": "examples/js/annotations/pin.js",
            "line": 783,
            "description": "Fired whenever this Pin's {{#crossLink \"Pin/visible:property\"}}{{/crossLink}} property changes.",
            "itemtype": "event",
            "name": "visible",
            "params": [
                {
                    "name": "value",
                    "description": "Float32Array The property's new value"
                }
            ],
            "class": "Pin",
            "module": "xeogl",
            "submodule": "annotations"
        },
        {
            "file": "examples/js/effects/stereoEffect.js",
            "line": 60,
            "description": "Field-of-view angle in degrees.",
            "itemtype": "property",
            "name": "fov",
            "type": "Number",
            "default": "45",
            "class": "StereoEffect",
            "module": "xeogl",
            "submodule": "effects"
        },
        {
            "file": "examples/js/effects/stereoEffect.js",
            "line": 86,
            "description": "Flag which indicates whether this StereoEffect is active or not.",
            "itemtype": "property",
            "name": "active",
            "type": "Boolean",
            "default": "true",
            "class": "StereoEffect",
            "module": "xeogl",
            "submodule": "effects"
        },
        {
            "file": "examples/js/curves/cubicBezierCurve.js",
            "line": 112,
            "description": "JavaScript class name for this Component.",
            "itemtype": "property",
            "name": "type",
            "type": "String",
            "final": 1,
            "class": "CubicBezierCurve",
            "module": "xeogl",
            "submodule": "curves"
        },
        {
            "file": "examples/js/curves/cubicBezierCurve.js",
            "line": 135,
            "description": "Starting point on this CubicBezierCurve.\n\nFires a {{#crossLink \"CubicBezierCurve/v0:event\"}}{{/crossLink}} event on change.",
            "itemtype": "property",
            "name": "v0",
            "default": "[0.0, 0.0, 0.0]",
            "type": "Float32Array",
            "class": "CubicBezierCurve",
            "module": "xeogl",
            "submodule": "curves"
        },
        {
            "file": "examples/js/curves/cubicBezierCurve.js",
            "line": 148,
            "description": "Fired whenever this CubicBezierCurve's\n{{#crossLink \"CubicBezierCurve/v0:property\"}}{{/crossLink}} property changes.",
            "itemtype": "event",
            "name": "v0",
            "params": [
                {
                    "name": "value",
                    "description": "The property's new value"
                }
            ],
            "class": "CubicBezierCurve",
            "module": "xeogl",
            "submodule": "curves"
        },
        {
            "file": "examples/js/curves/cubicBezierCurve.js",
            "line": 162,
            "description": "First control point on this CubicBezierCurve.\n\nFires a {{#crossLink \"CubicBezierCurve/v1:event\"}}{{/crossLink}} event on change.",
            "itemtype": "property",
            "name": "v1",
            "default": "[0.0, 0.0, 0.0]",
            "type": "Float32Array",
            "class": "CubicBezierCurve",
            "module": "xeogl",
            "submodule": "curves"
        },
        {
            "file": "examples/js/curves/cubicBezierCurve.js",
            "line": 175,
            "description": "Fired whenever this CubicBezierCurve's\n{{#crossLink \"CubicBezierCurve/v1:property\"}}{{/crossLink}} property changes.",
            "itemtype": "event",
            "name": "v1",
            "params": [
                {
                    "name": "value",
                    "description": "The property's new value"
                }
            ],
            "class": "CubicBezierCurve",
            "module": "xeogl",
            "submodule": "curves"
        },
        {
            "file": "examples/js/curves/cubicBezierCurve.js",
            "line": 189,
            "description": "Second control point on this CubicBezierCurve.\n\nFires a {{#crossLink \"CubicBezierCurve/v2:event\"}}{{/crossLink}} event on change.",
            "itemtype": "property",
            "name": "v2",
            "default": "[0.0, 0.0, 0.0]",
            "type": "Float32Array",
            "class": "CubicBezierCurve",
            "module": "xeogl",
            "submodule": "curves"
        },
        {
            "file": "examples/js/curves/cubicBezierCurve.js",
            "line": 202,
            "description": "Fired whenever this CubicBezierCurve's\n{{#crossLink \"CubicBezierCurve/v2:property\"}}{{/crossLink}} property changes.",
            "itemtype": "event",
            "name": "v2",
            "params": [
                {
                    "name": "value",
                    "description": "The property's new value"
                }
            ],
            "class": "CubicBezierCurve",
            "module": "xeogl",
            "submodule": "curves"
        },
        {
            "file": "examples/js/curves/cubicBezierCurve.js",
            "line": 216,
            "description": "End point on this CubicBezierCurve.\n\nFires a {{#crossLink \"CubicBezierCurve/v3:event\"}}{{/crossLink}} event on change.",
            "itemtype": "property",
            "name": "v3",
            "default": "[0.0, 0.0, 0.0]",
            "type": "Float32Array",
            "class": "CubicBezierCurve",
            "module": "xeogl",
            "submodule": "curves"
        },
        {
            "file": "examples/js/curves/cubicBezierCurve.js",
            "line": 229,
            "description": "Fired whenever this CubicBezierCurve's\n{{#crossLink \"CubicBezierCurve/v3:property\"}}{{/crossLink}} property changes.",
            "itemtype": "event",
            "name": "v3",
            "params": [
                {
                    "name": "value",
                    "description": "The property's new value"
                }
            ],
            "class": "CubicBezierCurve",
            "module": "xeogl",
            "submodule": "curves"
        },
        {
            "file": "examples/js/curves/cubicBezierCurve.js",
            "line": 243,
            "description": "Current position of progress along this CubicBezierCurve.\n\nAutomatically clamps to range [0..1].\n\nFires a {{#crossLink \"CubicBezierCurve/t:event\"}}{{/crossLink}} event on change.",
            "itemtype": "property",
            "name": "t",
            "default": "0",
            "type": "Number",
            "class": "CubicBezierCurve",
            "module": "xeogl",
            "submodule": "curves"
        },
        {
            "file": "examples/js/curves/cubicBezierCurve.js",
            "line": 261,
            "description": "Fired whenever this CubicBezierCurve's\n{{#crossLink \"CubicBezierCurve/t:property\"}}{{/crossLink}} property changes.",
            "itemtype": "event",
            "name": "t",
            "params": [
                {
                    "name": "value",
                    "description": "The property's new value"
                }
            ],
            "class": "CubicBezierCurve",
            "module": "xeogl",
            "submodule": "curves"
        },
        {
            "file": "examples/js/curves/cubicBezierCurve.js",
            "line": 275,
            "description": "Point on this CubicBezierCurve at position {{#crossLink \"CubicBezierCurve/t:property\"}}{{/crossLink}}.",
            "itemtype": "property",
            "name": "point",
            "type": "{{Array of Number}}",
            "class": "CubicBezierCurve",
            "module": "xeogl",
            "submodule": "curves"
        },
        {
            "file": "examples/js/curves/cubicBezierCurve.js",
            "line": 289,
            "description": "Returns point on this CubicBezierCurve at the given position.",
            "itemtype": "method",
            "name": "getPoint",
            "params": [
                {
                    "name": "t",
                    "description": "Position to get point at.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "}",
                "type": "Array of Number"
            },
            "class": "CubicBezierCurve",
            "module": "xeogl",
            "submodule": "curves"
        },
        {
            "file": "examples/js/curves/curve.js",
            "line": 34,
            "description": "JavaScript class name for this Component.",
            "itemtype": "property",
            "name": "type",
            "type": "String",
            "final": 1,
            "class": "Curve",
            "module": "xeogl",
            "submodule": "curves"
        },
        {
            "file": "examples/js/curves/curve.js",
            "line": 50,
            "description": "Progress along this Curve.\n\nAutomatically clamps to range [0..1].\n\nFires a {{#crossLink \"Curve/t:event\"}}{{/crossLink}} event on change.",
            "itemtype": "property",
            "name": "t",
            "default": "0",
            "type": "Number",
            "class": "Curve",
            "module": "xeogl",
            "submodule": "curves"
        },
        {
            "file": "examples/js/curves/curve.js",
            "line": 69,
            "description": "Fired whenever this Curve's\n{{#crossLink \"Curve/t:property\"}}{{/crossLink}} property changes.",
            "itemtype": "event",
            "name": "t",
            "params": [
                {
                    "name": "value",
                    "description": "The property's new value"
                }
            ],
            "class": "Curve",
            "module": "xeogl",
            "submodule": "curves"
        },
        {
            "file": "examples/js/curves/curve.js",
            "line": 84,
            "description": "Tangent on this Curve at position {{#crossLink \"Curve/t:property\"}}{{/crossLink}}.",
            "itemtype": "property",
            "name": "tangent",
            "type": "{{Array of Number}}",
            "class": "Curve",
            "module": "xeogl",
            "submodule": "curves"
        },
        {
            "file": "examples/js/curves/curve.js",
            "line": 98,
            "description": "Length of this Curve.",
            "itemtype": "property",
            "name": "length",
            "type": "{Number}",
            "class": "Curve",
            "module": "xeogl",
            "submodule": "curves"
        },
        {
            "file": "examples/js/curves/curve.js",
            "line": 112,
            "description": "Returns a normalized tangent vector on this Curve at the given position.",
            "itemtype": "method",
            "name": "getTangent",
            "params": [
                {
                    "name": "t",
                    "description": "Position to get tangent at.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "} Normalized tangent vector",
                "type": "Array of Number"
            },
            "class": "Curve",
            "module": "xeogl",
            "submodule": "curves"
        },
        {
            "file": "examples/js/curves/curve.js",
            "line": 154,
            "description": "Samples points on this Curve, at the given number of equally-spaced divisions.",
            "itemtype": "method",
            "name": "getPoints",
            "params": [
                {
                    "name": "divisions",
                    "description": "The number of divisions.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Array of sampled 3D points.",
                "type": "Array of Array"
            },
            "class": "Curve",
            "module": "xeogl",
            "submodule": "curves"
        },
        {
            "file": "examples/js/curves/path.js",
            "line": 122,
            "description": "JavaScript class name for this Component.",
            "itemtype": "property",
            "name": "type",
            "type": "String",
            "final": 1,
            "class": "Path",
            "module": "xeogl",
            "submodule": "curves"
        },
        {
            "file": "examples/js/curves/path.js",
            "line": 156,
            "description": "Adds a {{#crossLink \"Curve\"}}{{/crossLink}} to this Path.\n\nFires a {{#crossLink \"Path/curves:event\"}}{{/crossLink}} event on change.",
            "params": [
                {
                    "name": "curve",
                    "description": "The {{#crossLink \"Curve\"}}{{/crossLink}} to add.",
                    "type": "Curve"
                }
            ],
            "class": "Path",
            "module": "xeogl",
            "submodule": "curves"
        },
        {
            "file": "examples/js/curves/path.js",
            "line": 169,
            "description": "Fired whenever this Path's\n{{#crossLink \"Path/curves:property\"}}{{/crossLink}} property changes.",
            "itemtype": "event",
            "name": "curves",
            "params": [
                {
                    "name": "value",
                    "description": "The property's new value"
                }
            ],
            "class": "Path",
            "module": "xeogl",
            "submodule": "curves"
        },
        {
            "file": "examples/js/curves/path.js",
            "line": 180,
            "description": "The {{#crossLink \"Curve\"}}Curves{{/crossLink}} in this Path.\n\nFires a {{#crossLink \"Path/curves:event\"}}{{/crossLink}} event on change.",
            "itemtype": "property",
            "name": "curves",
            "default": "[]",
            "type": "{{Array of Spline, Path, QuadraticBezierCurve or CubicBezierCurve}}",
            "class": "Path",
            "module": "xeogl",
            "submodule": "curves"
        },
        {
            "file": "examples/js/curves/path.js",
            "line": 290,
            "description": "Current point of progress along this Path.\n\nAutomatically clamps to range [0..1].\n\nFires a {{#crossLink \"Path/t:event\"}}{{/crossLink}} event on change.",
            "itemtype": "property",
            "name": "t",
            "default": "0",
            "type": "Number",
            "class": "Path",
            "module": "xeogl",
            "submodule": "curves"
        },
        {
            "file": "examples/js/curves/path.js",
            "line": 308,
            "description": "Fired whenever this Path's\n{{#crossLink \"Path/t:property\"}}{{/crossLink}} property changes.",
            "itemtype": "event",
            "name": "t",
            "params": [
                {
                    "name": "value",
                    "description": "The property's new value"
                }
            ],
            "class": "Path",
            "module": "xeogl",
            "submodule": "curves"
        },
        {
            "file": "examples/js/curves/path.js",
            "line": 322,
            "description": "Point on this Path corresponding to the current value of {{#crossLink \"Path/t:property\"}}{{/crossLink}}.",
            "itemtype": "property",
            "name": "point",
            "type": "{{Array of Number}}",
            "class": "Path",
            "module": "xeogl",
            "submodule": "curves"
        },
        {
            "file": "examples/js/curves/path.js",
            "line": 335,
            "description": "Length of this Path, which is the cumulative length of all {{#crossLink \"Curve/t:property\"}}Curves{{/crossLink}}\ncurrently in {{#crossLink \"Path/curves:property\"}}{{/crossLink}}.",
            "itemtype": "property",
            "name": "length",
            "type": "{Number}",
            "class": "Path",
            "module": "xeogl",
            "submodule": "curves"
        },
        {
            "file": "examples/js/curves/path.js",
            "line": 351,
            "description": "Gets a point on this Path corresponding to the given progress position.",
            "params": [
                {
                    "name": "t",
                    "description": "Indicates point of progress along this curve, in the range [0..1].",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "}",
                "type": "Array of Number"
            },
            "class": "Path",
            "module": "xeogl",
            "submodule": "curves"
        },
        {
            "file": "examples/js/curves/quadraticBezierCurve.js",
            "line": 112,
            "description": "JavaScript class name for this Component.",
            "itemtype": "property",
            "name": "type",
            "type": "String",
            "final": 1,
            "class": "QuadraticBezierCurve",
            "module": "xeogl",
            "submodule": "curves"
        },
        {
            "file": "examples/js/curves/quadraticBezierCurve.js",
            "line": 134,
            "description": "Starting point on this QuadraticBezierCurve.\n\nFires a {{#crossLink \"QuadraticBezierCurve/v0:event\"}}{{/crossLink}} event on change.",
            "itemtype": "property",
            "name": "v0",
            "default": "[0.0, 0.0, 0.0]",
            "type": "Float32Array",
            "class": "QuadraticBezierCurve",
            "module": "xeogl",
            "submodule": "curves"
        },
        {
            "file": "examples/js/curves/quadraticBezierCurve.js",
            "line": 147,
            "description": "Fired whenever this QuadraticBezierCurve's\n{{#crossLink \"QuadraticBezierCurve/v0:property\"}}{{/crossLink}} property changes.",
            "itemtype": "event",
            "name": "v0",
            "params": [
                {
                    "name": "value",
                    "description": "The property's new value"
                }
            ],
            "class": "QuadraticBezierCurve",
            "module": "xeogl",
            "submodule": "curves"
        },
        {
            "file": "examples/js/curves/quadraticBezierCurve.js",
            "line": 161,
            "description": "Middle control point on this QuadraticBezierCurve.\n\nFires a {{#crossLink \"QuadraticBezierCurve/v1:event\"}}{{/crossLink}} event on change.",
            "itemtype": "property",
            "name": "v1",
            "default": "[0.0, 0.0, 0.0]",
            "type": "Float32Array",
            "class": "QuadraticBezierCurve",
            "module": "xeogl",
            "submodule": "curves"
        },
        {
            "file": "examples/js/curves/quadraticBezierCurve.js",
            "line": 174,
            "description": "Fired whenever this QuadraticBezierCurve's\n{{#crossLink \"QuadraticBezierCurve/v1:property\"}}{{/crossLink}} property changes.",
            "itemtype": "event",
            "name": "v1",
            "params": [
                {
                    "name": "value",
                    "description": "The property's new value"
                }
            ],
            "class": "QuadraticBezierCurve",
            "module": "xeogl",
            "submodule": "curves"
        },
        {
            "file": "examples/js/curves/quadraticBezierCurve.js",
            "line": 188,
            "description": "End point on this QuadraticBezierCurve.\n\nFires a {{#crossLink \"QuadraticBezierCurve/v2:event\"}}{{/crossLink}} event on change.",
            "itemtype": "property",
            "name": "v2",
            "default": "[0.0, 0.0, 0.0]",
            "type": "Float32Array",
            "class": "QuadraticBezierCurve",
            "module": "xeogl",
            "submodule": "curves"
        },
        {
            "file": "examples/js/curves/quadraticBezierCurve.js",
            "line": 201,
            "description": "Fired whenever this QuadraticBezierCurve's\n{{#crossLink \"QuadraticBezierCurve/v2:property\"}}{{/crossLink}} property changes.",
            "itemtype": "event",
            "name": "v2",
            "params": [
                {
                    "name": "value",
                    "description": "The property's new value"
                }
            ],
            "class": "QuadraticBezierCurve",
            "module": "xeogl",
            "submodule": "curves"
        },
        {
            "file": "examples/js/curves/quadraticBezierCurve.js",
            "line": 215,
            "description": "Progress along this QuadraticBezierCurve.\n\nAutomatically clamps to range [0..1].\n\nFires a {{#crossLink \"QuadraticBezierCurve/t:event\"}}{{/crossLink}} event on change.",
            "itemtype": "property",
            "name": "t",
            "default": "0",
            "type": "Number",
            "class": "QuadraticBezierCurve",
            "module": "xeogl",
            "submodule": "curves"
        },
        {
            "file": "examples/js/curves/quadraticBezierCurve.js",
            "line": 233,
            "description": "Fired whenever this QuadraticBezierCurve's\n{{#crossLink \"QuadraticBezierCurve/t:property\"}}{{/crossLink}} property changes.",
            "itemtype": "event",
            "name": "t",
            "params": [
                {
                    "name": "value",
                    "description": "The property's new value"
                }
            ],
            "class": "QuadraticBezierCurve",
            "module": "xeogl",
            "submodule": "curves"
        },
        {
            "file": "examples/js/curves/quadraticBezierCurve.js",
            "line": 248,
            "description": "Point on this QuadraticBezierCurve at position {{#crossLink \"QuadraticBezierCurve/t:property\"}}{{/crossLink}}.",
            "itemtype": "property",
            "name": "point",
            "type": "{{Array of Number}}",
            "class": "QuadraticBezierCurve",
            "module": "xeogl",
            "submodule": "curves"
        },
        {
            "file": "examples/js/curves/quadraticBezierCurve.js",
            "line": 262,
            "description": "Returns point on this QuadraticBezierCurve at the given position.",
            "itemtype": "method",
            "name": "getPoint",
            "params": [
                {
                    "name": "t",
                    "description": "Position to get point at.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "}",
                "type": "Array of Number"
            },
            "class": "QuadraticBezierCurve",
            "module": "xeogl",
            "submodule": "curves"
        },
        {
            "file": "examples/js/curves/splineCurve.js",
            "line": 111,
            "description": "JavaScript class name for this Component.",
            "itemtype": "property",
            "name": "type",
            "type": "String",
            "final": 1,
            "class": "SplineCurve",
            "module": "xeogl",
            "submodule": "curves"
        },
        {
            "file": "examples/js/curves/splineCurve.js",
            "line": 131,
            "description": "Control points on this SplineCurve.\n\nFires a {{#crossLink \"SplineCurve/points:event\"}}{{/crossLink}} event on change.",
            "itemtype": "property",
            "name": "points",
            "default": "[]",
            "type": "Float32Array",
            "class": "SplineCurve",
            "module": "xeogl",
            "submodule": "curves"
        },
        {
            "file": "examples/js/curves/splineCurve.js",
            "line": 146,
            "description": "Fired whenever this SplineCurve's\n{{#crossLink \"SplineCurve/points:property\"}}{{/crossLink}} property changes.",
            "itemtype": "event",
            "name": "points",
            "params": [
                {
                    "name": "value",
                    "description": "The property's new value"
                }
            ],
            "class": "SplineCurve",
            "module": "xeogl",
            "submodule": "curves"
        },
        {
            "file": "examples/js/curves/splineCurve.js",
            "line": 160,
            "description": "Progress along this SplineCurve.\n\nAutomatically clamps to range [0..1].\n\nFires a {{#crossLink \"SplineCurve/t:event\"}}{{/crossLink}} event on change.",
            "itemtype": "property",
            "name": "t",
            "default": "0",
            "type": "Number",
            "class": "SplineCurve",
            "module": "xeogl",
            "submodule": "curves"
        },
        {
            "file": "examples/js/curves/splineCurve.js",
            "line": 178,
            "description": "Fired whenever this SplineCurve's\n{{#crossLink \"SplineCurve/t:property\"}}{{/crossLink}} property changes.",
            "itemtype": "event",
            "name": "t",
            "params": [
                {
                    "name": "value",
                    "description": "The property's new value"
                }
            ],
            "class": "SplineCurve",
            "module": "xeogl",
            "submodule": "curves"
        },
        {
            "file": "examples/js/curves/splineCurve.js",
            "line": 192,
            "description": "Point on this SplineCurve at position {{#crossLink \"SplineCurve/t:property\"}}{{/crossLink}}.",
            "itemtype": "property",
            "name": "point",
            "type": "{{Array of Number}}",
            "class": "SplineCurve",
            "module": "xeogl",
            "submodule": "curves"
        },
        {
            "file": "examples/js/curves/splineCurve.js",
            "line": 206,
            "description": "Returns point on this SplineCurve at the given position.",
            "itemtype": "method",
            "name": "getPoint",
            "params": [
                {
                    "name": "t",
                    "description": "Position to get point at.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "}",
                "type": "Array of Number"
            },
            "class": "SplineCurve",
            "module": "xeogl",
            "submodule": "curves"
        },
        {
            "file": "examples/js/generation/geometryBuilder.js",
            "line": 95,
            "description": "Sets the shape that will be added to this GeometryBuilder on each subsequent call to {{#crossLink \"GeometryBuilder/addShape:method\"}}addShape(){{/crossLink}}.\n\nThe shape can be either a {{#crossLink \"Geometry\"}}{{/crossLink}} or a JavaScript object containing vertex and index arrays.",
            "itemtype": "method",
            "name": "setShape",
            "params": [
                {
                    "name": "shape",
                    "description": "The shape to add.",
                    "type": "Geometry|*"
                }
            ],
            "return": {
                "description": "this"
            },
            "class": "GeometryBuilder",
            "module": "xeogl",
            "submodule": "generation"
        },
        {
            "file": "examples/js/generation/geometryBuilder.js",
            "line": 109,
            "description": "Sets the modeling transform matrix to apply to each shape added with subsequent calls to {{#crossLink \"GeometryBuilder/addShape:method\"}}addShape(){{/crossLink}}.",
            "itemtype": "method",
            "name": "setMatrix",
            "params": [
                {
                    "name": "matrix",
                    "description": "a 16-element transform matrix.",
                    "type": "Float32Array"
                }
            ],
            "return": {
                "description": "this"
            },
            "class": "GeometryBuilder",
            "module": "xeogl",
            "submodule": "generation"
        },
        {
            "file": "examples/js/generation/geometryBuilder.js",
            "line": 121,
            "description": "Adds a shape to this GeometryBuilder. The shape geometry is the one last added\nby {{#crossLink \"GeometryBuilder/addShape:method\"}}addShape(){{/crossLink}}, and will be transformed by the\nmatrix that was set by the last call to {{#crossLink \"GeometryBuilder/build:method\"}}setMatrix(){{/crossLink}}.\n\nA subsequent call to {{#crossLink \"GeometryBuilder/build:method\"}}build(){{/crossLink}} will add all the\naccumulated transformed shapes to a target {{#crossLink \"Geometry\"}}{{/crossLink}}.",
            "itemtype": "method",
            "name": "addShape",
            "return": {
                "description": "this"
            },
            "class": "GeometryBuilder",
            "module": "xeogl",
            "submodule": "generation"
        },
        {
            "file": "examples/js/generation/geometryBuilder.js",
            "line": 214,
            "description": "Returns the accumulated state from previous calls to {{#crossLink \"GeometryBuilder/setMatrix:method\"}}setMatrix(){{/crossLink}} and\n{{#crossLink \"GeometryBuilder/setShape:method\"}}setShape(){{/crossLink}}.\n\nRetains all that state afterwards, so that you can continue to call this method to add the state to\nother {{#crossLink \"Geometry\"}}Geometries{{/crossLink}}.",
            "itemtype": "method",
            "name": "build",
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "GeometryBuilder",
            "module": "xeogl",
            "submodule": "generation"
        },
        {
            "file": "examples/js/generation/geometryBuilder.js",
            "line": 235,
            "description": "Resets this GeometryBuilder, clearing all the state previously accumulated with {{#crossLink \"GeometryBuilder/setMatrix:method\"}}setMatrix(){{/crossLink}} and\n {{#crossLink \"GeometryBuilder/setShape:method\"}}setShape(){{/crossLink}}.",
            "itemtype": "method",
            "name": "reset",
            "return": {
                "description": "this"
            },
            "class": "GeometryBuilder",
            "module": "xeogl",
            "submodule": "generation"
        },
        {
            "file": "examples/js/skyboxes/skybox.js",
            "line": 186,
            "description": "Size of this Skybox, given as the distance from the center at [0,0,0] to each face.\n\nFires an {{#crossLink \"Skybox/size:event\"}}{{/crossLink}} event on change.",
            "itemtype": "property",
            "name": "size",
            "default": "1000",
            "type": "{Number}",
            "class": "Skybox",
            "module": "xeogl",
            "submodule": "skyboxes"
        },
        {
            "file": "examples/js/skyboxes/skybox.js",
            "line": 203,
            "description": "Fired whenever this Skybox's {{#crossLink \"Skybox/size:property\"}}{{/crossLink}} property changes.",
            "itemtype": "event",
            "name": "size",
            "params": [
                {
                    "name": "value",
                    "description": "The property's new value",
                    "type": "Array of Number"
                }
            ],
            "class": "Skybox",
            "module": "xeogl",
            "submodule": "skyboxes"
        },
        {
            "file": "examples/js/skyboxes/skybox.js",
            "line": 217,
            "description": "Indicates whether this Skybox is visible or not.\n\nFires a {{#crossLink \"Skybox/active:event\"}}{{/crossLink}} event on change.",
            "itemtype": "property",
            "name": "active",
            "default": "false",
            "type": "Boolean",
            "class": "Skybox",
            "module": "xeogl",
            "submodule": "skyboxes"
        },
        {
            "file": "examples/js/skyboxes/skybox.js",
            "line": 232,
            "description": "Fired whenever this Skybox's {{#crossLink \"Skybox/active:property\"}}{{/crossLink}} property changes.",
            "itemtype": "event",
            "name": "active",
            "params": [
                {
                    "name": "value",
                    "description": "The property's new value",
                    "type": "Boolean"
                }
            ],
            "class": "Skybox",
            "module": "xeogl",
            "submodule": "skyboxes"
        },
        {
            "file": "examples/js/geometry/heightmapGeometry.js",
            "line": 113,
            "description": "Implement protected virtual template method {{#crossLink \"Geometry/method:_update\"}}{{/crossLink}},\nto generate geometry data arrays.",
            "access": "protected",
            "tagname": "",
            "class": "HeightmapGeometry",
            "module": "xeogl",
            "submodule": "geometry"
        },
        {
            "file": "examples/js/geometry/heightmapGeometry.js",
            "line": 288,
            "description": "Fired whenever this HeightmapGeometry has rebuilt itself after an update to the\n{{#crossLink \"Heightmap/src:property\"}}{{/crossLink}} or {{#crossLink \"Heightmap/image:property\"}}{{/crossLink}} properties.",
            "itemtype": "event",
            "name": "loaded",
            "params": [
                {
                    "name": "value",
                    "description": "This Heightmap",
                    "type": "Heightmap"
                }
            ],
            "class": "HeightmapGeometry",
            "module": "xeogl",
            "submodule": "geometry"
        },
        {
            "file": "examples/js/geometry/heightmapGeometry.js",
            "line": 332,
            "description": "Fired whenever this Heightmap's  {{#crossLink \"Heightmap/image:property\"}}{{/crossLink}} property changes.",
            "itemtype": "event",
            "name": "image",
            "params": [
                {
                    "name": "value",
                    "description": "The property's new value",
                    "type": "HTML Image"
                }
            ],
            "class": "HeightmapGeometry",
            "module": "xeogl",
            "submodule": "geometry"
        },
        {
            "file": "examples/js/geometry/heightmapGeometry.js",
            "line": 373,
            "description": "The Heightmap's level-of-detail factor.\n\nFires a {{#crossLink \"Heightmap/lod:event\"}}{{/crossLink}} event on change.",
            "itemtype": "property",
            "name": "lod",
            "default": "1",
            "type": "Number",
            "class": "HeightmapGeometry",
            "module": "xeogl",
            "submodule": "geometry"
        },
        {
            "file": "examples/js/geometry/heightmapGeometry.js",
            "line": 403,
            "description": "Fired whenever this Heightmap's {{#crossLink \"Heightmap/lod:property\"}}{{/crossLink}} property changes.",
            "itemtype": "event",
            "name": "lod",
            "type": "Number",
            "params": [
                {
                    "name": "value",
                    "description": "The property's new value"
                }
            ],
            "class": "HeightmapGeometry",
            "module": "xeogl",
            "submodule": "geometry"
        },
        {
            "file": "examples/js/geometry/heightmapGeometry.js",
            "line": 417,
            "description": "Indicates an HTML DOM Image object to source this Heightmap from.\n\nAlternatively, you could indicate the source via the\n{{#crossLink \"Heightmap/src:property\"}}{{/crossLink}} property.\n\nFires an {{#crossLink \"Heightmap/image:event\"}}{{/crossLink}} event on change.\n\nSets the {{#crossLink \"Heightmap/src:property\"}}{{/crossLink}} to null.",
            "itemtype": "property",
            "name": "image",
            "default": "null",
            "type": "{HTMLImageElement}",
            "class": "HeightmapGeometry",
            "module": "xeogl",
            "submodule": "geometry"
        },
        {
            "file": "examples/js/geometry/heightmapGeometry.js",
            "line": 444,
            "description": "Fired whenever this Heightmap's  {{#crossLink \"Heightmap/image:property\"}}{{/crossLink}} property changes.",
            "itemtype": "event",
            "name": "image",
            "params": [
                {
                    "name": "value",
                    "description": "The property's new value",
                    "type": "HTML Image"
                }
            ],
            "class": "HeightmapGeometry",
            "module": "xeogl",
            "submodule": "geometry"
        },
        {
            "file": "examples/js/geometry/heightmapGeometry.js",
            "line": 457,
            "description": "Indicates a path to an image file to source this Heightmap from.\n\nAlternatively, you could indicate the source via the\n{{#crossLink \"Heightmap/image:property\"}}{{/crossLink}} property.\n\nFires a {{#crossLink \"Heightmap/src:event\"}}{{/crossLink}} event on change.\n\nSets the {{#crossLink \"Heightmap/image:property\"}}{{/crossLink}} to null.",
            "itemtype": "property",
            "name": "src",
            "default": "null",
            "type": "String",
            "class": "HeightmapGeometry",
            "module": "xeogl",
            "submodule": "geometry"
        },
        {
            "file": "examples/js/geometry/heightmapGeometry.js",
            "line": 488,
            "description": "Fired whenever this Heightmap's {{#crossLink \"Heightmap/src:property\"}}{{/crossLink}} property changes.",
            "itemtype": "event",
            "name": "src",
            "params": [
                {
                    "name": "value",
                    "description": "The property's new value"
                }
            ],
            "type": "String",
            "class": "HeightmapGeometry",
            "module": "xeogl",
            "submodule": "geometry"
        },
        {
            "file": "examples/js/geometry/heightmapGeometry.js",
            "line": 502,
            "description": "3D point indicating the center position of this HeightmapGeometry.\n\nFires an {{#crossLink \"HeightmapGeometry/center:event\"}}{{/crossLink}} event on change.",
            "itemtype": "property",
            "name": "center",
            "default": "[0,0,0]",
            "type": "{Float32Array}",
            "class": "HeightmapGeometry",
            "module": "xeogl",
            "submodule": "geometry"
        },
        {
            "file": "examples/js/geometry/heightmapGeometry.js",
            "line": 527,
            "description": "Fired whenever this HeightmapGeometry's {{#crossLink \"HeightmapGeometry/center:property\"}}{{/crossLink}} property changes.",
            "itemtype": "event",
            "name": "center",
            "params": [
                {
                    "name": "value",
                    "description": "The property's new value",
                    "type": "Float32Array"
                }
            ],
            "class": "HeightmapGeometry",
            "module": "xeogl",
            "submodule": "geometry"
        },
        {
            "file": "examples/js/geometry/heightmapGeometry.js",
            "line": 540,
            "description": "The Heightmap's dimension on the X-axis.\n\nFires a {{#crossLink \"Heightmap/xSize:event\"}}{{/crossLink}} event on change.",
            "itemtype": "property",
            "name": "xSize",
            "default": "1",
            "type": "Number",
            "class": "HeightmapGeometry",
            "module": "xeogl",
            "submodule": "geometry"
        },
        {
            "file": "examples/js/geometry/heightmapGeometry.js",
            "line": 570,
            "description": "Fired whenever this Heightmap's {{#crossLink \"Heightmap/xSize:property\"}}{{/crossLink}} property changes.",
            "itemtype": "event",
            "name": "xSize",
            "type": "Number",
            "params": [
                {
                    "name": "value",
                    "description": "The property's new value"
                }
            ],
            "class": "HeightmapGeometry",
            "module": "xeogl",
            "submodule": "geometry"
        },
        {
            "file": "examples/js/geometry/heightmapGeometry.js",
            "line": 584,
            "description": "The Heightmap's dimension on the Y-axis.\n\nFires a {{#crossLink \"Heightmap/ySize:event\"}}{{/crossLink}} event on change.",
            "itemtype": "property",
            "name": "ySize",
            "default": "0.25",
            "type": "Number",
            "class": "HeightmapGeometry",
            "module": "xeogl",
            "submodule": "geometry"
        },
        {
            "file": "examples/js/geometry/heightmapGeometry.js",
            "line": 614,
            "description": "Fired whenever this Heightmap's {{#crossLink \"Heightmap/ySize:property\"}}{{/crossLink}} property changes.",
            "itemtype": "event",
            "name": "ySize",
            "type": "Number",
            "params": [
                {
                    "name": "value",
                    "description": "The property's new value"
                }
            ],
            "class": "HeightmapGeometry",
            "module": "xeogl",
            "submodule": "geometry"
        },
        {
            "file": "examples/js/geometry/heightmapGeometry.js",
            "line": 628,
            "description": "The Heightmap's dimension (height) on the Z-axis.\n\nFires a {{#crossLink \"Heightmap/zSize:event\"}}{{/crossLink}} event on change.",
            "itemtype": "property",
            "name": "zSize",
            "default": "1.0",
            "type": "Number",
            "class": "HeightmapGeometry",
            "module": "xeogl",
            "submodule": "geometry"
        },
        {
            "file": "examples/js/geometry/heightmapGeometry.js",
            "line": 658,
            "description": "Fired whenever this Heightmap's {{#crossLink \"Heightmap/zSize:property\"}}{{/crossLink}} property changes.",
            "itemtype": "event",
            "name": "zSize",
            "type": "Number",
            "params": [
                {
                    "name": "value",
                    "description": "The property's new value"
                }
            ],
            "class": "HeightmapGeometry",
            "module": "xeogl",
            "submodule": "geometry"
        },
        {
            "file": "examples/js/geometry/heightmapGeometry.js",
            "line": 672,
            "description": "The Heightmap's number of segments on the X-axis.\n\nFires a {{#crossLink \"Heightmap/xSegments:event\"}}{{/crossLink}} event on change.",
            "itemtype": "property",
            "name": "xSegments",
            "default": "100",
            "type": "Number",
            "class": "HeightmapGeometry",
            "module": "xeogl",
            "submodule": "geometry"
        },
        {
            "file": "examples/js/geometry/heightmapGeometry.js",
            "line": 702,
            "description": "Fired whenever this Heightmap's {{#crossLink \"Heightmap/xSegments:property\"}}{{/crossLink}} property changes.",
            "itemtype": "event",
            "name": "xSegments",
            "type": "Number",
            "params": [
                {
                    "name": "value",
                    "description": "The property's new value"
                }
            ],
            "class": "HeightmapGeometry",
            "module": "xeogl",
            "submodule": "geometry"
        },
        {
            "file": "examples/js/geometry/heightmapGeometry.js",
            "line": 716,
            "description": "The Heightmap's number of segments on the Z-axis.\n\nFires a {{#crossLink \"Heightmap/zSegments:event\"}}{{/crossLink}} event on change.",
            "itemtype": "property",
            "name": "zSegments",
            "default": "100",
            "type": "Number",
            "class": "HeightmapGeometry",
            "module": "xeogl",
            "submodule": "geometry"
        },
        {
            "file": "examples/js/geometry/heightmapGeometry.js",
            "line": 746,
            "description": "Fired whenever this Heightmap's {{#crossLink \"Heightmap/zSegments:property\"}}{{/crossLink}} property changes.",
            "itemtype": "event",
            "name": "zSegments",
            "type": "Number",
            "params": [
                {
                    "name": "value",
                    "description": "The property's new value"
                }
            ],
            "class": "HeightmapGeometry",
            "module": "xeogl",
            "submodule": "geometry"
        },
        {
            "file": "examples/js/models/DRACOLoader.js",
            "line": 46,
            "description": "Sets desired mode for generated geometry indices.\nCan be either:\n    THREE.TrianglesDrawMode\n    THREE.TriangleStripDrawMode",
            "class": "OBJModel",
            "module": "xeogl"
        },
        {
            "file": "examples/js/models/DRACOLoader.js",
            "line": 56,
            "description": "Skips dequantization for a specific attribute.\n|attributeName| is the THREE.js name of the given attribute type.\nThe only currently supported |attributeName| is 'position', more may be\nadded in future.",
            "class": "OBJModel",
            "module": "xeogl"
        },
        {
            "file": "examples/js/models/DRACOLoader.js",
            "line": 70,
            "description": "|attributeUniqueIdMap| specifies attribute unique id for an attribute in\nthe geometry to be decoded. The name of the attribute must be one of the\nsupported attribute type in Three.JS, including:\n    'position',\n    'color',\n    'normal',\n    'uv',\n    'uv2',\n    'skinIndex',\n    'skinWeight'.\nThe format is:\n    attributeUniqueIdMap[attributeName] = attributeId",
            "class": "OBJModel",
            "module": "xeogl"
        },
        {
            "file": "examples/js/models/DRACOLoader.js",
            "line": 331,
            "description": "Sets the base path for decoder source files.",
            "params": [
                {
                    "name": "path",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "OBJModel",
            "module": "xeogl"
        },
        {
            "file": "examples/js/models/DRACOLoader.js",
            "line": 339,
            "description": "Sets decoder configuration and releases singleton decoder module. Module\nwill be recreated with the next decoding call.",
            "params": [
                {
                    "name": "config",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "OBJModel",
            "module": "xeogl"
        },
        {
            "file": "examples/js/models/DRACOLoader.js",
            "line": 355,
            "description": "Releases the singleton DracoDecoderModule instance. Module will be recreated\nwith the next decoding call.",
            "class": "OBJModel",
            "module": "xeogl"
        },
        {
            "file": "examples/js/models/DRACOLoader.js",
            "line": 363,
            "description": "Gets WebAssembly or asm.js singleton instance of DracoDecoderModule after testing for\nbrowser support. Returns Promise that resolves when module is available.",
            "return": {
                "description": ">}",
                "type": "Promise<decoder: DracoDecoderModule"
            },
            "class": "OBJModel",
            "module": "xeogl"
        },
        {
            "file": "examples/js/models/DRACOLoader.js",
            "line": 411,
            "params": [
                {
                    "name": "src",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Promise"
            },
            "class": "OBJModel",
            "module": "xeogl"
        },
        {
            "file": "examples/js/models/DRACOLoader.js",
            "line": 431,
            "params": [
                {
                    "name": "src",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Promise"
            },
            "class": "OBJModel",
            "module": "xeogl"
        },
        {
            "file": "examples/js/models/OBJModel.js",
            "line": 135,
            "description": "Path to a Wavefront OBJ file.\n\nYou can set this to a new file path at any time, which will cause the OBJModel to load components from\nthe new file (after first destroying any components loaded from a previous file path).\n\nAlso loads materials from any MTL files referenced in the OBJ.\n\nFires a {{#crossLink \"OBJModel/src:event\"}}{{/crossLink}} event on change.",
            "itemtype": "property",
            "name": "src",
            "type": "String",
            "class": "OBJModel",
            "module": "xeogl",
            "submodule": "models"
        },
        {
            "file": "examples/js/models/OBJModel.js",
            "line": 163,
            "description": "Fired whenever this OBJModel has finished loading components from the OBJ file\nspecified by {{#crossLink \"OBJModel/src:property\"}}{{/crossLink}}.",
            "itemtype": "event",
            "name": "loaded",
            "class": "OBJModel",
            "module": "xeogl",
            "submodule": "models"
        },
        {
            "file": "examples/js/models/OBJModel.js",
            "line": 179,
            "description": "Fired whenever this OBJModel's {{#crossLink \"OBJModel/src:property\"}}{{/crossLink}} property changes.",
            "itemtype": "event",
            "name": "src",
            "params": [
                {
                    "name": "value",
                    "description": "The property's new value"
                }
            ],
            "class": "OBJModel",
            "module": "xeogl",
            "submodule": "models"
        },
        {
            "file": "examples/js/models/OBJModel.js",
            "line": 209,
            "description": "Loads OBJ and MTL from file(s) into a {{#crossLink \"Model\"}}{{/crossLink}}.",
            "itemtype": "method",
            "name": "load",
            "static": 1,
            "params": [
                {
                    "name": "model",
                    "description": "Model to load into.",
                    "type": "Model"
                },
                {
                    "name": "src",
                    "description": "Path to OBJ file.",
                    "type": "String"
                },
                {
                    "name": "ok",
                    "description": "Completion callback.",
                    "type": "Function",
                    "optional": true
                }
            ],
            "class": "OBJModel",
            "module": "xeogl",
            "submodule": "models"
        },
        {
            "file": "examples/js/models/OBJModel.js",
            "line": 241,
            "description": "Parses OBJ and MTL text strings into a {{#crossLink \"Model\"}}{{/crossLink}}.",
            "itemtype": "method",
            "name": "parse",
            "static": 1,
            "params": [
                {
                    "name": "model",
                    "description": "Model to load into.",
                    "type": "Model"
                },
                {
                    "name": "objText",
                    "description": "OBJ text string.",
                    "type": "String"
                },
                {
                    "name": "mtlText",
                    "description": "MTL text string.",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "basePath",
                    "description": "Base path for external resources.",
                    "type": "String",
                    "optional": true
                }
            ],
            "class": "OBJModel",
            "module": "xeogl",
            "submodule": "models"
        },
        {
            "file": "examples/js/models/STLModel.js",
            "line": 320,
            "description": "Path to an STL file.\n\nYou can set this to a new file path at any time (except while loading), which will cause the STLModel to load components from\nthe new file (after first destroying any components loaded from a previous file path).\n\nFires a {{#crossLink \"STLModel/loaded:event\"}}{{/crossLink}} event when the STL has loaded.",
            "itemtype": "property",
            "name": "src",
            "type": "String",
            "class": "STLModel",
            "module": "xeogl",
            "submodule": "models"
        },
        {
            "file": "examples/js/models/STLModel.js",
            "line": 342,
            "description": "Fired whenever this STLModel has finished loading components from the STL file\nspecified by {{#crossLink \"STLModel/src:property\"}}{{/crossLink}}.",
            "itemtype": "event",
            "name": "loaded",
            "class": "STLModel",
            "module": "xeogl",
            "submodule": "models"
        },
        {
            "file": "examples/js/models/STLModel.js",
            "line": 366,
            "description": "Loads STL from a URL into a {{#crossLink \"Model\"}}{{/crossLink}}.",
            "itemtype": "method",
            "name": "load",
            "static": 1,
            "params": [
                {
                    "name": "model",
                    "description": "Model to load into.",
                    "type": "Model"
                },
                {
                    "name": "src",
                    "description": "Path to STL file.",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "Loading options.",
                    "type": "Object"
                },
                {
                    "name": "ok",
                    "description": "Completion callback.",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "error",
                    "description": "Error callback.",
                    "type": "Function",
                    "optional": true
                }
            ],
            "class": "STLModel",
            "module": "xeogl",
            "submodule": "models"
        },
        {
            "file": "examples/js/models/STLModel.js",
            "line": 395,
            "description": "Fired whenever this STLModel fails to load the STL file\nspecified by {{#crossLink \"STLModel/src:property\"}}{{/crossLink}}.",
            "itemtype": "event",
            "name": "error",
            "params": [
                {
                    "name": "msg",
                    "description": "Description of the error",
                    "type": "String"
                }
            ],
            "class": "STLModel",
            "module": "xeogl",
            "submodule": "models"
        },
        {
            "file": "examples/js/models/STLModel.js",
            "line": 405,
            "description": "Parses STL into a {{#crossLink \"Model\"}}{{/crossLink}}.",
            "itemtype": "method",
            "name": "parse",
            "static": 1,
            "params": [
                {
                    "name": "model",
                    "description": "Model to parse into.",
                    "type": "Model"
                },
                {
                    "name": "data",
                    "description": "The STL data.",
                    "type": "ArrayBuffer"
                },
                {
                    "name": "options",
                    "description": "Parsing options",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "basePath",
                            "description": "Base path path to find external resources on, if any.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "loadBuffer",
                            "description": "Callback to load buffer files.",
                            "type": "String",
                            "optional": true
                        }
                    ]
                }
            ],
            "class": "STLModel",
            "module": "xeogl",
            "submodule": "models"
        },
        {
            "file": "examples/js/models/buildableModel.js",
            "line": 99,
            "description": "Adds an asset to this BuildableModel.\n\nThe asset is given as a configuration object, to be lazy-instantiated as soon as an entity is built from\nit with {{#crossLink \"BuildableModel/entity:method\"}}entity(){{/crossLink}}.\n\n#### Usage\n\nAdding a {{#crossLink \"PhongMaterial\"}}{{/crossLink}} asset with ID \"gridMaterial\":\n\n````javascript\nbuildableModel.asset(\"gridMaterial\", {\n    type: \"xeogl.PhongMaterial\",\n    ambient: [0.9, 0.3, 0.9],\n    shininess: 30,\n    diffuseMap: {\n        src: \"textures/diffuse/uvGrid2.jpg\"\n    }\n});\n````\n\nAdding a {{#crossLink \"BoxGeometry\"}}{{/crossLink}} asset with ID \"boxGeometry\":\n\n````javascript\nbuildableModel.asset(\"boxGeometry\", {\n    type: \"xeogl.BoxGeometry\",\n    xSize: 1.0,\n    ySize: 1.0,\n    zSize: 1.0\n});\n````",
            "itemtype": "method",
            "name": "asset",
            "params": [
                {
                    "name": "assetId",
                    "description": "A unique ID for the asset.",
                    "type": "String|Number"
                },
                {
                    "name": "cfg",
                    "description": "Configuration object for the asset.",
                    "type": "*"
                }
            ],
            "class": "BuildableModel",
            "module": "xeogl",
            "submodule": "models"
        },
        {
            "file": "examples/js/models/buildableModel.js",
            "line": 140,
            "description": "Selects the {{#crossLink \"Geometry\"}}{{/crossLink}} asset that will be added to\neach {{#crossLink \"Entity\"}}{{/crossLink}} subsequently created with\n{{#crossLink \"BuildableModel/entity:method\"}}entity(){{/crossLink}}.\n\nThe given ID must belong to a {{#crossLink \"Geometry\"}}{{/crossLink}} asset that was added previously with\n{{#crossLink \"BuildableModel/asset:method\"}}asset(){{/crossLink}}.",
            "itemtype": "method",
            "name": "geometry",
            "params": [
                {
                    "name": "assetId",
                    "description": "The asset ID.",
                    "type": "String|Number"
                }
            ],
            "class": "BuildableModel",
            "module": "xeogl",
            "submodule": "models"
        },
        {
            "file": "examples/js/models/buildableModel.js",
            "line": 155,
            "description": "Selects the {{#crossLink \"Material\"}}{{/crossLink}} asset that will be added to\neach {{#crossLink \"Entity\"}}{{/crossLink}} subsequently created with\n{{#crossLink \"BuildableModel/entity:method\"}}entity(){{/crossLink}}.\n\nThe given ID must belong to a {{#crossLink \"Material\"}}{{/crossLink}} asset that was added previously with\n{{#crossLink \"BuildableModel/asset:method\"}}asset(){{/crossLink}}.",
            "itemtype": "method",
            "name": "material",
            "params": [
                {
                    "name": "assetId",
                    "description": "The asset ID.",
                    "type": "String|Number"
                }
            ],
            "class": "BuildableModel",
            "module": "xeogl",
            "submodule": "models"
        },
        {
            "file": "examples/js/models/buildableModel.js",
            "line": 170,
            "description": "Sets the 3D position of each {{#crossLink \"Entity\"}}{{/crossLink}} subsequently created with\n{{#crossLink \"BuildableModel/entity:method\"}}entity(){{/crossLink}}.",
            "itemtype": "method",
            "name": "pos",
            "params": [
                {
                    "name": "x",
                    "description": "Position on X-axis.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "Position on Y-axis.",
                    "type": "Number"
                },
                {
                    "name": "z",
                    "description": "Position on Z-axis.",
                    "type": "Number"
                }
            ],
            "class": "BuildableModel",
            "module": "xeogl",
            "submodule": "models"
        },
        {
            "file": "examples/js/models/buildableModel.js",
            "line": 185,
            "description": "Sets the 3D scale of each {{#crossLink \"Entity\"}}{{/crossLink}} subsequently created with\n{{#crossLink \"BuildableModel/entity:method\"}}entity(){{/crossLink}}.",
            "itemtype": "method",
            "name": "scale",
            "params": [
                {
                    "name": "x",
                    "description": "Scale on X-axis.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "Scale on Y-axis.",
                    "type": "Number"
                },
                {
                    "name": "z",
                    "description": "Scale on Z-axis.",
                    "type": "Number"
                }
            ],
            "class": "BuildableModel",
            "module": "xeogl",
            "submodule": "models"
        },
        {
            "file": "examples/js/models/buildableModel.js",
            "line": 200,
            "description": "Sets the 3D Euler rotation angles for each {{#crossLink \"Entity\"}}{{/crossLink}} subsequently created\nwith {{#crossLink \"BuildableModel/entity:method\"}}entity(){{/crossLink}}.",
            "itemtype": "method",
            "name": "angles",
            "params": [
                {
                    "name": "x",
                    "description": "Angle on X-axis in degrees.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "Angle on Y-axis in degrees.",
                    "type": "Number"
                },
                {
                    "name": "z",
                    "description": "Angle on Z-axis in degrees.",
                    "type": "Number"
                }
            ],
            "class": "BuildableModel",
            "module": "xeogl",
            "submodule": "models"
        },
        {
            "file": "examples/js/models/buildableModel.js",
            "line": 215,
            "description": "Sets the order of 3D rotations for each {{#crossLink \"Entity\"}}{{/crossLink}} subsequently created\nwith {{#crossLink \"BuildableModel/entity:method\"}}entity(){{/crossLink}}.\n\n#### Usage\n\nThe X, Y and Z axis are identified as ````0, 1, 2```` respectively.\n\n````Javascript\nbuildableModel.axis(0,1,2); // X, Y, Z\nbuildableModel.axis(2,0,1); // Z, X, Y\nbuildableModel.axis(1,2,0); // Y, Z, X\n````",
            "itemtype": "method",
            "name": "axis",
            "params": [
                {
                    "name": "a",
                    "description": "Indicates the first rotation axis.",
                    "type": "Number"
                },
                {
                    "name": "b",
                    "description": "Indicates the second rotation axis.",
                    "type": "Number"
                },
                {
                    "name": "c",
                    "description": "Indicates the third rotation axis.",
                    "type": "Number"
                }
            ],
            "class": "BuildableModel",
            "module": "xeogl",
            "submodule": "models"
        },
        {
            "file": "examples/js/models/buildableModel.js",
            "line": 240,
            "description": "Sets the RGBA colorize factors each {{#crossLink \"Entity\"}}{{/crossLink}} subsequently created\nwith {{#crossLink \"BuildableModel/entity:method\"}}entity(){{/crossLink}}.\n\n#### Usage\n\n````Javascript\nbuildableModel.colorize(0.4, 0.4, 0.4, 1.0);\n````",
            "itemtype": "method",
            "name": "axis",
            "params": [
                {
                    "name": "r",
                    "description": "Indicates the amount of red.",
                    "type": "Number"
                },
                {
                    "name": "g",
                    "description": "Indicates the amount of green.",
                    "type": "Number"
                },
                {
                    "name": "b",
                    "description": "Indicates the amount of blue.",
                    "type": "Number"
                },
                {
                    "name": "z",
                    "description": "Indicates the alpha.",
                    "type": "Number"
                }
            ],
            "class": "BuildableModel",
            "module": "xeogl",
            "submodule": "models"
        },
        {
            "file": "examples/js/models/buildableModel.js",
            "line": 263,
            "description": "Creates an {{#crossLink \"Entity\"}}{{/crossLink}} with whatever assets and states are currently\nset on this BuildableModel.",
            "itemtype": "method",
            "name": "entity",
            "params": [
                {
                    "name": "id",
                    "description": "A unique ID for the new {{#crossLink \"Entity\"}}{{/crossLink}}.",
                    "type": "String|Number",
                    "optional": true
                }
            ],
            "class": "BuildableModel",
            "module": "xeogl",
            "submodule": "models"
        },
        {
            "file": "examples/js/models/buildableModel.js",
            "line": 306,
            "description": "Removes all assets and {{#crossLink \"Entity\"}}Entities{{/crossLink}} from this BuildableModel.",
            "itemtype": "method",
            "name": "clear",
            "class": "BuildableModel",
            "module": "xeogl",
            "submodule": "models"
        },
        {
            "file": "examples/js/models/buildableModel.js",
            "line": 315,
            "description": "Resets the state of this BuildableModel to defaults.",
            "itemtype": "method",
            "name": "reset",
            "class": "BuildableModel",
            "module": "xeogl",
            "submodule": "models"
        },
        {
            "file": "examples/js/models/glTFModel.js",
            "line": 334,
            "description": "Path to a glTF file.\n\nYou can set this to a new file path at any time (except while loading), which will cause the GLTFModel to load components from\nthe new file (after first destroying any components loaded from a previous file path).\n\nFires a {{#crossLink \"GLTFModel/loaded:event\"}}{{/crossLink}} event when the glTF has loaded.",
            "itemtype": "property",
            "name": "src",
            "type": "String",
            "class": "GLTFModel",
            "module": "xeogl",
            "submodule": "models"
        },
        {
            "file": "examples/js/models/glTFModel.js",
            "line": 360,
            "description": "Fired whenever this GLTFModel has finished loading components from the glTF file\nspecified by {{#crossLink \"GLTFModel/src:property\"}}{{/crossLink}}.",
            "itemtype": "event",
            "name": "loaded",
            "class": "GLTFModel",
            "module": "xeogl",
            "submodule": "models"
        },
        {
            "file": "examples/js/models/glTFModel.js",
            "line": 387,
            "description": "Loads glTF from a URL into a {{#crossLink \"Model\"}}{{/crossLink}}.",
            "itemtype": "method",
            "name": "load",
            "static": 1,
            "params": [
                {
                    "name": "model",
                    "description": "Model to load into.",
                    "type": "Model"
                },
                {
                    "name": "src",
                    "description": "Path to glTF file.",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "Loading options.",
                    "type": "Object"
                },
                {
                    "name": "ok",
                    "description": "Completion callback.",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "error",
                    "description": "Error callback.",
                    "type": "Function",
                    "optional": true
                }
            ],
            "class": "GLTFModel",
            "module": "xeogl",
            "submodule": "models"
        },
        {
            "file": "examples/js/models/glTFModel.js",
            "line": 425,
            "description": "Fired whenever this GLTFModel fails to load the glTF file\nspecified by {{#crossLink \"GLTFModel/src:property\"}}{{/crossLink}}.",
            "itemtype": "event",
            "name": "error",
            "params": [
                {
                    "name": "msg",
                    "description": "Description of the error",
                    "type": "String"
                }
            ],
            "class": "GLTFModel",
            "module": "xeogl",
            "submodule": "models"
        },
        {
            "file": "examples/js/models/glTFModel.js",
            "line": 436,
            "description": "Parses glTF JSON into a {{#crossLink \"Model\"}}{{/crossLink}}.",
            "itemtype": "method",
            "name": "parse",
            "static": 1,
            "params": [
                {
                    "name": "model",
                    "description": "Model to parse into.",
                    "type": "Model"
                },
                {
                    "name": "gltf",
                    "description": "The glTF JSON.",
                    "type": "Object"
                },
                {
                    "name": "options",
                    "description": "Parsing options",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "basePath",
                            "description": "Base path path to find external resources on, if any.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "loadBuffer",
                            "description": "Callback to load buffer files.",
                            "type": "String",
                            "optional": true
                        }
                    ]
                }
            ],
            "class": "GLTFModel",
            "module": "xeogl",
            "submodule": "models"
        },
        {
            "file": "examples/js/models/sceneJSModel.js",
            "line": 247,
            "description": "Selects which xeogl material type to create from each SceneJS Phong material.\n\nCauses the SceneJSModel to attempt a best-effort conversion.\n\nUpdate this at any time to reconvert the materials.\n\nFires a {{#crossLink \"SceneJSModel/materialWorkFlow:event\"}}{{/crossLink}} event on change.",
            "itemtype": "property",
            "name": "materialWorkflow",
            "type": "{*}",
            "class": "SceneJSModel",
            "module": "xeogl",
            "submodule": "models"
        },
        {
            "file": "examples/js/models/sceneJSModel.js",
            "line": 282,
            "description": "Fired whenever this SceneJSModel's  {{#crossLink \"SceneJSModel/materialWorkflow:property\"}}{{/crossLink}} property changes.",
            "itemtype": "event",
            "name": "materialWorkflow",
            "params": [
                {
                    "name": "value",
                    "description": "The property's new value"
                }
            ],
            "class": "SceneJSModel",
            "module": "xeogl",
            "submodule": "models"
        },
        {
            "file": "examples/js/models/sceneJSModel.js",
            "line": 295,
            "description": "Path to the SceneJS JSON scene description file.\n\nUpdate this at any time to clear and re-import content.\n\nFires a {{#crossLink \"SceneJSModel/src:event\"}}{{/crossLink}} event on change.",
            "itemtype": "property",
            "name": "src",
            "type": "String",
            "class": "SceneJSModel",
            "module": "xeogl",
            "submodule": "models"
        },
        {
            "file": "examples/js/models/sceneJSModel.js",
            "line": 320,
            "description": "Fired whenever this SceneJSModel has finished loading the SceneJS JSON file\nspecified by {{#crossLink \"SceneJSModel/src:property\"}}{{/crossLink}}.",
            "itemtype": "event",
            "name": "loaded",
            "class": "SceneJSModel",
            "module": "xeogl",
            "submodule": "models"
        },
        {
            "file": "examples/js/models/sceneJSModel.js",
            "line": 366,
            "description": "Fired whenever this SceneJSModel's  {{#crossLink \"SceneJSModel/src:property\"}}{{/crossLink}} property changes.",
            "itemtype": "event",
            "name": "src",
            "params": [
                {
                    "name": "value",
                    "description": "The property's new value"
                }
            ],
            "class": "SceneJSModel",
            "module": "xeogl",
            "submodule": "models"
        },
        {
            "file": "examples/js/models/sceneJSModel.js",
            "line": 379,
            "description": "A SceneJS POJO scene definition.\n\nUpdate this at any time to clear and re-import content.\n\nFires a {{#crossLink \"SceneJSModel/data:event\"}}{{/crossLink}} event on change.",
            "itemtype": "property",
            "name": "data",
            "type": "{*}",
            "class": "SceneJSModel",
            "module": "xeogl",
            "submodule": "models"
        },
        {
            "file": "examples/js/models/sceneJSModel.js",
            "line": 411,
            "description": "Fired whenever this SceneJSModel's  {{#crossLink \"SceneJSModel/data:property\"}}{{/crossLink}} property changes.",
            "itemtype": "event",
            "name": "data",
            "params": [
                {
                    "name": "value",
                    "description": "The property's new value"
                }
            ],
            "class": "SceneJSModel",
            "module": "xeogl",
            "submodule": "models"
        },
        {
            "file": "examples/js/helpers/aabbHelper.js",
            "line": 42,
            "description": "The target {{#crossLink \"Component\"}}{{/crossLink}} subtype.\n\nMust be within the same {{#crossLink \"Scene\"}}{{/crossLink}} as this CameraFollowAnimation. Defaults to the parent\n{{#crossLink \"Scene\"}}Scene{{/crossLink}} when set to a null or undefined value.",
            "itemtype": "property",
            "name": "target",
            "type": "Component",
            "class": "AABBHelper",
            "module": "xeogl"
        },
        {
            "file": "examples/js/helpers/aabbHelper.js",
            "line": 62,
            "description": "Emissive color of this AABBHelper.\n\nFires an {{#crossLink \"AABBHelper/color:event\"}}{{/crossLink}} event on change.",
            "itemtype": "property",
            "name": "color",
            "default": "[0,1,0]",
            "type": "{Float32Array}",
            "class": "AABBHelper",
            "module": "xeogl"
        },
        {
            "file": "examples/js/helpers/aabbHelper.js",
            "line": 77,
            "description": "Fired whenever this AABBHelper's {{#crossLink \"AABBHelper/color:property\"}}{{/crossLink}} property changes.",
            "itemtype": "event",
            "name": "color",
            "params": [
                {
                    "name": "value",
                    "description": "The property's new value",
                    "type": "Float32Array"
                }
            ],
            "class": "AABBHelper",
            "module": "xeogl"
        },
        {
            "file": "examples/js/helpers/aabbHelper.js",
            "line": 90,
            "description": "Indicates whether this AABBHelper is visible or not.\n\nFires a {{#crossLink \"AABBHelper/visible:event\"}}{{/crossLink}} event on change.",
            "itemtype": "property",
            "name": "visible",
            "default": "true",
            "type": "Boolean",
            "class": "AABBHelper",
            "module": "xeogl"
        },
        {
            "file": "examples/js/helpers/aabbHelper.js",
            "line": 107,
            "description": "Fired whenever this helper's {{#crossLink \"AABBHelper/visible:property\"}}{{/crossLink}} property changes.",
            "itemtype": "event",
            "name": "visible",
            "params": [
                {
                    "name": "value",
                    "description": "The property's new value",
                    "type": "Boolean"
                }
            ],
            "class": "AABBHelper",
            "module": "xeogl"
        },
        {
            "file": "examples/js/helpers/axisHelper.js",
            "line": 346,
            "params": [
                {
                    "name": "visible",
                    "description": ""
                }
            ],
            "class": "AxisHelper",
            "module": "xeogl"
        },
        {
            "file": "examples/js/helpers/axisHelper.js",
            "line": 376,
            "description": "Sets the canvas size of the ViewCube.",
            "params": [
                {
                    "name": "size",
                    "description": "Canvas size.",
                    "type": "Number"
                }
            ],
            "class": "AxisHelper",
            "module": "xeogl"
        },
        {
            "file": "examples/js/helpers/axisHelper.js",
            "line": 388,
            "description": "Gets the canvas size of the ViewCube.",
            "return": {
                "description": "Canvas size.",
                "type": "Number"
            },
            "class": "AxisHelper",
            "module": "xeogl"
        },
        {
            "file": "examples/js/helpers/clipHelper.js",
            "line": 42,
            "description": "The {{#crossLink \"Clip\"}}Clip{{/crossLink}} attached to this ClipHelper.\n\nFires an {{#crossLink \"ClipHelper/Clip:event\"}}{{/crossLink}} event on change.",
            "itemtype": "property",
            "name": "clip",
            "type": "Clip",
            "class": "ClipHelper",
            "module": "xeogl"
        },
        {
            "file": "examples/js/helpers/clipHelper.js",
            "line": 83,
            "description": "The width and height of the ClipHelper plane indicator.\n\nWhen no value is specified, will automatically size to fit within the\n{{#crossLink \"Scene/aabb:property\"}}Scene's boundary{{/crossLink}}.\n\nFires an {{#crossLink \"ClipHelper/planeSize:event\"}}{{/crossLink}} event on change.",
            "itemtype": "property",
            "name": "planeSize",
            "default": "Fitted to scene boundary",
            "type": "{Float32Array}",
            "class": "ClipHelper",
            "module": "xeogl"
        },
        {
            "file": "examples/js/helpers/clipHelper.js",
            "line": 101,
            "description": "Fired whenever this ClipHelper's {{#crossLink \"ClipHelper/planeSize:property\"}}{{/crossLink}} property changes.",
            "itemtype": "event",
            "name": "planeSize",
            "params": [
                {
                    "name": "value",
                    "description": "The property's new value",
                    "type": "Float32Array"
                }
            ],
            "class": "ClipHelper",
            "module": "xeogl"
        },
        {
            "file": "examples/js/helpers/clipHelper.js",
            "line": 114,
            "description": "Indicates whether this ClipHelper's {{#crossLink \"ClipHelper/planeSize:property\"}}{{/crossLink}} is automatically\ngenerated or not.\n\nWhen auto-generated, {{#crossLink \"ClipHelper/planeSize:property\"}}{{/crossLink}} will automatically size\nto fit within the {{#crossLink \"Scene/aabb:property\"}}Scene's boundary{{/crossLink}}.\n\nFires an {{#crossLink \"ClipHelper/autoPlaneSize:event\"}}{{/crossLink}} event on change.",
            "itemtype": "property",
            "name": "autoPlaneSize",
            "default": "false",
            "type": "{Boolean}",
            "class": "ClipHelper",
            "module": "xeogl"
        },
        {
            "file": "examples/js/helpers/clipHelper.js",
            "line": 133,
            "description": "Fired whenever this ClipHelper's {{#crossLink \"ClipHelper/autoPlaneSize:property\"}}{{/crossLink}} property changes.",
            "itemtype": "event",
            "name": "autoPlaneSize",
            "params": [
                {
                    "name": "value",
                    "description": "The property's new value",
                    "type": "Float32Array"
                }
            ],
            "class": "ClipHelper",
            "module": "xeogl"
        },
        {
            "file": "examples/js/helpers/clipHelper.js",
            "line": 146,
            "description": "Indicates whether this ClipHelper's plane is filled or just wireframe.\n\nFires a {{#crossLink \"ClipHelper/active:event\"}}{{/crossLink}} event on change.",
            "itemtype": "property",
            "name": "solid",
            "default": "true",
            "type": "Boolean",
            "class": "ClipHelper",
            "module": "xeogl"
        },
        {
            "file": "examples/js/helpers/clipHelper.js",
            "line": 161,
            "description": "Fired whenever this helper's {{#crossLink \"ClipHelper/solid:property\"}}{{/crossLink}} property changes.",
            "itemtype": "event",
            "name": "solid",
            "params": [
                {
                    "name": "value",
                    "description": "The property's new value",
                    "type": "Boolean"
                }
            ],
            "class": "ClipHelper",
            "module": "xeogl"
        },
        {
            "file": "examples/js/helpers/clipHelper.js",
            "line": 175,
            "description": "Indicates whether this ClipHelper is visible or not.\n\nFires a {{#crossLink \"ClipHelper/active:event\"}}{{/crossLink}} event on change.",
            "itemtype": "property",
            "name": "visible",
            "default": "true",
            "type": "Boolean",
            "class": "ClipHelper",
            "module": "xeogl"
        },
        {
            "file": "examples/js/helpers/clipHelper.js",
            "line": 190,
            "description": "Fired whenever this helper's {{#crossLink \"ClipHelper/visible:property\"}}{{/crossLink}} property changes.",
            "itemtype": "event",
            "name": "visible",
            "params": [
                {
                    "name": "value",
                    "description": "The property's new value",
                    "type": "Boolean"
                }
            ],
            "class": "ClipHelper",
            "module": "xeogl"
        },
        {
            "file": "examples/js/helpers/obbHelper.js",
            "line": 42,
            "description": "The target {{#crossLink \"Component\"}}{{/crossLink}} subtype.\n\nMust be within the same {{#crossLink \"Scene\"}}{{/crossLink}} as this CameraFollowAnimation. Defaults to the parent\n{{#crossLink \"Scene\"}}Scene{{/crossLink}} when set to a null or undefined value.",
            "itemtype": "property",
            "name": "target",
            "type": "Component",
            "class": "OBBHelper",
            "module": "xeogl"
        },
        {
            "file": "examples/js/helpers/obbHelper.js",
            "line": 62,
            "description": "Emissive color of this OBBHelper.",
            "itemtype": "property",
            "name": "color",
            "default": "[0,1,0]",
            "type": "{Float32Array}",
            "class": "OBBHelper",
            "module": "xeogl"
        },
        {
            "file": "examples/js/helpers/obbHelper.js",
            "line": 80,
            "description": "Indicates whether this OBBHelper is visible or not.",
            "itemtype": "property",
            "name": "visible",
            "default": "true",
            "type": "Boolean",
            "class": "OBBHelper",
            "module": "xeogl"
        },
        {
            "file": "examples/js/helpers/planeHelper.js",
            "line": 155,
            "description": "World-space position of this PlaneHelper.",
            "itemtype": "property",
            "name": "worldPos",
            "default": "[0,0,0]",
            "type": "{Float32Array}",
            "class": "PlaneHelper",
            "module": "xeogl"
        },
        {
            "file": "examples/js/helpers/planeHelper.js",
            "line": 175,
            "description": "World-space direction of this PlaneHelper.",
            "itemtype": "property",
            "name": "dir",
            "default": "[0,0,1]",
            "type": "{Float32Array}",
            "class": "PlaneHelper",
            "module": "xeogl"
        },
        {
            "file": "examples/js/helpers/planeHelper.js",
            "line": 202,
            "description": "The width and height of the PlaneHelper plane indicator.\n\nValues assigned to this property will be overridden by an auto-computed value when\n{{#crossLink \"PlaneHelper/autoPlaneSize:property\"}}{{/crossLink}} is true.",
            "itemtype": "property",
            "name": "planeSize",
            "default": "[1,1]",
            "type": "{Float32Array}",
            "class": "PlaneHelper",
            "module": "xeogl"
        },
        {
            "file": "examples/js/helpers/planeHelper.js",
            "line": 224,
            "description": "Indicates whether this PlaneHelper's {{#crossLink \"PlaneHelper/planeSize:property\"}}{{/crossLink}} is automatically\ngenerated or not.\n\nWhen auto-generated, {{#crossLink \"PlaneHelper/planeSize:property\"}}{{/crossLink}} will automatically size\nto fit within the {{#crossLink \"Scene/aabb:property\"}}Scene's boundary{{/crossLink}}.",
            "itemtype": "property",
            "name": "autoPlaneSize",
            "default": "false",
            "type": "{Boolean}",
            "class": "PlaneHelper",
            "module": "xeogl"
        },
        {
            "file": "examples/js/helpers/planeHelper.js",
            "line": 268,
            "description": "Emmissive color of this PlaneHelper.",
            "itemtype": "property",
            "name": "color",
            "default": "[0.4,0.4,0.4]",
            "type": "{Float32Array}",
            "class": "PlaneHelper",
            "module": "xeogl"
        },
        {
            "file": "examples/js/helpers/planeHelper.js",
            "line": 288,
            "description": "Indicates whether this PlaneHelper is filled with color or just wireframe.",
            "itemtype": "property",
            "name": "solid",
            "default": "true",
            "type": "Boolean",
            "class": "PlaneHelper",
            "module": "xeogl"
        },
        {
            "file": "examples/js/helpers/planeHelper.js",
            "line": 307,
            "description": "Indicates whether this PlaneHelper is visible or not.",
            "itemtype": "property",
            "name": "visible",
            "default": "true",
            "type": "Boolean",
            "class": "PlaneHelper",
            "module": "xeogl"
        },
        {
            "file": "examples/js/helpers/splineCurveHelper.js",
            "line": 67,
            "description": "The SplineCurve for this SplineCurveHelper.\n\nFires a {{#crossLink \"SplineCurveHelper/splineCurve:event\"}}{{/crossLink}} event on change.",
            "itemtype": "property",
            "name": "splinecurve",
            "type": "{Splinecurve}",
            "class": "SplineCurveHelper",
            "module": "entities"
        },
        {
            "file": "examples/js/helpers/splineCurveHelper.js",
            "line": 87,
            "description": "Fired whenever this CameraPaths's {{#crossLink \"CameraPath/path:property\"}}{{/crossLink}} property changes.",
            "itemtype": "event",
            "name": "path",
            "params": [
                {
                    "name": "value",
                    "description": "The property's new value"
                }
            ],
            "class": "SplineCurveHelper",
            "module": "entities"
        }
    ],
    "warnings": [
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/canvas/canvas.js:493"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/math/math.js:32"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/math/math.js:43"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/math/math.js:54"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/math/math.js:65"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/math/math.js:76"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/math/math.js:88"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/math/math.js:99"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/math/math.js:160"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/math/math.js:171"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/math/math.js:754"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/math/math.js:1674"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/math/math.js:1724"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/math/math.js:2257"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/math/math.js:2290"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/math/math.js:2323"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/math/math.js:2356"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/math/math.js:2373"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/math/math.js:2406"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/math/math.js:2444"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/math/mathGeometryBuild.js:263"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/math/mathGeometryBuild.js:361"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/component.js:381"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/component.js:883"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/scene.js:1451"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/scene.js:1837"
        },
        {
            "message": "unknown tag: demo",
            "line": " src/xeogl.js:497"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/xeogl.js:534"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/xeogl.js:544"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/xeogl.js:554"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/xeogl.js:564"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/xeogl.js:583"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/xeogl.js:593"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/xeogl.js:606"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/xeogl.js:683"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/xeogl.js:698"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/xeogl.js:711"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " examples/js/curves/cubicBezierCurve.js:289"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " examples/js/curves/curve.js:112"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " examples/js/curves/curve.js:154"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " examples/js/curves/path.js:351"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " examples/js/curves/quadraticBezierCurve.js:262"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " examples/js/curves/splineCurve.js:206"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " examples/js/generation/geometryBuilder.js:95"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " examples/js/generation/geometryBuilder.js:109"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " examples/js/generation/geometryBuilder.js:121"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " examples/js/generation/geometryBuilder.js:214"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " examples/js/generation/geometryBuilder.js:235"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " examples/js/helpers/axisHelper.js:388"
        },
        {
            "message": "Missing item type\nGeneric map of IDs to items - can generate own IDs or accept given IDs. IDs should be strings in order to not\nclash with internally generated IDs, which are numbers.",
            "line": " src/_utils/map.js:3"
        },
        {
            "message": "Missing item type\nUsage:\n\nid = myMap.addItem(\"foo\") // ID internally generated\nid = myMap.addItem(\"foo\", \"bar\") // ID is \"foo\"",
            "line": " src/_utils/map.js:14"
        },
        {
            "message": "Missing item type\nCreated by lindsay on 23.03.18.",
            "line": " src/camera/camera.new.js:1"
        },
        {
            "message": "Missing item type\nAttributes for the WebGL context",
            "line": " src/canvas/canvas.js:162"
        },
        {
            "message": "Missing item type\nCreates a default canvas in the DOM.",
            "line": " src/canvas/canvas.js:378"
        },
        {
            "message": "Missing item type\nCreates a image element behind the canvas, for purpose of showing a custom background.",
            "line": " src/canvas/canvas.js:408"
        },
        {
            "message": "Missing item type\nInitialises the WebGL context",
            "line": " src/canvas/canvas.js:444"
        },
        {
            "message": "Missing item type\nReads colors of pixels from the last rendered frame.\n\n<p>Call this method like this:</p>\n\n````JavaScript\n\n// Ignore transparent pixels (default is false)\nvar opaqueOnly = true;\n\nvar colors = new Float32Array(8);\n\nmyCanvas.readPixels([ 100, 22, 12, 33 ], colors, 2, opaqueOnly);\n````\n\nThen the r,g,b components of the colors will be set to the colors at those pixels.",
            "line": " src/canvas/canvas.js:574"
        },
        {
            "message": "Missing item type\nImplement protected virtual template method {{#crossLink \"Geometry/method:_update\"}}{{/crossLink}},\nto generate geometry data arrays.",
            "line": " src/geometry/pathGeometry.js:70"
        },
        {
            "message": "Missing item type",
            "line": " src/input/input.js:111"
        },
        {
            "message": "Missing item type",
            "line": " src/input/input.js:117"
        },
        {
            "message": "Missing item type",
            "line": " src/input/input.js:123"
        },
        {
            "message": "Missing item type",
            "line": " src/input/input.js:129"
        },
        {
            "message": "Missing item type",
            "line": " src/input/input.js:135"
        },
        {
            "message": "Missing item type",
            "line": " src/input/input.js:141"
        },
        {
            "message": "Missing item type",
            "line": " src/input/input.js:147"
        },
        {
            "message": "Missing item type\nEnable or disable all input handlers",
            "line": " src/input/input.js:601"
        },
        {
            "message": "Missing item type\nClamps a value to the given range.",
            "line": " src/math/math.js:160"
        },
        {
            "message": "Missing item type\nCreates a three-element vector from the rotation part of a sixteen-element matrix.",
            "line": " src/math/math.js:767"
        },
        {
            "message": "Missing item type\nConverts an n-element vector to a JSON-serializable\narray with values rounded to two decimal places.",
            "line": " src/math/math.js:800"
        },
        {
            "message": "Missing item type\nEfficiently post-concatenates a translation to the given matrix.",
            "line": " src/math/math.js:1443"
        },
        {
            "message": "Missing item type\nEfficiently post-concatenates a translation to the given matrix.",
            "line": " src/math/math.js:1452"
        },
        {
            "message": "Missing item type\nCreates a matrix from a quaternion rotation and vector translation",
            "line": " src/math/math.js:1674"
        },
        {
            "message": "Missing item type\nGets Euler angles from a 4x4 matrix.",
            "line": " src/math/math.js:1724"
        },
        {
            "message": "Missing item type\nInitializes a quaternion from Euler angles.",
            "line": " src/math/math.js:2444"
        },
        {
            "message": "Missing item type\nBoundary math functions.",
            "line": " src/math/mathBoundaries.js:1"
        },
        {
            "message": "Missing item type\nReturns a new, uninitialized 3D axis-aligned bounding box.",
            "line": " src/math/mathBoundaries.js:10"
        },
        {
            "message": "Missing item type\nReturns a new, uninitialized 2D axis-aligned bounding box.",
            "line": " src/math/mathBoundaries.js:19"
        },
        {
            "message": "Missing item type\nReturns a new, uninitialized 3D oriented bounding box (OBB).",
            "line": " src/math/mathBoundaries.js:28"
        },
        {
            "message": "Missing item type\nReturns a new, uninitialized 2D oriented bounding box (OBB).",
            "line": " src/math/mathBoundaries.js:37"
        },
        {
            "message": "Missing item type\nTransforms an OBB3 by a 4x4 matrix.",
            "line": " src/math/mathBoundaries.js:47"
        },
        {
            "message": "Missing item type\nGets the diagonal size of an AABB3 given as minima and maxima.",
            "line": " src/math/mathBoundaries.js:95"
        },
        {
            "message": "Missing item type\nGet a diagonal boundary size that is symmetrical about the given point.",
            "line": " src/math/mathBoundaries.js:122"
        },
        {
            "message": "Missing item type\nGets the center of an AABB.",
            "line": " src/math/mathBoundaries.js:160"
        },
        {
            "message": "Missing item type\nGets the center of a 2D AABB.",
            "line": " src/math/mathBoundaries.js:175"
        },
        {
            "message": "Missing item type\nCollapses a 3D axis-aligned boundary, ready to expand to fit 3D points.\nCreates new AABB if none supplied.",
            "line": " src/math/mathBoundaries.js:189"
        },
        {
            "message": "Missing item type\nConverts an axis-aligned 3D boundary into an oriented boundary consisting of\nan array of eight 3D positions, one for each corner of the boundary.",
            "line": " src/math/mathBoundaries.js:209"
        },
        {
            "message": "Missing item type\nFinds the minimum axis-aligned 3D boundary enclosing the homogeneous 3D points (x,y,z,w) given in a flattened array.",
            "line": " src/math/mathBoundaries.js:262"
        },
        {
            "message": "Missing item type\nFinds the minimum axis-aligned 3D boundary enclosing the homogeneous 3D points (x,y,z,w) given in a flattened array.",
            "line": " src/math/mathBoundaries.js:340"
        },
        {
            "message": "Missing item type\nFinds the minimum axis-aligned 3D boundary enclosing the given 3D points.",
            "line": " src/math/mathBoundaries.js:399"
        },
        {
            "message": "Missing item type\nFinds the minimum boundary sphere enclosing the given 3D points.",
            "line": " src/math/mathBoundaries.js:458"
        },
        {
            "message": "Missing item type\nFinds the minimum boundary sphere enclosing the given 3D points.",
            "line": " src/math/mathBoundaries.js:506"
        },
        {
            "message": "Missing item type\nGets the center of a bounding sphere.",
            "line": " src/math/mathBoundaries.js:560"
        },
        {
            "message": "Missing item type\nExpands the first axis-aligned 3D boundary to enclose the second, if required.",
            "line": " src/math/mathBoundaries.js:575"
        },
        {
            "message": "Missing item type\nExpands an axis-aligned 3D boundary to enclose the given point, if needed.",
            "line": " src/math/mathBoundaries.js:609"
        },
        {
            "message": "Missing item type\nCollapses a 2D axis-aligned boundary, ready to expand to fit 2D points.\nCreates new AABB if none supplied.",
            "line": " src/math/mathBoundaries.js:643"
        },
        {
            "message": "Missing item type\nFinds the minimum 2D projected axis-aligned boundary enclosing the given 3D points.",
            "line": " src/math/mathBoundaries.js:661"
        },
        {
            "message": "Missing item type\nExpands the first axis-aligned 2D boundary to enclose the second, if required.",
            "line": " src/math/mathBoundaries.js:716"
        },
        {
            "message": "Missing item type\nExpands an axis-aligned 2D boundary to enclose the given point, if required.",
            "line": " src/math/mathBoundaries.js:742"
        },
        {
            "message": "Missing item type\nCurve math functions.",
            "line": " src/math/mathCurves.js:1"
        },
        {
            "message": "Missing item type\nGeometry math functions.",
            "line": " src/math/mathGeometry.js:1"
        },
        {
            "message": "Missing item type\nCalculates the normal vector of a triangle.",
            "line": " src/math/mathGeometry.js:10"
        },
        {
            "message": "Missing item type\nFinds the intersection of a 3D ray with a 3D triangle.",
            "line": " src/math/mathGeometry.js:45"
        },
        {
            "message": "Missing item type\nFinds the intersection of a 3D ray with a plane defined by 3 points.",
            "line": " src/math/mathGeometry.js:94"
        },
        {
            "message": "Missing item type\nGets barycentric coordinates from cartesian coordinates within a triangle.\nGets barycentric coordinates from cartesian coordinates within a triangle.",
            "line": " src/math/mathGeometry.js:130"
        },
        {
            "message": "Missing item type\nReturns true if the given barycentric coordinates are within their triangle.",
            "line": " src/math/mathGeometry.js:178"
        },
        {
            "message": "Missing item type\nGets cartesian coordinates from barycentric coordinates within a triangle.",
            "line": " src/math/mathGeometry.js:191"
        },
        {
            "message": "Missing item type\nBoundary math functions.",
            "line": " src/math/mathGeometryBuild.js:1"
        },
        {
            "message": "Missing item type\nBuilds normal vectors from positions and indices.",
            "line": " src/math/mathGeometryBuild.js:10"
        },
        {
            "message": "Missing item type\nBuilds vertex tangent vectors from positions, UVs and indices.",
            "line": " src/math/mathGeometryBuild.js:103"
        },
        {
            "message": "Missing item type\nBuilds vertex and index arrays needed by color-indexed triangle picking.",
            "line": " src/math/mathGeometryBuild.js:178"
        },
        {
            "message": "Missing item type\nRemoves duplicate vertices from a triangle mesh.",
            "line": " src/math/mathGeometryBuild.js:263"
        },
        {
            "message": "Missing item type\nConverts surface-perpendicular face normals to vertex normals. Assumes that the mesh contains disjoint triangles\nthat don't share vertex array elements. Works by finding groups of vertices that have the same location and\naveraging their normal vectors.",
            "line": " src/math/mathGeometryBuild.js:361"
        },
        {
            "message": "Missing item type\nKD-tree functions",
            "line": " src/math/mathKDTree.js:1"
        },
        {
            "message": "Missing item type\nReturns a KD-tree that contains the triangles of the given mesh",
            "line": " src/math/mathKDTree.js:13"
        },
        {
            "message": "Missing item type\nRay casting support functions.",
            "line": " src/math/mathRays.js:1"
        },
        {
            "message": "Missing item type\nRemoves a {{#crossLink \"Component\"}}{{/crossLink}} from this model, without destroying it.\n\nNote that if the Component is owned by the Model, where it was created like this:\n\n````javascript\nvar myComponent = new xeogl.Rotate(myModel, {... });\n````\n\nthen even after removing it, calling {{#crossLink \"Model/destroyAll:method\"}}destroyAll{{/crossLink}} on the\nModel will still destroy the component.",
            "line": " src/models/model.js:615"
        },
        {
            "message": "Missing item type\nRotate 'eye' about 'look', around the 'up' vector",
            "line": " src/transforms/lookat.js:101"
        },
        {
            "message": "Missing item type\nRotate 'eye' about 'look' around the right axis (orthogonal to \"up\" and \"look\").",
            "line": " src/transforms/lookat.js:119"
        },
        {
            "message": "Missing item type\nRotate 'look' about 'eye', around the 'up' vector.",
            "line": " src/transforms/lookat.js:138"
        },
        {
            "message": "Missing item type\nRotate 'look' about 'eye', around the right axis (orthogonal to \"up\" and \"look\").",
            "line": " src/transforms/lookat.js:159"
        },
        {
            "message": "Missing item type\nPans the camera along X, Y and Z axis.",
            "line": " src/transforms/lookat.js:178"
        },
        {
            "message": "Missing item type\nIncrements/decrements zoom factor, ie. distance between eye and look.",
            "line": " src/transforms/lookat.js:214"
        },
        {
            "message": "Missing item type\nInitializes this component",
            "line": " src/component.js:417"
        },
        {
            "message": "Missing item type\nAdds a child component to this.\nWhen component not given, attaches the scene's default instance for the given name (if any).\nPublishes the new child component on this component, keyed to the given name.",
            "line": " src/component.js:618"
        },
        {
            "message": "Missing item type\nProtected method, called by sub-classes to queue a call to _update().",
            "line": " src/component.js:955"
        },
        {
            "message": "Missing item type",
            "line": " src/component.js:971"
        },
        {
            "message": "Missing item type\nProtected virtual template method, optionally implemented\nby sub-classes to perform a scheduled task.",
            "line": " src/component.js:983"
        },
        {
            "message": "Missing item type\nProtected template method, implemented by sub-classes\nto clean up just before the component is destroyed.",
            "line": " src/component.js:1058"
        },
        {
            "message": "Missing item type\nInformation about available WebGL support",
            "line": " src/xeogl.js:74"
        },
        {
            "message": "Missing item type\nFor each component type, a list of its supertypes, ordered upwards in the hierarchy.",
            "line": " src/xeogl.js:204"
        },
        {
            "message": "Missing item type\nTests if the given object is an array",
            "line": " src/xeogl.js:526"
        },
        {
            "message": "Missing item type\nTests if the given value is a string",
            "line": " src/xeogl.js:534"
        },
        {
            "message": "Missing item type\nTests if the given value is a number",
            "line": " src/xeogl.js:544"
        },
        {
            "message": "Missing item type\nTests if the given value is an ID",
            "line": " src/xeogl.js:554"
        },
        {
            "message": "Missing item type\nTests if the given components are the same, where the components can be either IDs or instances.",
            "line": " src/xeogl.js:564"
        },
        {
            "message": "Missing item type\nTests if the given value is a function",
            "line": " src/xeogl.js:583"
        },
        {
            "message": "Missing item type\nTests if the given value is a JavaScript JSON object, eg, ````{ foo: \"bar\" }````.",
            "line": " src/xeogl.js:593"
        },
        {
            "message": "Missing item type\nTests if the given component type is a subtype of another component supertype.",
            "line": " src/xeogl.js:606"
        },
        {
            "message": "Missing item type",
            "line": " src/xeogl.js:636"
        },
        {
            "message": "Missing item type",
            "line": " src/xeogl.js:642"
        },
        {
            "message": "Missing item type\nAdd non-null/defined properties of o to o2",
            "line": " src/xeogl.js:653"
        },
        {
            "message": "Missing item type\nAdd properties of o to o2 where undefined or null on o2",
            "line": " src/xeogl.js:668"
        },
        {
            "message": "Missing item type\nReturns true if the given map is empty.",
            "line": " src/xeogl.js:683"
        },
        {
            "message": "Missing item type\nReturns the given ID as a string, in quotes if the ID was a string to begin with.\n\nThis is useful for logging IDs.",
            "line": " src/xeogl.js:698"
        },
        {
            "message": "Missing item type\nReturns the concatenation of two typed arrays.",
            "line": " src/xeogl.js:711"
        },
        {
            "message": "Missing item type\nAdds a frame to this CameraPath, given as the current position of a {{#crossLink \"Camera\"}}{{/crossLink}}.",
            "line": " examples/js/animation/cameraPath.js:114"
        },
        {
            "message": "Missing item type\nAdds a frame to this CameraPath, specified as values for eye, look and up vectors at a given time instant.",
            "line": " examples/js/animation/cameraPath.js:125"
        },
        {
            "message": "Missing item type\nAdds multiple frames to this CameraPath, each frame specified as a set of values for eye, look and up\nvectors at a given time instant.",
            "line": " examples/js/animation/cameraPath.js:146"
        },
        {
            "message": "Missing item type\nSets the position of the {{#crossLink \"Scene\"}}{{/crossLink}}'s {{#crossLink \"Camera\"}}{{/crossLink}} to a position interpolated within this CameraPath\nat the given time instant.",
            "line": " examples/js/animation/cameraPath.js:160"
        },
        {
            "message": "Missing item type\nGets eye, look and up vectors on this CameraPath at a given instant.",
            "line": " examples/js/animation/cameraPath.js:182"
        },
        {
            "message": "Missing item type\nRemoves all frames from this CameraPath.",
            "line": " examples/js/animation/cameraPath.js:197"
        },
        {
            "message": "Missing item type\nAdds a {{#crossLink \"Curve\"}}{{/crossLink}} to this Path.\n\nFires a {{#crossLink \"Path/curves:event\"}}{{/crossLink}} event on change.",
            "line": " examples/js/curves/path.js:156"
        },
        {
            "message": "Missing item type\nGets a point on this Path corresponding to the given progress position.",
            "line": " examples/js/curves/path.js:351"
        },
        {
            "message": "Missing item type\nImplement protected virtual template method {{#crossLink \"Geometry/method:_update\"}}{{/crossLink}},\nto generate geometry data arrays.",
            "line": " examples/js/geometry/heightmapGeometry.js:113"
        },
        {
            "message": "Missing item type\nSets desired mode for generated geometry indices.\nCan be either:\n    THREE.TrianglesDrawMode\n    THREE.TriangleStripDrawMode",
            "line": " examples/js/models/DRACOLoader.js:46"
        },
        {
            "message": "Missing item type\nSkips dequantization for a specific attribute.\n|attributeName| is the THREE.js name of the given attribute type.\nThe only currently supported |attributeName| is 'position', more may be\nadded in future.",
            "line": " examples/js/models/DRACOLoader.js:56"
        },
        {
            "message": "Missing item type\n|attributeUniqueIdMap| specifies attribute unique id for an attribute in\nthe geometry to be decoded. The name of the attribute must be one of the\nsupported attribute type in Three.JS, including:\n    'position',\n    'color',\n    'normal',\n    'uv',\n    'uv2',\n    'skinIndex',\n    'skinWeight'.\nThe format is:\n    attributeUniqueIdMap[attributeName] = attributeId",
            "line": " examples/js/models/DRACOLoader.js:70"
        },
        {
            "message": "Missing item type\nSets the base path for decoder source files.",
            "line": " examples/js/models/DRACOLoader.js:331"
        },
        {
            "message": "Missing item type\nSets decoder configuration and releases singleton decoder module. Module\nwill be recreated with the next decoding call.",
            "line": " examples/js/models/DRACOLoader.js:339"
        },
        {
            "message": "Missing item type\nReleases the singleton DracoDecoderModule instance. Module will be recreated\nwith the next decoding call.",
            "line": " examples/js/models/DRACOLoader.js:355"
        },
        {
            "message": "Missing item type\nGets WebAssembly or asm.js singleton instance of DracoDecoderModule after testing for\nbrowser support. Returns Promise that resolves when module is available.",
            "line": " examples/js/models/DRACOLoader.js:363"
        },
        {
            "message": "Missing item type",
            "line": " examples/js/models/DRACOLoader.js:411"
        },
        {
            "message": "Missing item type",
            "line": " examples/js/models/DRACOLoader.js:431"
        },
        {
            "message": "Missing item type",
            "line": " examples/js/helpers/axisHelper.js:346"
        },
        {
            "message": "Missing item type\nSets the canvas size of the ViewCube.",
            "line": " examples/js/helpers/axisHelper.js:376"
        },
        {
            "message": "Missing item type\nGets the canvas size of the ViewCube.",
            "line": " examples/js/helpers/axisHelper.js:388"
        }
    ]
}